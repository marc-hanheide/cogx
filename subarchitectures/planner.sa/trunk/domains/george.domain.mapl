(define (domain george-yr2)

  (:requirements :mapl :adl :fluents :action-costs :equality)

  (:types
    robot - agent
    visual-object color-name shape-name ident-name - object
  )

  (:constants
    george - robot
    tutor - agent
    unknown-color - color-name
    unknown-shape - shape-name
    unknown-ident - ident-name
  )

  (:predicates
    (color-learned ?v - visual-object)
    (shape-learned ?v - visual-object)
    (ident-learned ?v - visual-object)
  )
 
  (:functions
    (color ?v - visual-object) - color-name
    (shape ?v - visual-object) - shape-name
    (ident ?v - visual-object) - ident-name
    (p-color ?v - visual-object ?c - color-name) - number
    (p-shape ?v - visual-object ?s - shape-name) - number
    (p-ident ?v - visual-object ?i - ident-name) - number
  )

  (:action ask-for-an-objects-color-polar
    :agent (?a - robot)
    :parameters (?v - visual-object ?c - color-name)
    :precondition (and 
    		       (in-domain (color ?v) ?c)
		       (not (= ?c unknown-color))
		       (> (p-color ?v ?c) 0.5)
		  )
    :effect (and
		;;(kval ?a (color ?v))
		(attributed tutor (color ?v) ?c)
		(increase (total-cost) 1)
	    )
  )

  (:action ask-for-an-objects-color-general
    :agent (?a - robot)
    :parameters (?v - visual-object)
    :effect (and 
    	    	 ;;(kval ?a (color ?v))
		 (attributed tutor (color ?v) unknown-color)
		 (increase (total-cost) 2)
	    )
  )

  (:action ask-for-an-objects-shape-polar
    :agent (?a - robot)
    :parameters (?v - visual-object ?s - shape-name)
    :precondition (and
			(in-domain (shape ?v) ?s)
			(not (= ?s unknown-shape))
			(> (p-shape ?v ?s) 0.5)
		  )
    :effect (and
		;;(kval ?a (shape ?v))
		(attributed tutor (shape ?v) ?s)
		(increase (total-cost) 1)
	    )
  )

  (:action ask-for-an-objects-shape-general
    :agent (?a - robot)
    :parameters (?v - visual-object)
    :effect (and
		;;(kval ?a (shape ?v))
		(attributed tutor (shape ?v) unknown-shape)
		(increase (total-cost) 2)
	    )
  )

  (:action ask-for-an-objects-ident-polar
    :agent (?a - robot)
    :parameters (?v - visual-object ?i - ident-name)
    :precondition (and
			(in-domain (ident ?v) ?i)
			(not (= ?i unknown-ident))
			(> (p-ident ?v ?i) 0.5)
		  )
    :effect (and
		;;(kval ?a (ident ?v))
		(attributed tutor (ident ?v) ?i)
		(increase (total-cost) 1)
	    )
  )

  (:action ask-for-an-objects-ident-general
    :agent (?a - robot)
    :parameters (?v - visual-object)
    :effect (and
		;;(kval ?a (ident ?v))
		(attributed tutor (ident ?v) unknown-ident)
		(increase (total-cost) 2)
	    )
  )

  (:action learn-color
    :agent (?a - robot)
    :parameters (?v - visual-object ?c - color-name)
    :precondition 
      (and
	(not (color-learned ?v))
	(attributed tutor (color ?v) ?c)
      )
    :effect (and
		(color-learned ?v)
		(increase (total-cost) 1)
	    )
  )

  (:action learn-shape
    :agent (?a - robot)
    :parameters (?v - visual-object ?s - shape-name)
    :precondition 
      (and
	(not (shape-learned ?v))
	(attributed tutor (shape ?v) ?s)
      )
    :effect (and
		(shape-learned ?v)
		(increase (total-cost) 1)
	    )
  )

  (:action learn-ident
    :agent (?a - robot)
    :parameters (?v - visual-object ?i - ident-name)
    :precondition 
      (and
	(not (ident-learned ?v))
	(attributed tutor (ident ?v) ?i)
      )
    :effect (and
		(ident-learned ?v)
		(increase (total-cost) 1)
	    )
  )
)
