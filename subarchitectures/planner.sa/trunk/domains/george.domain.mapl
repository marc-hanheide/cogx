(define (domain george-yr2)

  (:requirements :mapl :adl :fluents :action-costs :equality)

  (:types
    robot - agent
    visual-object color-name shape-name ident-name - object
  )

  (:constants
    george - robot
    tutor - agent
    unknown-color - color-name
    unknown-shape - shape-name
    unknown-ident - ident-name
  )

  (:predicates
    (color-learned ?v - visual-object)
    (shape-learned ?v - visual-object)
    (ident-learned ?v - visual-object)
    (allow-general-color-question ?v - visual-object)
    (allow-polar-color-question ?v - visual-object ?c - color-name)
    (allow-general-shape-question ?v - visual-object)
    (allow-polar-shape-question ?v - visual-object ?s - shape-name)
    (allow-general-ident-question ?v - visual-object)
    (allow-polar-ident-question ?v - visual-object ?i - ident-name)
    (learning-impossible)
  )

 
  (:functions
    (color ?v - visual-object) - color-name
    (shape ?v - visual-object) - shape-name
    (ident ?v - visual-object) - ident-name
    (p-color ?v - visual-object ?c - color-name) - number
    (p-shape ?v - visual-object ?s - shape-name) - number
    (p-ident ?v - visual-object ?i - ident-name) - number
    ;;(max-color-gain ?v - visual-object) - color-name
    ;;(max-shape-gain ?v - visual-object) - shape-name
    ;;(max-ident-gain ?v - visual-object) - ident-name
  )

  (:derived (learning-impossible)
  	    (forall (?v - visual-object)
	    	(and
		   (or
		      (forall (?c - color-name) (not (attributed tutor (color ?v) ?c)))
		      (color-learned ?v)
		   )
		   (or
		      (forall (?s - shape-name) (not (attributed tutor (shape ?v) ?s)))
		      (shape-learned ?v)
		   )
		   (or
		      (forall (?i - ident-name) (not (attributed tutor (ident ?v) ?i)))
		      (ident-learned ?v)
		   )
		)
	    )
  )		

  (:derived (allow-general-color-question ?v - visual-object)
  	    (forall (?c - color-name)
	    	    (or
			(= ?c unknown-color)
			(< (p-color ?v ?c) 0.5)
			;;(not (= (max-color-gain ?v) ?c))
		    )
	    )
  )

  (:derived (allow-polar-color-question ?v - visual-object ?c - color-name)
  	    (and
		(>= (p-color ?v ?c) 0.5)
		;;(= (max-color-gain ?v) ?c)
	    )
  )

  (:derived (allow-general-shape-question ?v - visual-object)
  	    (forall (?s - shape-name)
	    	    (or
			(= ?s unknown-shape)
			(< (p-shape ?v ?s) 0.5)
			;;(not (= (max-shape-gain ?v) ?s))
		    )
	    )
  )

  (:derived (allow-polar-shape-question ?v - visual-object ?s - shape-name)
  	    (and
		(>= (p-shape ?v ?s) 0.5)
		;;(= (max-shape-gain ?v) ?c)
	    )
  )

  (:derived (allow-general-ident-question ?v - visual-object)
  	    (forall (?i - ident-name)
	    	    (or
			(= ?i unknown-ident)
			(< (p-ident ?v ?i) 0.5)
			;;(not (= (max-ident-gain ?v) ?i))
		    )
	    )
  )

  (:derived (allow-polar-ident-question ?v - visual-object ?i - ident-name)
  	    (and
		(>= (p-ident ?v ?i) 0.5)
		;;(= (max-ident-gain ?v) ?i)
	    )
  )  

  (:action ask-for-an-objects-color-polar
    :agent (?a - robot)
    :parameters (?v - visual-object ?c - color-name)
    :precondition (and 
    		       (in-domain (color ?v) ?c)
		       (not (= ?c unknown-color))
		       (allow-polar-color-question ?v ?c)
		       (learning-impossible)
		  )
    :effect (and
		(attributed tutor (color ?v) ?c)
		(increase (total-cost) 1)
	    )
  )

  (:action ask-for-an-objects-color-general
    :agent (?a - robot)
    :parameters (?v - visual-object)
    :precondition (and 
    		       (allow-general-color-question ?v)
		       (learning-impossible)
		  )
    :effect (and 
		 (attributed tutor (color ?v) unknown-color)
		 (increase (total-cost) 2)
	    )
  )

  (:action ask-for-an-objects-shape-polar
    :agent (?a - robot)
    :parameters (?v - visual-object ?s - shape-name)
    :precondition (and
			(in-domain (shape ?v) ?s)
			(not (= ?s unknown-shape))
			(allow-polar-shape-question ?v ?s)
			(learning-impossible)
		  )
    :effect (and
		(attributed tutor (shape ?v) ?s)
		(increase (total-cost) 1)
	    )
  )

  (:action ask-for-an-objects-shape-general
    :agent (?a - robot)
    :parameters (?v - visual-object)
    :precondition (and 
    		       (allow-general-shape-question ?v)
		       (learning-impossible)
		  )
    :effect (and
		(attributed tutor (shape ?v) unknown-shape)
		(increase (total-cost) 2)
	    )
  )

  (:action ask-for-an-objects-ident-polar
    :agent (?a - robot)
    :parameters (?v - visual-object ?i - ident-name)
    :precondition (and
			(in-domain (ident ?v) ?i)
			(not (= ?i unknown-ident))
			(allow-polar-ident-question ?v ?i)
			(learning-impossible)
		  )
    :effect (and
		(attributed tutor (ident ?v) ?i)
		(increase (total-cost) 1)
	    )
  )

  (:action ask-for-an-objects-ident-general
    :agent (?a - robot)
    :parameters (?v - visual-object)
    :precondition (and 
    		       (allow-general-ident-question ?v)
		       (learning-impossible)
		  )
    :effect (and
		(attributed tutor (ident ?v) unknown-ident)
		(increase (total-cost) 2)
	    )
  )

  (:action learn-color
    :agent (?a - robot)
    :parameters (?v - visual-object ?c - color-name)
    :precondition 
      (and
	(not (color-learned ?v))
	(attributed tutor (color ?v) ?c)
      )
    :effect (and
		(color-learned ?v)
		(increase (total-cost) 1)
	    )
  )

  (:action learn-shape
    :agent (?a - robot)
    :parameters (?v - visual-object ?s - shape-name)
    :precondition 
      (and
	(not (shape-learned ?v))
	(attributed tutor (shape ?v) ?s)
      )
    :effect (and
		(shape-learned ?v)
		(increase (total-cost) 1)
	    )
  )

  (:action learn-ident
    :agent (?a - robot)
    :parameters (?v - visual-object ?i - ident-name)
    :precondition 
      (and
	(not (ident-learned ?v))
	(attributed tutor (ident ?v) ?i)
      )
    :effect (and
		(ident-learned ?v)
		(increase (total-cost) 1)
	    )
  )
)
