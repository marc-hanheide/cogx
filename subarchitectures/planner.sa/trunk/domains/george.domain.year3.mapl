(define (domain george-yr3)

  (:requirements :mapl :adl :fluents :action-costs :equality)

  (:types
    Robot - agent
    VisualObject ProtoObject ViewCone ConceptName - object
    ColorName ShapeName TypeName - ConceptName
  )

  (:constants
    VISUAL_OBJECT_DUMMY - VisualObject
    UNKNOWN_COLOR - ColorName
    UNKNOWN_SHAPE - ShapeName
    UNKNOWN_TYPE - TypeName
    TUTOR - agent
  )

  (:predicates
    (color-learned ?v - VisualObject)
    (shape-learned ?v - VisualObject)
    (type-learned ?v - VisualObject)

    (color-unlearned ?v - VisualObject)
    (shape-unlearned ?v - VisualObject)
    (type-unlearned ?v - VisualObject)

    (allow-polar-color-question ?v - VisualObject ?c - ColorName ?r - Robot)
    (allow-polar-shape-question ?v - VisualObject ?s - ShapeName ?r - Robot)
    (allow-polar-type-question ?v - VisualObject ?t - TypeName ?r - Robot)

    (allow-autonomous-color-learning ?v - VisualObject ?c - ColorName ?r - Robot)
    (allow-autonomous-shape-learning ?v - VisualObject ?s - ShapeName ?r - Robot)
    (allow-autonomous-type-learning ?v - VisualObject ?t - TypeName ?r - Robot)

    (color-gain-is-max ?v - VisualObject)
    (shape-gain-is-max ?v - VisualObject)
    (type-gain-is-max ?v - VisualObject)

    (learning-impossible)
    (unlearning-impossible)

    (curiosity-satisfied)

    (looked-at ?vc - ViewCone)

    (clarify-object-reference-color ?c - ColorName)
    (clarify-object-reference-shape ?s - ShapeName)
    (clarify-object-reference-type ?t - TypeName)

    (pointed-at ?v - VisualObject)
  )

  (:functions
    (color ?v - VisualObject) - ColorName
    (polar-question-color-threshold ?r - Robot) - number     ;; If max-gain-value-color is higher than this we allow a polar question
    (learn-autonomous-color-threshold ?r - Robot) - number   ;; If max-gain-value-color is higher than this we learn autonomously
    (max-gain-label-color ?v - VisualObject) - ColorName     ;; This is the color with the highest potential gain for some object
    (max-gain-value-color ?v - VisualObject) - number        ;; This is the color-gain of max-gain-label-color

    (shape ?v - VisualObject) - ShapeName
    (polar-question-shape-threshold ?r - Robot) - number
    (learn-autonomous-shape-threshold ?r - Robot) - number
    (max-gain-label-shape ?v - VisualObject) - ShapeName
    (max-gain-value-shape ?v - VisualObject) - number

    (type ?v - VisualObject) - TypeName
    (polar-question-type-threshold ?r - Robot) - number
    (learn-autonomous-type-threshold ?r - Robot) - number
    (max-gain-label-type ?v - VisualObject) - TypeName
    (max-gain-value-type ?v - VisualObject) - number

    (target-object ?vc - ViewCone) - ProtoObject
    (po-is-associated-with ?p - ProtoObject) - VisualObject

    (current-viewcone ?r - Robot) - ViewCone
    (move-to-viewcone-cost ?vc1 - ViewCone ?vc2 - ViewCone) - number
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;                   INIT RULES                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (:init-rule set-move-to-viewcone-cost
    :parameters (?vc1 - ViewCone ?vc2 - ViewCone)
    :precondition 
      (and 
        (= (move-to-viewcone-cost ?vc1 ?vc2) UNKNOWN)
        (not (= (move-to-viewcone-cost ?vc2 ?vc1) UNKNOWN))
      )
    :effect (assign (move-to-viewcone-cost ?vc1 ?vc2) (move-to-viewcone-cost ?vc2 ?vc1))
  )

  (:init-rule set-polar-question-color-threshold
    :parameters (?r - Robot)
    :precondition (= (polar-question-color-threshold ?r) UNKNOWN)
    :effect (assign (polar-question-color-threshold ?r) 0.4)
  )

  (:init-rule set-learn-autonomous-color-threshold
    :parameters (?r - Robot)
    :precondition (= (learn-autonomous-color-threshold ?r) UNKNOWN)
    :effect (assign (learn-autonomous-color-threshold ?r) 0.8)
  )

  (:init-rule set-polar-question-shape-threshold
    :parameters (?r - Robot)
    :precondition (= (polar-question-shape-threshold ?r) UNKNOWN)
    :effect (assign (polar-question-shape-threshold ?r) 0.4)
  )

  (:init-rule set-learn-autonomous-shape-threshold
    :parameters (?r - Robot)
    :precondition (= (learn-autonomous-shape-threshold ?r) UNKNOWN)
    :effect (assign (learn-autonomous-shape-threshold ?r) 0.8)
  )

  (:init-rule set-polar-question-type-threshold
    :parameters (?r - Robot)
    :precondition (= (polar-question-type-threshold ?r) UNKNOWN)
    :effect (assign (polar-question-type-threshold ?r) 0.4)
  )

  (:init-rule set-learn-autonomous-type-threshold
    :parameters (?r - Robot)
    :precondition (= (learn-autonomous-type-threshold ?r) UNKNOWN)
    :effect (assign (learn-autonomous-type-threshold ?r) 0.8)
  )

  (:init-rule set-max-gain-value-color
    :parameters (?v - VisualObject)
    :precondition (= (max-gain-value-color ?v) UNKNOWN)
    :effect (assign (max-gain-value-color ?v) 0)
  )

  (:init-rule set-max-gain-value-shape
    :parameters (?v - VisualObject)
    :precondition (= (max-gain-value-shape ?v) UNKNOWN)
    :effect (assign (max-gain-value-shape ?v) 0)
  )

  (:init-rule set-max-gain-value-type
    :parameters (?v - VisualObject)
    :precondition (= (max-gain-value-type ?v) UNKNOWN)
    :effect (assign (max-gain-value-type ?v) 0)
  )

  (:init-rule set-looked-at-of-initial-viewcone
    :parameters (?r - Robot ?vc - ViewCone)
    :precondition (= (current-viewcone ?r) ?vc)
    :effect (looked-at ?vc)
  )
  

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;                     AXIOMS                    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; to satisfy the curiosity is the "standard" goal, i.e. whenever George wants to learn stuff about objects

  (:derived (curiosity-satisfied)
    (and
      (forall (?p - ProtoObject) (exists (?v - VisualObject) (and (= (po-is-associated-with ?p) ?v) (color-learned ?v) (shape-learned ?v))))
      (unlearning-impossible)
    )
  )

;; unlearning is impossible, if nothing has been neg-attributed by the tutor that hasn't been unlearned already

  (:derived (unlearning-impossible)
    (forall (?v - VisualObject)
      (and
        (or
	  (not (exists (?c - ColorName) (neg-attributed TUTOR (color ?v) ?c)))
          (color-unlearned ?v)
        )
        (or
          (not (exists (?s - ShapeName) (neg-attributed TUTOR (shape ?v) ?s)))
          (shape-unlearned ?v)
        )
        (or
          (forall (?t - TypeName) (not (neg-attributed TUTOR (type ?v) ?t)))
          (type-unlearned ?v)
        )
      )
    )
  )

;; learning is impossible if nothing had been attributed by the TUTOR for all VisualObjects

  (:derived (learning-impossible)
    (forall (?v - VisualObject)
      (and
        (or
	  (forall (?c - ColorName) (not (attributed TUTOR (color ?v) ?c)))
          (color-learned ?v)
        )
        (or
          (forall (?s - ShapeName) (not (attributed TUTOR (shape ?v) ?s)))
          (shape-learned ?v)
        )
        (or
          (forall (?t - TypeName) (not (attributed TUTOR (type ?v) ?t)))
          (type-learned ?v)
        )
      )
    )
  )

;; A polar question is allowed for the color/shape with the max gain only,
;; and only if this gain is higher than some threshold

  (:derived (allow-polar-color-question ?v - VisualObject ?c - ColorName ?r - Robot)
    (and
      (>= (max-gain-value-color ?v) (polar-question-color-threshold ?r))
      (= (max-gain-label-color ?v) ?c)
      (learning-impossible)
      (unlearning-impossible)
    )
  )

  (:derived (allow-polar-shape-question ?v - VisualObject ?s - ShapeName ?r - Robot)
    (and
      (>= (max-gain-value-shape ?v) (polar-question-shape-threshold ?r))
      (= (max-gain-label-shape ?v) ?s)
      (learning-impossible)
      (unlearning-impossible)
    )
  )

  (:derived (allow-polar-type-question ?v - VisualObject ?t - TypeName ?r - Robot)
    (and
      (>= (max-gain-value-type ?v) (polar-question-type-threshold ?r))
      (= (max-gain-label-type ?v) ?t)
    )
  )

  (:derived (allow-autonomous-color-learning ?v - VisualObject ?c - ColorName ?r - Robot)
    (and
      (>= (max-gain-value-color ?v) (learn-autonomous-color-threshold ?r))
      (= (max-gain-label-color ?v) ?c)
      (learning-impossible)
      (unlearning-impossible)
    )
  )

  (:derived (allow-autonomous-shape-learning ?v - VisualObject ?s - ShapeName ?r - Robot)
    (and
      (>= (max-gain-value-shape ?v) (learn-autonomous-shape-threshold ?r))
      (= (max-gain-label-shape ?v) ?s)
      (learning-impossible)
      (unlearning-impossible)
    )
  )

  (:derived (allow-autonomous-type-learning ?v - VisualObject ?t - TypeName ?r - Robot)
    (and
      (>= (max-gain-value-type ?v) (learn-autonomous-shape-threshold ?r))
      (= (max-gain-label-type ?v) ?t)
      (learning-impossible)
      (unlearning-impossible)
    )
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;                     ACTIONS                   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;                MOVE HEAD                ;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (:action move-to-viewcone
    :agent (?r - Robot)
    :parameters (?vc1 - ViewCone ?vc2 - ViewCone)
    :precondition
      (and
        (= (current-viewcone ?r) ?vc1)
        (learning-impossible)
        (unlearning-impossible)
      )
    :effect
      (and
        (assign (current-viewcone ?r) ?vc2)
        (looked-at ?vc2)
        (increase (total-cost) (move-to-viewcone-cost ?vc1 ?vc2))
      )
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;        ANALYZE PROTO OBJECT             ;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (:action analyze-proto-object
    :agent (?r - Robot)
    :parameters (?vc - ViewCone ?p - ProtoObject)
    :precondition
      (and
        (= (current-viewcone ?r) ?vc)
        (= (target-object ?vc) ?p)
        (not (exists (?vo - visualobject) (= (po-is-associated-with ?p) ?vo)))
        (learning-impossible)
        (unlearning-impossible)
      )
    :effect
      (and
        (assign (po-is-associated-with ?p) VISUAL_OBJECT_DUMMY)
        (increase (total-cost) 1)
      )
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;       ASK FOR OBJECT PROPERTIES         ;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (:action ask-for-an-objects-color-general
    :agent (?r - Robot)
    :parameters (?v - VisualObject)
    :precondition
      (and
        (exists (?p - ProtoObject) (= (po-is-associated-with ?p) ?v))
        (learning-impossible)
        (unlearning-impossible)
      )
    :effect 
      (and 
        (attributed TUTOR (color ?v) UNKNOWN_COLOR)
        (increase (total-cost) 2)
      )
  )

  (:action ask-for-an-objects-color-polar
    :agent (?r - Robot)
    :parameters (?v - VisualObject ?c - ColorName)
    :precondition
      (and
        (exists (?p - ProtoObject) (= (po-is-associated-with ?p) ?v))
        (allow-polar-color-question ?v ?c ?r)
      )
    :effect 
      (and 
        (attributed TUTOR (color ?v) ?c)
        (increase (total-cost) 1)
      )
  )

  (:action ask-for-an-objects-shape-general
    :agent (?r - Robot)
    :parameters (?v - VisualObject)
    :precondition
      (and
        (exists (?p - ProtoObject) (= (po-is-associated-with ?p) ?v))
        (learning-impossible)
        (unlearning-impossible)
      )
    :effect 
      (and 
        (attributed TUTOR (shape ?v) UNKNOWN_SHAPE)
        (increase (total-cost) 2)
      )
  )

  (:action ask-for-an-objects-shape-polar
    :agent (?r - Robot)
    :parameters (?v - VisualObject ?s - ShapeName)
    :precondition
      (and
        (exists (?p - ProtoObject) (= (po-is-associated-with ?p) ?v))
        (allow-polar-shape-question ?v ?s ?r)
      )
    :effect 
      (and 
        (attributed TUTOR (shape ?v) ?s)
        (increase (total-cost) 1)
      )
  )

  (:action ask-for-an-objects-type-general
    :agent (?r - Robot)
    :parameters (?v - VisualObject)
    :precondition
      (and
        (exists (?p - ProtoObject) (= (po-is-associated-with ?p) ?v))
        (learning-impossible)
        (unlearning-impossible)
      )
    :effect 
      (and 
        (attributed TUTOR (type ?v) UNKNOWN_TYPE)
        (increase (total-cost) 2)
      )
  )

  (:action ask-for-an-objects-type-polar
    :agent (?r - Robot)
    :parameters (?v - VisualObject ?t - TypeName)
    :precondition
      (and
        (exists (?p - ProtoObject) (= (po-is-associated-with ?p) ?v))
        (allow-polar-type-question ?v ?t ?r)
        (learning-impossible)
        (unlearning-impossible)
      )
    :effect 
      (and 
        (attributed TUTOR (type ?v) ?t)
        (increase (total-cost) 1)
      )
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;                   LEARNING              ;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (:action learn-color
    :agent (?r - Robot)
    :parameters (?v - VisualObject ?c - ColorName)
    :precondition
      (or
        (and
          (unlearning-impossible)
	  (not (color-learned ?v))
          (attributed TUTOR (color ?v) ?c)
          (exists (?p - ProtoObject) 
            (and 
              (= (po-is-associated-with ?p) ?v)
              (= (target-object (current-viewcone ?r)) ?p)
            )
          )
        )
        (and
          (allow-autonomous-color-learning ?v ?c ?r)
          (not (color-learned ?v))
          (exists (?p - ProtoObject) 
            (and 
              (= (po-is-associated-with ?p) ?v)
              (= (target-object (current-viewcone ?r)) ?p)
            )
          )
        )
      )
    :effect 
      (and
	(color-learned ?v)
	(increase (total-cost) 1)
      )
  )

  (:action learn-shape
    :agent (?r - Robot)
    :parameters (?v - VisualObject ?s - ShapeName)
    :precondition
      (or
        (and
          (unlearning-impossible)
	  (not (shape-learned ?v))
          (attributed TUTOR (shape ?v) ?s)
          (exists (?p - ProtoObject) 
            (and 
              (= (po-is-associated-with ?p) ?v)
              (= (target-object (current-viewcone ?r)) ?p)
            )
          )
        )
        (and
          (allow-autonomous-shape-learning ?v ?s ?r)
          (not (shape-learned ?v))
          (exists (?p - ProtoObject) 
            (and 
              (= (po-is-associated-with ?p) ?v)
              (= (target-object (current-viewcone ?r)) ?p)
            )
          )
        )
      )
    :effect 
      (and
	(shape-learned ?v)
	(increase (total-cost) 1)
      )
  )

  (:action learn-type
    :agent (?r - Robot)
    :parameters (?v - VisualObject ?t - TypeName)
    :precondition 
      (or
        (and
          (not (type-learned ?v))
          (attributed TUTOR (type ?v) ?t)
          (exists (?p - ProtoObject) 
            (and 
              (= (po-is-associated-with ?p) ?v)
              (= (target-object (current-viewcone ?r)) ?p)
            )
          )
        )
        (and
          (allow-autonomous-type-learning ?v ?t ?r)
          (not (type-learned ?v))
          (exists (?p - ProtoObject) 
            (and 
              (= (po-is-associated-with ?p) ?v)
              (= (target-object (current-viewcone ?r)) ?p)
            )
          )
        )
      )
    :effect 
      (and
        (type-learned ?v)
        (increase (total-cost) 1)
      )
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;                  UNLEARNING             ;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (:action unlearn-color
    :agent (?r - Robot)
    :parameters (?v - VisualObject ?c - ColorName)
    :precondition
      (and
	(not (color-unlearned ?v))
        (neg-attributed TUTOR (color ?v) ?c)
        (exists (?p - ProtoObject)
          (and 
            (= (po-is-associated-with ?p) ?v)
            (= (target-object (current-viewcone ?r)) ?p)
          )
        )
      )
    :effect 
      (and
	(color-unlearned ?v)
	(increase (total-cost) 1)
      )
  )

  (:action unlearn-shape
    :agent (?r - Robot)
    :parameters (?v - VisualObject ?s - ShapeName)
    :precondition 
      (and
	(not (shape-unlearned ?v))
        (neg-attributed TUTOR (shape ?v) ?s)
        (exists (?p - ProtoObject) 
          (and 
            (= (po-is-associated-with ?p) ?v)
            (= (target-object (current-viewcone ?r)) ?p)
          )
        )
      )
    :effect 
      (and
	(shape-unlearned ?v)
	(increase (total-cost) 1)
      )
  )

  (:action unlearn-type
    :agent (?r - Robot)
    :parameters (?v - VisualObject ?t - TypeName)
    :precondition 
      (and
        (not (type-unlearned ?v))
        (neg-attributed TUTOR (type ?v) ?t)
        (exists (?p - ProtoObject) 
          (and 
            (= (po-is-associated-with ?p) ?v)
            (= (target-object (current-viewcone ?r)) ?p)
          )
        )
      )
    :effect 
      (and
        (type-unlearned ?v)
        (increase (total-cost) 1)
      )
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;          REFERENCE RESOLUTION           ;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (:action point-to-object-color
    :agent (?r - Robot)
    :parameters (?v - VisualObject ?c - ColorName)
    :precondition 
      (and
        (attributed TUTOR (color ?v) ?c)
        (not (pointed-at ?v))
      )
    :effect 
      (and
        (clarify-object-reference-color ?c)
        (pointed-at ?v)
        (increase (total-cost) 1)
      )
  )

  (:action point-to-object-shape
    :agent (?r - Robot)
    :parameters (?v - VisualObject ?s - ShapeName)
    :precondition 
      (and
        (attributed TUTOR (shape ?v) ?s)
        (not (pointed-at ?v))
      )
    :effect 
      (and
        (clarify-object-reference-shape ?s)
        (pointed-at ?v)
        (increase (total-cost) 1)
      )
  )

  (:action point-to-object-type
    :agent (?r - Robot)
    :parameters (?v - VisualObject ?t - TypeName)
    :precondition 
      (and
        (attributed TUTOR (type ?v) ?t)
        (not (pointed-at ?v))
      )
    :effect 
      (and
        (clarify-object-reference-type ?t)
        (pointed-at ?v)
        (increase (total-cost) 1)
      )
  )

)