(define (domain george-yr3)

  (:requirements :mapl :adl :fluents :action-costs :equality)

  (:types
    Robot - agent
    VisualObject ProtoObject ViewCone ConceptName - object
    ColorName ShapeName TypeName - ConceptName
  )

  (:constants
    VISUAL_OBJECT_DUMMY - VisualObject
    UNKNOWN_COLOR - ColorName
    UNKNOWN_SHAPE - ShapeName
    UNKNOWN_TYPE - TypeName
    TUTOR - agent
  )

  (:predicates
    (color-learned ?v - VisualObject)
    (shape-learned ?v - VisualObject)
    (type-learned ?v - VisualObject)

    (learning-impossible)
  )

  (:functions
    (color ?v - VisualObject) - ColorName
    (p-color ?v - VisualObject ?c - ColorName) - number
    (polar-question-color-threshold ?r - Robot) - number

    (shape ?v - VisualObject) - ShapeName
    (p-shape ?v - VisualObject ?s - ShapeName) - number
    (polar-question-shape-threshold ?r - Robot) - number

    (type ?v - VisualObject) - TypeName
    (p-type ?v - VisualObject ?t - TypeName) - number
    (polar-question-type-threshold ?r - Robot) - number

    (target-object ?vc - ViewCone) - ProtoObject
    (po-is-associated-with ?p - ProtoObject) - VisualObject

    (current-viewcone ?r - Robot) - ViewCone
    (move-to-viewcone-cost ?vc1 - ViewCone ?vc2 - ViewCone) - number
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;                   INIT RULES                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (:init-rule set-move-to-viewcone-cost
    :parameters (?vc1 - ViewCone ?vc2 - ViewCone)
    :precondition 
      (and 
        (= (move-to-viewcone-cost ?vc1 ?vc2) UNKNOWN)
        (not (= (move-to-viewcone-cost ?vc2 ?vc1) UNKNOWN))
      )
    :effect (assign (move-to-viewcone-cost ?vc1 ?vc2) (move-to-viewcone-cost ?vc2 ?vc1))
  )

  (:init-rule set-p-color
    :parameters (?v - VisualObject ?c - ColorName)
    :precondition (= (p-color ?v ?c) UNKNOWN)
    :effect (assign (p-color ?v ?c) 0)
  )

  (:init-rule set-p-shape
    :parameters (?v - VisualObject ?s - ShapeName)
    :precondition (= (p-shape ?v ?s) UNKNOWN)
    :effect (assign (p-shape ?v ?s) 0)
  )

  (:init-rule set-p-type
    :parameters (?v - VisualObject ?t - TypeName)
    :precondition (= (p-type ?v ?t) UNKNOWN)
    :effect (assign (p-type ?v ?t) 0)
  )

  (:init-rule set-polar-question-color-threshold
    :parameters (?r - Robot)
    :precondition (= (polar-question-color-threshold ?r) UNKNOWN)
    :effect (assign (polar-question-color-threshold ?r) 0.5)
  )

  (:init-rule set-polar-question-shape-threshold
    :parameters (?r - Robot)
    :precondition (= (polar-question-shape-threshold ?r) UNKNOWN)
    :effect (assign (polar-question-shape-threshold ?r) 0.5)
  )

  (:init-rule set-polar-question-type-threshold
    :parameters (?r - Robot)
    :precondition (= (polar-question-type-threshold ?r) UNKNOWN)
    :effect (assign (polar-question-type-threshold ?r) 0.5)
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;                     AXIOMS                    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (:derived (learning-impossible)
    (forall (?v - VisualObject)
      (and
        (or
	  (forall (?c - ColorName) (not (attributed TUTOR (color ?v) ?c)))
          (color-learned ?v)
        )
        (or
          (forall (?s - ShapeName) (not (attributed TUTOR (shape ?v) ?s)))
          (shape-learned ?v)
        )
        (or
          (forall (?t - TypeName) (not (attributed TUTOR (type ?v) ?t)))
          (type-learned ?v)
        )
      )
    )
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;                     ACTIONS                   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;                MOVE HEAD                ;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (:action move-to-viewcone
    :agent (?r - Robot)
    :parameters (?vc1 - ViewCone ?vc2 - ViewCone)
    :precondition
      (and
        (= (current-viewcone ?r) ?vc1)
        (learning-impossible)
      )
    :effect
      (and
        (assign (current-viewcone ?r) ?vc2)
        (increase (total-cost) (move-to-viewcone-cost ?vc1 ?vc2))
      )
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;                  ANALYZE                ;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (:action analyze-proto-object
    :agent (?r - Robot)
    :parameters (?vc - ViewCone ?po - ProtoObject)
    :precondition
      (and
        (= (current-viewcone ?r) ?vc)
        (= (target-object ?vc) ?po)
        (not (exists (?vo - visualobject) (= (po-is-associated-with ?po) ?vo)))
        (learning-impossible)
      )
    :effect
      (and
        (assign (po-is-associated-with ?po) VISUAL_OBJECT_DUMMY)
        (increase (total-cost) 1)
      )
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;       ASK FOR OBJECT PROPERTIES         ;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (:action ask-for-an-objects-color-general
    :agent (?r - Robot)
    :parameters (?v - VisualObject)
    :precondition
      (and
        (exists (?po - ProtoObject) (= (po-is-associated-with ?po) ?v))
        (learning-impossible)
      )
    :effect 
      (and 
        (attributed TUTOR (color ?v) UNKNOWN_COLOR)
        (increase (total-cost) 2)
      )
  )

  (:action ask-for-an-objects-color-polar
    :agent (?r - Robot)
    :parameters (?v - VisualObject ?c - ColorName)
    :precondition
      (and
        (exists (?po - ProtoObject) (= (po-is-associated-with ?po) ?v))
        (>= (p-color ?v ?c) (polar-question-color-threshold ?r))
        (learning-impossible)
      )
    :effect 
      (and 
        (attributed TUTOR (color ?v) ?c)
        (increase (total-cost) 1)
      )
  )

  (:action ask-for-an-objects-shape-general
    :agent (?r - Robot)
    :parameters (?v - VisualObject)
    :precondition
      (and
        (exists (?po - ProtoObject) (= (po-is-associated-with ?po) ?v))
        (learning-impossible)
      )
    :effect 
      (and 
        (attributed TUTOR (shape ?v) UNKNOWN_SHAPE)
        (increase (total-cost) 2)
      )
  )

  (:action ask-for-an-objects-shape-polar
    :agent (?r - Robot)
    :parameters (?v - VisualObject ?s - ShapeName)
    :precondition
      (and
        (exists (?po - ProtoObject) (= (po-is-associated-with ?po) ?v))
        (>= (p-shape ?v ?s) (polar-question-shape-threshold ?r))
        (learning-impossible)
      )
    :effect 
      (and 
        (attributed TUTOR (shape ?v) ?s)
        (increase (total-cost) 1)
      )
  )

  (:action ask-for-an-objects-type-general
    :agent (?r - Robot)
    :parameters (?v - VisualObject)
    :precondition
      (and
        (exists (?po - ProtoObject) (= (po-is-associated-with ?po) ?v))
        (learning-impossible)
      )
    :effect 
      (and 
        (attributed TUTOR (type ?v) UNKNOWN_TYPE)
        (increase (total-cost) 2)
      )
  )

  (:action ask-for-an-objects-type-polar
    :agent (?r - Robot)
    :parameters (?v - VisualObject ?t - TypeName)
    :precondition
      (and
        (exists (?po - ProtoObject) (= (po-is-associated-with ?po) ?v))
        (>= (p-type ?v ?t) (polar-question-type-threshold ?r))
        (learning-impossible)
      )
    :effect 
      (and 
        (attributed TUTOR (type ?v) ?t)
        (increase (total-cost) 1)
      )
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;                   LEARNING              ;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (:action learn-color
    :agent (?r - Robot)
    :parameters (?v - VisualObject ?c - ColorName)
    :precondition
      (and
	(not (color-learned ?v))
        (attributed TUTOR (color ?v) ?c)
        (exists (?po - ProtoObject) 
          (and 
            (= (po-is-associated-with ?po) ?v)
            (= (target-object (current-viewcone ?r)) ?po)
          )
        )
      )
    :effect 
      (and
	(color-learned ?v)
	(increase (total-cost) 1)
      )
  )

  (:action learn-shape
    :agent (?r - Robot)
    :parameters (?v - VisualObject ?s - ShapeName)
    :precondition 
      (and
	(not (shape-learned ?v))
        (attributed TUTOR (shape ?v) ?s)
        (exists (?po - ProtoObject) 
          (and 
            (= (po-is-associated-with ?po) ?v)
            (= (target-object (current-viewcone ?r)) ?po)
          )
        )
      )
    :effect 
      (and
	(shape-learned ?v)
	(increase (total-cost) 1)
      )
  )

  (:action learn-type
    :agent (?r - Robot)
    :parameters (?v - VisualObject ?t - TypeName)
    :precondition 
      (and
	(not (type-learned ?v))
        (attributed TUTOR (type ?v) ?t)
        (exists (?po - ProtoObject) 
          (and 
            (= (po-is-associated-with ?po) ?v)
            (= (target-object (current-viewcone ?r)) ?po)
          )
        )
      )
    :effect 
      (and
	(type-learned ?v)
	(increase (total-cost) 1)
      )
  )
)
