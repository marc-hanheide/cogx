/* gl.pkg
** Package file to bind OpenGL API to Lua.
** This file was built based on the "gl.h" file
** included in the Mesa distribution.
** It also includes additional functions to manipulate C buffers.
** From gllua by W.Celes.
*/

// This file has been modified by Nick Trout for Doris

$#ifdef WIN32
$#include <windows.h>
$#pragma warning (disable:4244)  /* double to int warning */
$#endif
$#include <GL/gl.h>
$#include "gllbuffer.h"

enum _glenums {
    /* Boolean values */
    GL_FALSE,
    GL_TRUE,
    
    /* Data types */
    GL_BYTE,
    GL_UNSIGNED_BYTE,
    GL_SHORT,
    GL_UNSIGNED_SHORT,
    GL_INT,
    GL_UNSIGNED_INT,
    GL_FLOAT,
    GL_2_BYTES,
    GL_3_BYTES,
    GL_4_BYTES,
    
    /* Primitives */
    GL_LINES,
    GL_POINTS,
    GL_LINE_STRIP,
    GL_LINE_LOOP,
    GL_TRIANGLES,
    GL_TRIANGLE_STRIP,
    GL_TRIANGLE_FAN,
    GL_QUADS,
    GL_QUAD_STRIP,
    GL_POLYGON,
    GL_EDGE_FLAG,
    
    /* Matrix Mode */
    GL_MATRIX_MODE,
    GL_MODELVIEW,
    GL_PROJECTION,
    GL_TEXTURE,
    
    /* Points */
    GL_POINT_SMOOTH,
    GL_POINT_SIZE,
    GL_POINT_SIZE_GRANULARITY,
    GL_POINT_SIZE_RANGE,
    
    /* Lines */
    GL_LINE_SMOOTH,
    GL_LINE_STIPPLE,
    GL_LINE_STIPPLE_PATTERN,
    GL_LINE_STIPPLE_REPEAT,
    GL_LINE_WIDTH,
    GL_LINE_WIDTH_GRANULARITY,
    GL_LINE_WIDTH_RANGE,
    
    /* Polygons */
    GL_POINT,
    GL_LINE,
    GL_FILL,
    GL_CCW,
    GL_CW,
    GL_FRONT,
    GL_BACK,
    GL_CULL_FACE,
    GL_CULL_FACE_MODE,
    GL_POLYGON_SMOOTH,
    GL_POLYGON_STIPPLE,
    GL_FRONT_FACE,
    GL_POLYGON_MODE,
    
    /* Display Lists */
    GL_COMPILE,
    GL_COMPILE_AND_EXECUTE,
    GL_LIST_BASE,
    GL_LIST_INDEX,
    GL_LIST_MODE,
    
    /* Depth buffer */
    GL_NEVER,
    GL_LESS,
    GL_GEQUAL,
    GL_LEQUAL,
    GL_GREATER,
    GL_NOTEQUAL,
    GL_EQUAL,
    GL_ALWAYS,
    GL_DEPTH_TEST,
    GL_DEPTH_BITS,
    GL_DEPTH_CLEAR_VALUE,
    GL_DEPTH_FUNC,
    GL_DEPTH_RANGE,
    GL_DEPTH_WRITEMASK,
    GL_DEPTH_COMPONENT,
    
    /* Lighting */
    GL_LIGHTING,
    GL_LIGHT0,
    GL_LIGHT1,
    GL_LIGHT2,
    GL_LIGHT3,
    GL_LIGHT4,
    GL_LIGHT5,
    GL_LIGHT6,
    GL_LIGHT7,
    GL_SPOT_EXPONENT,
    GL_SPOT_CUTOFF,
    GL_CONSTANT_ATTENUATION,
    GL_LINEAR_ATTENUATION,
    GL_QUADRATIC_ATTENUATION,
    GL_AMBIENT,
    GL_DIFFUSE,
    GL_SPECULAR,
    GL_SHININESS,
    GL_EMISSION,
    GL_POSITION,
    GL_SPOT_DIRECTION,
    GL_AMBIENT_AND_DIFFUSE,
    GL_COLOR_INDEXES,
    GL_LIGHT_MODEL_TWO_SIDE,
    GL_LIGHT_MODEL_LOCAL_VIEWER,
    GL_LIGHT_MODEL_AMBIENT,
    GL_FRONT_AND_BACK,
    GL_SHADE_MODEL,
    GL_FLAT,
    GL_SMOOTH,
    GL_COLOR_MATERIAL,
    GL_COLOR_MATERIAL_FACE,
    GL_COLOR_MATERIAL_PARAMETER,
    GL_NORMALIZE,
    
    /* User clipping planes */
    GL_CLIP_PLANE0,
    GL_CLIP_PLANE1,
    GL_CLIP_PLANE2,
    GL_CLIP_PLANE3,
    GL_CLIP_PLANE4,
    GL_CLIP_PLANE5,
    
    /* Accumulation buffer */
    GL_ACCUM_RED_BITS,
    GL_ACCUM_GREEN_BITS,
    GL_ACCUM_BLUE_BITS,
    GL_ACCUM_ALPHA_BITS,
    GL_ACCUM_CLEAR_VALUE,
    GL_ACCUM,
    GL_ADD,
    GL_LOAD,
    GL_MULT,
    GL_RETURN,
    
    /* Alpha testing */
    GL_ALPHA_TEST,
    GL_ALPHA_TEST_REF,
    GL_ALPHA_TEST_FUNC,
    
    /* Blending */
    GL_BLEND,
    GL_BLEND_SRC,
    GL_BLEND_DST,
    GL_ZERO,
    GL_ONE,
    GL_SRC_COLOR,
    GL_ONE_MINUS_SRC_COLOR,
    GL_DST_COLOR,
    GL_ONE_MINUS_DST_COLOR,
    GL_SRC_ALPHA,
    GL_ONE_MINUS_SRC_ALPHA,
    GL_DST_ALPHA,
    GL_ONE_MINUS_DST_ALPHA,
    GL_SRC_ALPHA_SATURATE,
    
    /* Render Mode */
    GL_FEEDBACK,
    GL_RENDER,
    GL_SELECT,
    
    /* Feedback */
    GL_2D,
    GL_3D,
    GL_3D_COLOR,
    GL_3D_COLOR_TEXTURE,
    GL_4D_COLOR_TEXTURE,
    GL_POINT_TOKEN,
    GL_LINE_TOKEN,
    GL_LINE_RESET_TOKEN,
    GL_POLYGON_TOKEN,
    GL_BITMAP_TOKEN,
    GL_DRAW_PIXEL_TOKEN,
    GL_COPY_PIXEL_TOKEN,
    GL_PASS_THROUGH_TOKEN,
    
    /* Fog */
    GL_FOG,
    GL_FOG_MODE,
    GL_FOG_DENSITY,
    GL_FOG_COLOR,
    GL_FOG_INDEX,
    GL_FOG_START,
    GL_FOG_END,
    GL_LINEAR,
    GL_EXP,
    GL_EXP2,
    
    /* Logic Ops */
    GL_LOGIC_OP,
    GL_LOGIC_OP_MODE,
    GL_CLEAR,
    GL_SET,
    GL_COPY,
    GL_COPY_INVERTED,
    GL_NOOP,
    GL_INVERT,
    GL_AND,
    GL_NAND,
    GL_OR,
    GL_NOR,
    GL_XOR,
    GL_EQUIV,
    GL_AND_REVERSE,
    GL_AND_INVERTED,
    GL_OR_REVERSE,
    GL_OR_INVERTED,
    
    /* Stencil */
    GL_STENCIL_TEST,
    GL_STENCIL_WRITEMASK,
    GL_STENCIL_BITS,
    GL_STENCIL_FUNC,
    GL_STENCIL_VALUE_MASK,
    GL_STENCIL_REF,
    GL_STENCIL_FAIL,
    GL_STENCIL_PASS_DEPTH_PASS,
    GL_STENCIL_PASS_DEPTH_FAIL,
    GL_STENCIL_CLEAR_VALUE,
    GL_STENCIL_INDEX,
    GL_KEEP,
    GL_REPLACE,
    GL_INCR,
    GL_DECR,
    
    /* Buffers, Pixel Drawing/Reading */
    GL_NONE,
    GL_LEFT,
    GL_RIGHT,
    GL_FRONT,
    GL_BACK,
    GL_FRONT_AND_BACK,
    GL_FRONT_LEFT,
    GL_FRONT_RIGHT,
    GL_BACK_LEFT,
    GL_BACK_RIGHT,
    GL_AUX0,
    GL_AUX1,
    GL_AUX2,
    GL_AUX3,
    GL_COLOR_INDEX,
    GL_RED,
    GL_GREEN,
    GL_BLUE,
    GL_ALPHA,
    GL_LUMINANCE,
    GL_LUMINANCE_ALPHA,
    GL_ALPHA_BITS,
    GL_RED_BITS,
    GL_GREEN_BITS,
    GL_BLUE_BITS,
    GL_INDEX_BITS,
    GL_SUBPIXEL_BITS,
    GL_AUX_BUFFERS,
    GL_READ_BUFFER,
    GL_DRAW_BUFFER,
    GL_DOUBLEBUFFER,
    GL_STEREO,
    GL_BITMAP,
    GL_COLOR,
    GL_DEPTH,
    GL_STENCIL,
    GL_DITHER,
    GL_RGB,
    GL_RGBA,
    
    /* Implementation limits */
    GL_MAX_LIST_NESTING,
    GL_MAX_ATTRIB_STACK_DEPTH,
    GL_MAX_MODELVIEW_STACK_DEPTH,
    GL_MAX_NAME_STACK_DEPTH,
    GL_MAX_PROJECTION_STACK_DEPTH,
    GL_MAX_TEXTURE_STACK_DEPTH,
    GL_MAX_EVAL_ORDER,
    GL_MAX_LIGHTS,
    GL_MAX_CLIP_PLANES,
    GL_MAX_TEXTURE_SIZE,
    GL_MAX_PIXEL_MAP_TABLE,
    GL_MAX_VIEWPORT_DIMS,
    
    /* Gets */
    GL_ATTRIB_STACK_DEPTH,
    GL_COLOR_CLEAR_VALUE,
    GL_COLOR_WRITEMASK,
    GL_CURRENT_INDEX,
    GL_CURRENT_COLOR,
    GL_CURRENT_NORMAL,
    GL_CURRENT_RASTER_COLOR,
    GL_CURRENT_RASTER_DISTANCE,
    GL_CURRENT_RASTER_INDEX,
    GL_CURRENT_RASTER_POSITION,
    GL_CURRENT_RASTER_TEXTURE_COORDS,
    GL_CURRENT_RASTER_POSITION_VALID,
    GL_CURRENT_TEXTURE_COORDS,
    GL_INDEX_CLEAR_VALUE,
    GL_INDEX_MODE,
    GL_INDEX_WRITEMASK,
    GL_MODELVIEW_MATRIX,
    GL_MODELVIEW_STACK_DEPTH,
    GL_NAME_STACK_DEPTH,
    GL_PROJECTION_MATRIX,
    GL_PROJECTION_STACK_DEPTH,
    GL_RENDER_MODE,
    GL_RGBA_MODE,
    GL_TEXTURE_MATRIX,
    GL_TEXTURE_STACK_DEPTH,
    GL_VIEWPORT,
    
    
    /* Evaluators */
    GL_AUTO_NORMAL,
    GL_MAP1_COLOR_4,
    GL_MAP1_GRID_DOMAIN,
    GL_MAP1_GRID_SEGMENTS,
    GL_MAP1_INDEX,
    GL_MAP1_NORMAL,
    GL_MAP1_TEXTURE_COORD_1,
    GL_MAP1_TEXTURE_COORD_2,
    GL_MAP1_TEXTURE_COORD_3,
    GL_MAP1_TEXTURE_COORD_4,
    GL_MAP1_VERTEX_3,
    GL_MAP1_VERTEX_4,
    GL_MAP2_COLOR_4,
    GL_MAP2_GRID_DOMAIN,
    GL_MAP2_GRID_SEGMENTS,
    GL_MAP2_INDEX,
    GL_MAP2_NORMAL,
    GL_MAP2_TEXTURE_COORD_1,
    GL_MAP2_TEXTURE_COORD_2,
    GL_MAP2_TEXTURE_COORD_3,
    GL_MAP2_TEXTURE_COORD_4,
    GL_MAP2_VERTEX_3,
    GL_MAP2_VERTEX_4,
    GL_COEFF,
    GL_DOMAIN,
    GL_ORDER,
    
    /* Hints */
    GL_FOG_HINT,
    GL_LINE_SMOOTH_HINT,
    GL_PERSPECTIVE_CORRECTION_HINT,
    GL_POINT_SMOOTH_HINT,
    GL_POLYGON_SMOOTH_HINT,
    GL_DONT_CARE,
    GL_FASTEST,
    GL_NICEST,
    
    /* Scissor box */
    GL_SCISSOR_TEST,
    GL_SCISSOR_BOX,
    
    /* Pixel Mode / Transfer */
    GL_MAP_COLOR,
    GL_MAP_STENCIL,
    GL_INDEX_SHIFT,
    GL_INDEX_OFFSET,
    GL_RED_SCALE,
    GL_RED_BIAS,
    GL_GREEN_SCALE,
    GL_GREEN_BIAS,
    GL_BLUE_SCALE,
    GL_BLUE_BIAS,
    GL_ALPHA_SCALE,
    GL_ALPHA_BIAS,
    GL_DEPTH_SCALE,
    GL_DEPTH_BIAS,
    GL_PIXEL_MAP_S_TO_S_SIZE,
    GL_PIXEL_MAP_I_TO_I_SIZE,
    GL_PIXEL_MAP_I_TO_R_SIZE,
    GL_PIXEL_MAP_I_TO_G_SIZE,
    GL_PIXEL_MAP_I_TO_B_SIZE,
    GL_PIXEL_MAP_I_TO_A_SIZE,
    GL_PIXEL_MAP_R_TO_R_SIZE,
    GL_PIXEL_MAP_G_TO_G_SIZE,
    GL_PIXEL_MAP_B_TO_B_SIZE,
    GL_PIXEL_MAP_A_TO_A_SIZE,
    GL_PIXEL_MAP_S_TO_S,
    GL_PIXEL_MAP_I_TO_I,
    GL_PIXEL_MAP_I_TO_R,
    GL_PIXEL_MAP_I_TO_G,
    GL_PIXEL_MAP_I_TO_B,
    GL_PIXEL_MAP_I_TO_A,
    GL_PIXEL_MAP_R_TO_R,
    GL_PIXEL_MAP_G_TO_G,
    GL_PIXEL_MAP_B_TO_B,
    GL_PIXEL_MAP_A_TO_A,
    GL_PACK_ALIGNMENT,
    GL_PACK_LSB_FIRST,
    GL_PACK_ROW_LENGTH,
    GL_PACK_SKIP_PIXELS,
    GL_PACK_SKIP_ROWS,
    GL_PACK_SWAP_BYTES,
    GL_UNPACK_ALIGNMENT,
    GL_UNPACK_LSB_FIRST,
    GL_UNPACK_ROW_LENGTH,
    GL_UNPACK_SKIP_PIXELS,
    GL_UNPACK_SKIP_ROWS,
    GL_UNPACK_SWAP_BYTES,
    GL_ZOOM_X,
    GL_ZOOM_Y,
    
    /* Texture mapping */
    GL_TEXTURE_ENV,
    GL_TEXTURE_ENV_MODE,
    GL_TEXTURE_1D,
    GL_TEXTURE_2D,
    GL_TEXTURE_WRAP_S,
    GL_TEXTURE_WRAP_T,
    GL_TEXTURE_MAG_FILTER,
    GL_TEXTURE_MIN_FILTER,
    GL_TEXTURE_ENV_COLOR,
    GL_TEXTURE_GEN_S,
    GL_TEXTURE_GEN_T,
    GL_TEXTURE_GEN_MODE,
    GL_TEXTURE_BORDER_COLOR,
    GL_TEXTURE_WIDTH,
    GL_TEXTURE_HEIGHT,
    GL_TEXTURE_BORDER,
    GL_TEXTURE_COMPONENTS,
    GL_NEAREST_MIPMAP_NEAREST,
    GL_NEAREST_MIPMAP_LINEAR,
    GL_LINEAR_MIPMAP_NEAREST,
    GL_LINEAR_MIPMAP_LINEAR,
    GL_OBJECT_LINEAR,
    GL_OBJECT_PLANE,
    GL_EYE_LINEAR,
    GL_EYE_PLANE,
    GL_SPHERE_MAP,
    GL_DECAL,
    GL_MODULATE,
    GL_NEAREST,
    GL_REPEAT,
    GL_CLAMP,
    GL_S,
    GL_T,
    GL_R,
    GL_Q,
    GL_TEXTURE_GEN_R,
    GL_TEXTURE_GEN_Q,
    
    /* Utility */
    GL_VENDOR,
    GL_RENDERER,
    GL_VERSION,
    GL_EXTENSIONS,
    
    /* Errors */
    GL_INVALID_VALUE,
    GL_INVALID_ENUM,
    GL_INVALID_OPERATION,
    GL_STACK_OVERFLOW,
    GL_STACK_UNDERFLOW,
    GL_OUT_OF_MEMORY
        
};


/* GL_NO_ERROR must be zero */
#define GL_NO_ERROR



enum _glbits {
    GL_CURRENT_BIT,
    GL_POINT_BIT,
    GL_LINE_BIT,
    GL_POLYGON_BIT,
    GL_POLYGON_STIPPLE_BIT,
    GL_PIXEL_MODE_BIT,
    GL_LIGHTING_BIT,
    GL_FOG_BIT,
    GL_DEPTH_BUFFER_BIT,
    GL_ACCUM_BUFFER_BIT,
    GL_STENCIL_BUFFER_BIT,
    GL_VIEWPORT_BIT,
    GL_TRANSFORM_BIT,
    GL_ENABLE_BIT,
    GL_COLOR_BUFFER_BIT,
    GL_HINT_BIT,
    GL_EVAL_BIT,
    GL_LIST_BIT,
    GL_TEXTURE_BIT,
    GL_SCISSOR_BIT,
    GL_ALL_ATTRIB_BITS
};


// Treat these as numbers --NDT 24-Aug-03
// typedef unsigned int GLbitfield;


/*
*
* Data types (may be architecture dependent in some cases)
*
*/

/*  C type		GL type		storage                            */
/*-------------------------------------------------------------------------*/
typedef unsigned char	GLboolean;
typedef signed char		GLbyte;		/* 1-byte signed */
typedef short			GLshort;	/* 2-byte signed */
typedef int				GLint;		/* 4-byte signed */
typedef unsigned char	GLubyte;	/* 1-byte unsigned */
typedef unsigned short	GLushort;	/* 2-byte unsigned */
typedef unsigned int	GLuint;		/* 4-byte unsigned */
typedef int			GLsizei;	/* 4-byte signed */
typedef float		GLfloat;	/* single precision float */
typedef float		GLclampf;	/* single precision float in [0,1] */
typedef double		GLdouble;	/* double precision float */
typedef double		GLclampd;	/* double precision float in [0,1] */

/***
* tolua: GLenum type definition included
*/
typedef GLdouble GLenum; //typedef int GLenum;


                                /*
                                * Miscellaneous
*/

void glClearIndex( GLfloat c );
void glClearColor( GLclampf red,
                  GLclampf green,
                  GLclampf blue,
                  GLclampf alpha );
void glClear( GLdouble mask ); //void glClear( GLbitfield mask );
void glIndexMask( GLuint mask );
void glColorMask( GLboolean red, GLboolean green,
                 GLboolean blue, GLboolean alpha );
void glAlphaFunc( GLenum func, GLclampf ref );
void glBlendFunc( GLenum sfactor, GLenum dfactor );
void glLogicOp( GLenum opcode );
void glCullFace( GLenum mode );
void glFrontFace( GLenum mode );
void glPointSize( GLfloat size );
void glLineWidth( GLfloat width );
void glLineStipple( GLint factor, GLushort pattern );
void glPolygonMode( GLenum face, GLenum mode );
void glPolygonStipple( unsigned char *mask );
void glGetPolygonStipple( unsigned char *mask );
void glEdgeFlag( GLboolean flag );
// void glEdgeFlagv @ glEdgeFlag( unsigned char flag[1] );
void glScissor( GLint x, GLint y, GLsizei width, GLsizei height);
void glClipPlane( GLenum plane, GLdouble equation[4] );
void glGetClipPlane( GLenum plane, GLdouble equation[4]=0 );
void glDrawBuffer( GLenum mode );
void glReadBuffer( GLenum mode );
void glEnable( GLenum cap );
void glDisable( GLenum cap );
GLboolean glIsEnabled( GLenum cap );

/* Get function
* To get a single value, use the first one;
* to get more than a single value, use the second.
*/
void glGetDoublev @ glGet( GLenum pname, GLdouble *params=0 );
void glGetDoublev @ glGet( GLenum pname, GLdouble params[16]=0 );

void glPushAttrib( GLbitfield mask );
void glPopAttrib( void );
GLint glRenderMode( GLenum mode );
GLenum glGetError( void );
const unsigned char *glGetString( GLenum name );
void glFinish( void );
void glFlush( void );
void glHint( GLenum target, GLenum mode );

/*
* Depth Buffer
*/
void glClearDepth( GLclampd depth );
void glDepthFunc( GLenum func );
void glDepthMask( GLboolean flag );
void glDepthRange( GLclampd near_val, GLclampd far_val );

/*
* Accumulation Buffer
*/

void glClearAccum( GLfloat red, GLfloat green,
                  GLfloat blue, GLfloat alpha );
void glAccum( GLenum op, GLfloat value );


/*
* Transformation
*/

void glMatrixMode( GLenum mode );
void glOrtho( GLdouble left, GLdouble right,
             GLdouble bottom, GLdouble top,
             GLdouble near_val, GLdouble far_val );
void glFrustum( GLdouble left, GLdouble right,
               GLdouble bottom, GLdouble top,
               GLdouble near_val, GLdouble far_val );
void glViewport( GLint x, GLint y, GLsizei width, GLsizei height );
void glPushMatrix( void );
void glPopMatrix( void );
void glLoadIdentity( void );

void glLoadMatrixd @ glLoadMatrix( GLdouble m[16] );
void glMultMatrixd @ glMultMatrix( GLdouble m[16] );
// void doris_glLoadMatrixf @ glLoadMatrix( Matrix& m );
// void doris_glMultMatrixf @ glMultMatrix( Matrix& m );

void glRotated @ glRotate( GLdouble angle, GLdouble x, GLdouble y, GLdouble z );
void glScaled @ glScale( GLdouble x, GLdouble y, GLdouble z=1.0 );
void glTranslated @ glTranslate( GLdouble x, GLdouble y, GLdouble z=0.0 );


/*
* Display Lists
*/

GLboolean glIsList( GLuint list );
void glDeleteLists( GLuint list, GLsizei range );
GLuint glGenLists( GLsizei range );
void glNewList( GLuint list, GLenum mode );
void glEndList( void );
void glCallList( GLuint list );

// void glCallLists( GLsizei n, GLenum type, GLLbuffer *lists );   --- GLLbuffer???? Nick
void glListBase( GLuint base );

/*
* Drawing Functions
*/

void glBegin( GLenum mode );
void glEnd( void );

void glVertex3dv @ glVertex( GLdouble v[3]=0 );
void glVertex4dv @ glVertex( GLdouble v[4] );
void glVertex4d @ glVertex( GLdouble x, GLdouble y, GLdouble z=0, GLdouble w=1 );

void glNormal3dv @ glNormal( GLdouble v[3]=0 );
void glNormal3d @ glNormal( GLdouble nx, GLdouble ny, GLdouble nz=0 );

void glIndexdv @ glIndex( GLdouble c[1] );
void glIndexd @ glIndex( GLdouble c );

void glColor4dv @ glColor( GLdouble v[4]=1.0 );
void glColor4d @ glColor( GLdouble red, GLdouble green,
                         GLdouble blue, GLdouble alpha=1.0 );

void glTexCoord3dv @ glTexCoord( GLdouble v[3]=0.0 );
void glTexCoord4dv @ glTexCoord( GLdouble v[4] );
void glTexCoord4d @ glTexCoord( GLdouble s, GLdouble t=0.0, GLdouble r=0.0, GLdouble q=1.0 );


void glRasterPos3dv @ glRasterPos( GLdouble v[3]=0.0 );
void glRasterPos4dv @ glRasterPos( GLdouble v[4] );
void glRasterPos4d @ glRasterPos( GLdouble x, GLdouble y, GLdouble z=0.0, GLdouble w=1.0 );


void glRectdv @ glRect( GLdouble v1[2], GLdouble v2[2] );
void glRectd @ glRect( GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2 );


/*
* Lighting
*/

void glShadeModel( GLenum mode );

void glLightfv @ glLight( GLenum light, GLenum pname, GLfloat params[4]=0.0 );
void glLightf @ glLight( GLenum light, GLenum pname, GLfloat param );

void glGetLightfv @ glGetLight( GLenum light, GLenum pname, GLfloat params[4]=0.0 );
void glGetLightfv @ glGetLight( GLenum light, GLenum pname, GLfloat *params=0.0 );

void glLightModelfv @ glLightModel( GLenum pname, GLfloat params[4]=0.0 );
void glLightModelf @ glLightModel( GLenum pname, GLfloat param );

void glMaterialfv @ glMaterial( GLenum face, GLenum pname, GLfloat params[4]=0.0);
void glMaterialf @ glMaterial( GLenum face, GLenum pname, GLfloat param );

void glGetMaterialfv @ glGetMaterial( GLenum face, GLenum pname, GLfloat *params=0.0 );
void glGetMaterialfv @ glGetMaterial( GLenum face, GLenum pname, GLfloat params[4]=0.0);

void glColorMaterial( GLenum face, GLenum mode );


/*
* Raster functions
*/

void glPixelZoom( GLfloat xfactor, GLfloat yfactor );
void glPixelStoref @ glPixelStore( GLenum pname, GLfloat param );
void glPixelTransferf @ glPixelTransfer( GLenum pname, GLfloat param );


void glPixelMapfv @ glPixelMap( GLenum map, GLint mapsize, GLfloat values[mapsize] );

/**** Not bound
void glGetPixelMapfv( GLenum map, GLfloat *values );
void glGetPixelMapuiv( GLenum map, GLuint *values );
void glGetPixelMapusv( GLenum map, GLushort *values );
***/

void glBitmap( GLsizei width, GLsizei height,
              GLfloat xorig, GLfloat yorig,
              GLfloat xmove, GLfloat ymove,
              unsigned char *bitmap );
void glReadPixels( GLint x, GLint y, GLsizei width, GLsizei height,
                  GLenum format, GLenum type, GLLbuffer *pixels );
void glDrawPixels( GLsizei width, GLsizei height,
                  GLenum format, GLenum type, GLLbuffer *pixels );
void glCopyPixels( GLint x, GLint y, GLsizei width, GLsizei height,
                  GLenum type );


                  /*
                  * Stenciling
*/

void glStencilFunc( GLenum func, GLint ref, GLuint mask );
void glStencilMask( GLuint mask );
void glStencilOp( GLenum fail, GLenum zfail, GLenum zpass );
void glClearStencil( GLint s );

/*
* Texture mapping
*/

void glTexGendv @ glTexGen( GLenum coord, GLenum pname, GLdouble params[4]=0 );
void glTexGend @ glTexGen( GLenum coord, GLenum pname, GLdouble param );

void glGetTexGendv @ glGetTexGen( GLenum coord, GLenum pname, GLdouble params[4]=0 );

void glTexEnvf @ glTexEnv( GLenum target, GLenum pname, GLfloat param );
void glTexEnvfv( GLenum target, GLenum pname, GLfloat params[4] );

void glGetTexEnvfv @ glGetTexEnv( GLenum target, GLenum pname, GLfloat params[4] );


void glTexParameterfv @ glTexParameter( GLenum target, GLenum pname, GLfloat params[4]=0.0 );
void glTexParameterf @ glTexParameter( GLenum target, GLenum pname, GLfloat param );
void glGetTexParameterfv @ glGetTexParameter( GLenum target, GLenum pname, GLfloat params[4]=0.0);
void glGetTexLevelParameterfv @ glGetTexLevelParameter( GLenum target, GLint level, GLenum pname, GLfloat params[4]=0.0 );

void glTexImage1D( GLenum target, GLint level, GLint components,
        GLsizei width, GLint border,
        GLenum format, GLenum type, GLLbuffer *pixels );

void glTexImage2D( GLenum target, GLint level, GLint components,
        GLsizei width, GLsizei height, GLint border,
        GLenum format, GLenum type, GLLbuffer *pixels );
  
void glGetTexImage( GLenum target, GLint level, GLenum format,
        GLenum type, GLLbuffer *pixels );


/*
* Evaluators
*/

void glMap1d @ glMap1 ( GLenum target, GLdouble u1, GLdouble u2, GLint stride,
                       GLint order, GLdouble points[order] );
void glMap2d @ glMap2 ( GLenum target,
                       GLdouble u1, GLdouble u2, GLint ustride, GLint uorder,
                       GLdouble v1, GLdouble v2, GLint vstride, GLint vorder,
                       GLdouble points[uorder*vorder] );

                       /*** Not bound
                       void glGetMapdv( GLenum target, GLenum query, GLdouble *v );
                       void glGetMapfv( GLenum target, GLenum query, GLfloat *v );
                       void glGetMapiv( GLenum target, GLenum query, GLint *v );
***/

void glEvalCoord1dv @ glEvalCoord( GLdouble u[1] );
void glEvalCoord2dv @ glEvalCoord( GLdouble u[2] );
void glEvalCoord1d @ glEvalCoord( GLdouble u );
void glEvalCoord2d @ glEvalCoord( GLdouble u, GLdouble v );

void glMapGrid1d @ glMapGrid( GLint un, GLdouble u1, GLdouble u2 );
void glMapGrid2d @ glMapGrid( GLint un, GLdouble u1, GLdouble u2,
                             GLint vn, GLdouble v1, GLdouble v2 );

void glEvalPoint1 @ glEvalPoint( GLint i );
void glEvalPoint2 @ glEvalPoint( GLint i, GLint j );
void glEvalMesh1 @ glEvalMesh( GLenum mode, GLint i1, GLint i2 );
void glEvalMesh2 @ glEvalMesh( GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2 );


/*
* Fog
*/

void glFogfv @ glFog( GLenum pname, GLfloat params[4] );
void glFogf @ glFog( GLenum pname, GLfloat param );


/*
* Selection and Feedback
*/

// void glFeedbackBuffer( GLsizei size, GLenum type, GLLbuffer* buffer ); -- Nick
void glPassThrough( GLfloat token );
// void glSelectBuffer( GLsizei size, GLLbuffer* buffer ); -- Nick
void glInitNames( void );
void glLoadName( GLuint name );
void glPushName( GLuint name );
void glPopName( void );

/*
* OpenGL 1.1 API
*/

$$#ifdef GL_VERSION_1_1

#define GL_VERSION_1_1

enum _glenumtypes {
    GL_DOUBLE,
        
    GL_VERTEX_ARRAY,
    GL_NORMAL_ARRAY,
    GL_COLOR_ARRAY,
    GL_INDEX_ARRAY,
    GL_TEXTURE_COORD_ARRAY,
    GL_EDGE_FLAG_ARRAY,
    GL_VERTEX_ARRAY_SIZE,
    GL_VERTEX_ARRAY_TYPE,
    GL_VERTEX_ARRAY_STRIDE,
    GL_NORMAL_ARRAY_TYPE,
    GL_NORMAL_ARRAY_STRIDE,
    GL_COLOR_ARRAY_SIZE,
    GL_COLOR_ARRAY_TYPE,
    GL_COLOR_ARRAY_STRIDE,
    GL_INDEX_ARRAY_TYPE,
    GL_INDEX_ARRAY_STRIDE,
    GL_TEXTURE_COORD_ARRAY_SIZE,
    GL_TEXTURE_COORD_ARRAY_TYPE,
    GL_TEXTURE_COORD_ARRAY_STRIDE,
    GL_EDGE_FLAG_ARRAY_STRIDE,
    GL_VERTEX_ARRAY_POINTER,
    GL_NORMAL_ARRAY_POINTER,
    GL_COLOR_ARRAY_POINTER,
    GL_INDEX_ARRAY_POINTER,
    GL_TEXTURE_COORD_ARRAY_POINTER,
    GL_EDGE_FLAG_ARRAY_POINTER,
    GL_V2F,
    GL_V3F,
    GL_C4UB_V2F,
    GL_C4UB_V3F,
    GL_C3F_V3F,
    GL_N3F_V3F,
    GL_C4F_N3F_V3F,
    GL_T2F_V3F,
    GL_T4F_V4F,
    GL_T2F_C4UB_V3F,
    GL_T2F_C3F_V3F,
    GL_T2F_N3F_V3F,
    GL_T2F_C4F_N3F_V3F,
    GL_T4F_C4F_N3F_V4F,
    
    GL_POLYGON_OFFSET_FACTOR,
    GL_POLYGON_OFFSET_UNITS,
    GL_POLYGON_OFFSET_POINT,
    GL_POLYGON_OFFSET_LINE,
    GL_POLYGON_OFFSET_FILL,
    
    /*** Not bound (Windows does not define them)
    GL_CONSTANT_COLOR,
    GL_ONE_MINUS_CONSTANT_COLOR,
    GL_CONSTANT_ALPHA,
    GL_ONE_MINUS_CONSTANT_ALPHA,
    ***/
    
    GL_FEEDBACK_BUFFER_POINTER,
    GL_FEEDBACK_BUFFER_SIZE,
    GL_FEEDBACK_BUFFER_TYPE,
    
    GL_INDEX_LOGIC_OP,
    GL_COLOR_LOGIC_OP,
    
    GL_MAX_CLIENT_ATTRIB_STACK_DEPTH,
    
    GL_CLIENT_ATTRIB_STACK_DEPTH,
    
    GL_TEXTURE_RED_SIZE,
    GL_TEXTURE_GREEN_SIZE,
    GL_TEXTURE_BLUE_SIZE,
    GL_TEXTURE_ALPHA_SIZE,
    GL_TEXTURE_LUMINANCE_SIZE,
    GL_TEXTURE_INTENSITY_SIZE,
    
    GL_PROXY_TEXTURE_1D,
    GL_PROXY_TEXTURE_2D,
    GL_TEXTURE_PRIORITY,
    GL_TEXTURE_RESIDENT,
    GL_TEXTURE_BINDING_1D,
    GL_TEXTURE_BINDING_2D,
    
    GL_CLIENT_PIXEL_STORE_BIT,
    GL_CLIENT_VERTEX_ARRAY_BIT,
    GL_CLIENT_ALL_ATTRIB_BITS
};

void glPolygonOffset( GLfloat factor, GLfloat units );

void glEnableClientState( GLenum cap );
void glDisableClientState( GLenum cap );

void glPushClientAttrib( GLbitfield mask );
void glPopClientAttrib( void );

void glVertexPointer( GLint size, GLenum type, GLsizei stride, GLLbuffer *ptr );
void glNormalPointer( GLenum type, GLsizei stride, GLLbuffer *ptr );
void glColorPointer( GLint size, GLenum type, GLsizei stride, GLLbuffer *ptr );
void glIndexPointer( GLenum type, GLsizei stride, GLLbuffer *ptr );
void glTexCoordPointer( GLint size, GLenum type, GLsizei stride, GLLbuffer *ptr );
void glEdgeFlagPointer( GLsizei stride, GLboolean *ptr );
void glGetPointerv( GLenum pname, void **params=0 );
void glArrayElement( GLint i );
void glDrawArrays( GLenum mode, GLint first, GLsizei count );
void glDrawElements( GLenum mode, GLsizei count, GLenum type, GLLbuffer *indices );void glInterleavedArrays( GLenum format, GLsizei stride, GLLbuffer *pointer );

void glGenTextures( GLsizei n, GLuint textures[n] );
void glDeleteTextures( GLsizei n, GLuint textures[n]);
void glBindTexture( GLenum target, GLuint texture );
void glPrioritizeTextures( GLsizei n, GLuint textures[n], GLclampf priorities[n] );
GLboolean glAreTexturesResident( GLsizei n,
                                GLuint textures[n],
                                GLboolean residences[n]=0 );
GLboolean glIsTexture( GLuint texture );
void glTexSubImage1D( GLenum target, GLint level, GLint xoffset,
                     GLsizei width, GLenum format,
                     GLenum type, GLLbuffer *pixels );
void glTexSubImage2D( GLenum target, GLint level,
                     GLint xoffset, GLint yoffset,
                     GLsizei width, GLsizei height,
                     GLenum format, GLenum type,
                     GLLbuffer *pixels );
void glCopyTexImage1D( GLenum target, GLint level,
                      GLenum internalformat,
                      GLint x, GLint y,
                      GLsizei width, GLint border );
void glCopyTexImage2D( GLenum target, GLint level,
                      GLenum internalformat,
                      GLint x, GLint y,
                      GLsizei width, GLsizei height, GLint border );
void glCopyTexSubImage1D( GLenum target, GLint level,
                         GLint xoffset, GLint x, GLint y,
                         GLsizei width );
void glCopyTexSubImage2D( GLenum target, GLint level,
                         GLint xoffset, GLint yoffset,
                         GLint x, GLint y,
                         GLsizei width, GLsizei height );


$$#endif


/*
* Additional function to manipulate C buffers.
*/
//GLLbuffer* gllCreateBuffer1 @ gllCreateBuffer(GLsizei n,GLenum type,lua_Number values[n]=0);
GLLbuffer* gllCreateBuffer2 @ gllCreateBuffer(GLsizei n,GLenum type);
void gllDeleteBuffer (GLLbuffer* b);
void gllSetBuffer (GLLbuffer* b, int i, float v);
float gllGetBuffer (GLLbuffer* b, int i);



