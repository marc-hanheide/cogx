// Generated from displist.lua
const char luacode_displist_lua[] =
   "\n"
   "DispList = { context={}, dirty={} }\n"
   "\n"
   "function DispList:_getDispListTab(create)\n"
   "   create = create or false\n"
   "   local ctx = v11nGetOpenGlContext()\n"
   "   assert(ctx, \"No OpenGL context is active\")\n"
   "   local displist = self.context[ctx]\n"
   "   if displist==nil and create then\n"
   "      displist = {}\n"
   "      self.context[ctx] = displist\n"
   "   end\n"
   "   return displist\n"
   "end\n"
   "\n"
   "\n"
   "\n"
   "\n"
   "\n"
   "\n"
   "\n"
   "\n"
   "\n"
   "\n"
   "\n"
   "\n"
   "function DispList:newList(name)\n"
   "   local displist = self:_getDispListTab(true)\n"
   "   local id = displist[name]\n"
   "   if not id then\n"
   "      id = glGenLists(1)\n"
   "      assert(id~=0, \"glGenLists failed\")\n"
   "      displist[name] = id\n"
   "   end\n"
   "\n"
   "\n"
   "   glNewList(id, GL_COMPILE)\n"
   "   assert(glIsList(id)==GL_TRUE, \"glNewList failed\")\n"
   "end\n"
   "\n"
   "function DispList:endList()\n"
   "  glEndList()\n"
   "end\n"
   "\n"
   "function DispList:delete(name)\n"
   "   local displist = self:_getDispListTab(false)\n"
   "   if not displist then return end\n"
   "   local id = displist[name]\n"
   "   if not id then return end\n"
   "   displist[id] = nil\n"
   "   if not glIsList(id) then return end\n"
   "   glDeleteLists(id, 1)\n"
   "end\n"
   "\n"
   "function DispList:exists(name)\n"
   "   local displist = self:_getDispListTab(false)\n"
   "   if not displist then return false end\n"
   "   local id = displist[name]\n"
   "   if not id then return false end\n"
   "   if not glIsList(id) then return false end\n"
   "   return true\n"
   "end\n"
   "\n"
   "function DispList:draw(name)\n"
   "   local displist = self:_getDispListTab(false)\n"
   "   assert(displist, \"No lists have been defined in this context\")\n"
   "   local id = displist[name]\n"
   "   assert(id, \"DispList named '\" .. name .. \"' not found\")\n"
   "   glCallList(id)\n"
   "end\n"
   "\n"
   "function DispList:setDirty(name)\n"
   "   self.dirty[name] = true\n"
   "end\n"
   "\n"
   "function DispList:getDirty(names)\n"
   "   local displist = self:_getDispListTab(false)\n"
   "   local dirt = self.dirty\n"
   "   if next(dirt) ~= nil then -- not empty, clear for next round\n"
   "      self.dirty = {}\n"
   "   end\n"
   "   if displist == nil then\n"
   "      for _,n in pairs(names) do\n"
   "         dirt[n] = true\n"
   "      end\n"
   "   else\n"
   "      for _,n in pairs(names) do\n"
   "         if not displist[n] then\n"
   "            dirt[n] = true\n"
   "         end\n"
   "      end\n"
   "   end\n"
   "   return dirt\n"
   "end\n"
   ; // luacode_displist_lua

