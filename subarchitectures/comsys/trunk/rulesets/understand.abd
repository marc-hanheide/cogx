% h: hi robot
understand : event : uttered(h, Nom) <-
	i : sort(Nom, 'd-units') / true,
	i : prop(Nom, list) / true,
	i : rel_First(Nom, FirstNom) / true,
		i : sort(FirstNom, greeting) / true,
		i : prop(FirstNom, GreetProp) / true,
	i : rel_Next(Nom, NextNom) / true,
		i : sort(NextNom, animate) / true,
		i : prop(NextNom, Robot) / true,
	intention : greeting(h, r) / 0.1.

understand : event : uttered(h, Nom) <-
	i : sort(Nom, greeting) / true,
	i : prop(Nom, GreetProp) / true,
	intention : greeting(h, r) / 0.5.

%event : clarify(h, CR) <-
%	i : cr_modality(CR, vision) / true,
%	i : cr_entity(CR, Entity) / true,
%	event : new_object_visible(Entity) / 10.0.

understand : event : clarify(X, CR) <-
	i : cr_need(CR, Prop) / true,
	i : cr_entity(CR, Entity) / true,
	i : cr_modality(CR, Modality) / true,
	intention : need_get_value(Modality, Entity, Prop) / 0.5.

understand : event : clarify(X, CR) <-
	i : cr_need(CR, Prop, Hypothesis) / true,
	i : cr_modality(CR, Modality) / true,
	i : cr_entity(CR, Entity) / true,
	to_asserted_predicate(Prop, Entity, Hypothesis) / true,
	intention : need_verify_hypothesis(Modality, Entity, Prop, Hypothesis) / 0.5.

to_asserted_predicate(color, Entity, Value) <-
	?( k(now, private(r)) : color(Entity, Value) ).

% h: do you know what this is
understand : event : uttered(h, Nom) <-
	i : sort(Nom, cognition) / true,
	i : prop(Nom, know) / true,  % type of cognition
	i : feat_Mood(Nom, int) / true,  % question
	i : rel_Actor(Nom, ActorNom) / true,
		you(ActorNom) / true,
	i : rel_Patient(Nom, WhatNom) / true,
		what(WhatNom) / true,

	i : sort(AscrNom, ascription) / true,
	i : 'rel_Cop-Restr'(AscrNom, ThisNom) / true,
		this(ThisNom) / true,
		att : refers_to(ThisNom, Ref) / ref_resolution,
	i : 'rel_Cop-Scope'(AscrNom, WhatNom) / true,  % XXX "questioned" flag?
	intention : ask_yn(h, Ref, objecttype, no(unknownObjectType)) / 0.5.
	%?( k(now, private(r)uuu) : objecttype(Ref, not(unknownObjectType))).

you(Nom) <-
	i : sort(Nom, person) / true,
	i : prop(Nom, you) / true.

what(Nom) <-
	i : sort(Nom, entity) / true,
	i : prop(Nom, what) / true.

this(Nom) <-
	i : sort(Nom, entity) / true,
	i : feat_Delimitation(Nom, unique) / true,
	i : feat_Num(Nom, sg) / true,
	i : feat_Proximity(Nom, proximal) / true,
	i : feat_Quantification(Nom, specific) / true.

% h: this is a X
% --> objecttype
understand : event : uttered(h, Nom) <-
	i : sort(Nom, ascription) / true,
	i : 'feat_Mood'(Nom, ind) / true,
	i : 'feat_Tense'(Nom, pres) / true,
	i : 'rel_Subject'(Nom, ThisNom) / true,
	i : 'rel_Cop-Restr'(Nom, ThisNom) / true,
		this(ThisNom) / true,
	att : refers_to(ThisNom, Red) / ref_resolution,  % XXX refer to "this"!
	i : 'rel_Cop-Scope'(Nom, ScopeNom) / true,
	assert_prop(Ref, ScopeNom) / true.

% h: X is Y
understand : event : uttered(h, Nom) <-
	i : sort(Nom, ascription) / true,
	i : 'feat_Mood'(Nom, ind) / true,
	i : 'feat_Tense'(Nom, pres) / true,
	polarity(Nom, Polarity) / true,
	i : 'rel_Subject'(Nom, SubjNom) / true,
	i : 'rel_Cop-Restr'(Nom, RestrNom) / true,
	att : refers_to(RestrNom, RestrRef) / ref_resolution,
	i : 'rel_Cop-Scope'(Nom, ScopeNom) / true,
	assert_prop(RestrRef, Polarity, ScopeNom) / true.

%h: is X Y
understand : event : uttered(h, Nom) <-
	i : sort(Nom, ascription) / true,
	i : 'feat_Mood'(Nom, int) / true,
	i : 'feat_Tense'(Nom, pres) / true,
	%polarity(Nom, Polarity) / true,
	i : 'rel_Subject'(Nom, SubjNom) / true,
	i : 'rel_Cop-Restr'(Nom, RestrNom) / true,
	att : refers_to(RestrNom, RestrRef) / ref_resolution,
	i : 'rel_Cop-Scope'(Nom, ScopeNom) / true,
	query_prop(ScopeNom, Prop, PropValue) / true,
	intention : ask_yn(h, RestrRef, Prop, yes(PropValue)) / 0.2.

query_prop(Nom, color, PropValue) <-
	i : sort(Nom, 'q-color') / true,
	i : prop(Nom, PropValue) / true.

query_prop(Nom, shape, PropValue) <-
	i : sort(Nom, 'q-shape') / true,
	i : prop(Nom, PropValue) / true.

query_prop(Nom, objecttype, PropValue) <-
	i : sort(Nom, thing) / true,
	i : prop(Nom, PropValue) / true,
	i : feat_Delimitation(Nom, existential) / true,
	i : feat_Num(Nom, sg) / true,
	i : feat_Quantification(Nom, specific) / true.

%h: what Prop is Ref
understand : event : uttered(h, Nom) <-
	i : sort(Nom, ascription) / true,
	i : 'feat_Mood'(Nom, int) / true,
	i : 'feat_Tense'(Nom, pres) / true,
	%polarity(Nom, Polarity) / true,
	i : 'rel_Subject'(Nom, SubjNom) / true,
	i : 'rel_Cop-Restr'(Nom, RestrNom) / true,
	att : refers_to(RestrNom, RestrRef) / ref_resolution,
	%i : 'rel_Cop-Scope'(Nom, ScopeNom) / true,
	i : 'rel_Wh-Restr'(Nom, WhNom) / true,
		i : prop(WhNom, what) / true,
		i : rel_Scope(WhNom, QueryNom) / true,
			i : prop(QueryNom, Prop) / true,
	intention : ask_property(h, RestrRef, Prop) / 0.2.

% h: is X Y
%event : uttered(h, Nom) <-
%	i : sort(Nom, ascription) / true,
%	i : 'feat_Mood'(Nom, int) / true,
%	i : 'feat_Tense'(Nom, pres) / true,
%	polarity(Nom, Polarity) / true,
%	i : 'rel_Subject'(Nom, SubjNom) / true,
%	i : 'rel_Cop-Restr'(Nom, RestrNom) / true,
%	att : refers_to(RestrNom, RestrRef) / ref_resolution,
%	i : 'rel_Cop-Scope'(Nom, ScopeNom) / true,
%	assert_prop(RestrRef, Polarity, ScopeNom) / true,
%	intention : question_about(RestrRef) / 1.0.

polarity(Nom, Polarity) <-
	i : feat_Polarity(Nom, Polarity) / true.

polarity(Nom, pos) <-
	assume_positive_polarity(Nom) / 2.0.

%-------------------------------------------------------------------------

% "good" etc
understand : event : uttered(h, Nom) <-
	i : sort(Nom, marker) / true,
	i : prop(Nom, Prop) / true,
	intention : positive_feedback(Nom) / 2.0.

understand : event : uttered(h, Nom) <-
	i : sort(Nom, marker) / true,
	i : prop(Nom, yes) / true,
	intention : answer_yn(h, positive) / 1.0.

understand : event : uttered(h, Nom) <-
	i : sort(Nom, marker) / true,
	i : prop(Nom, 'No') / true,
	intention : answer_yn(h, negative) / 1.0.

%event : uttered(h, Nom) <-
%	intention : not_understood(r, Nom) / 50.0.

%-------------------------------------------------------------------------

%event : uttered(h, Nom) <-
%	i : sort(Nom, ascription) / true,
%	i : prop(Nom, be) / true,
%	i : 'feat_Mood'(Nom, ind) / true,
%	i : 'feat_Tense'(Nom, pres) / true,
%	i : 'rel_Subject'(Nom, SubjNom) / true,
%	i : 'rel_Cop-Restr'(Nom, RestrNom) / true,
%	att : refers_to(RestrNom, RestrRef) / ref_resolution,
%	i : 'rel_Cop-Scope'(Nom, ScopeNom) / true,
%	assert_prop(RestrRef, ScopeNom) / true.

assert_prop(RestrRef, Polarity, Nom) <-
	i : sort(Nom, 'q-color') / true,
	i : prop(Nom, Prop) / true,
	polarprop(Prop, Polarity, PolarProp) / true,
	?( k(now, attrib(r, h)) : color(RestrRef, PolarProp) ),
	intention : assert_prop(h, RestrRef, color) / 0.5.

assert_prop(RestrRef, Polarity, Nom) <-
	i : sort(Nom, 'q-shape') / true,
	i : prop(Nom, Prop) / true,
	polarprop(Prop, Polarity, PolarProp) / true,
	?( k(now, attrib(r, h)) : shape(RestrRef, PolarProp) ),
	intention : assert_prop(h, RestrRef, shape) / 0.5.

assert_prop(Ref, Polarity, Nom) <-
	i : sort(Nom, thing) / true,
	i : prop(Nom, Prop) / true,
	i : feat_Delimitation(Nom, existential) / true,
	i : feat_Num(Nom, sg) / true,
	i : feat_Quantification(Nom, specific) / true,
	%maybe_assert_modifier(Ref, Polarity, Nom) / true,  % XXX explosion!!
	polarprop(Prop, Polarity, PolarProp) / true,
	?( k(now, attrib(r, h)) : objecttype(Ref, PolarProp) ),
	intention : assert_prop(h, Ref, objecttype) / 0.5.

maybe_assert_modifier(Ref, Polarity, Nom) <-
	no_modifier(Nom) / 8.0.

maybe_assert_modifier(Ref, Polarity, Nom) <-
	i : rel_Modifier(Nom, ModifierNom) / true,
	assert_prop(Ref, Polarity, ModifierNom) / true.

polarprop(Prop, pos, Prop).
polarprop(Prop, neg, not(Prop)).
