%-------------------------------------------------------------------------

assert_restr(S, H, Int, Ref, Nom).

assert_restr(S, H, Int, Ref, Nom) <-
	i : sort(Nom, thing),
	i : prop(Nom, Prop),
	i : feat_Delimitation(Nom, unique),
	i : feat_Num(Nom, sg),
	i : feat_Quantification(Nom, specific),
	assert_modifier(S, H, Int, Ref, Nom),
	int : pre(Int, shared(S, H), rpv(Ref, 'ObjectType', Prop)) / -7.1.

assert_restr(S, H, Int, Ref, Nom) <-
	i : sort(Nom, 'q-color'),
	i : prop(Nom, Prop),
	int : pre(Int, shared(S, H), rpv(Ref, 'Color', Prop)) / -4.1.

assert_restr(S, H, Int, Ref, Nom) <-
	i : sort(Nom, 'q-size'),
	i : prop(Nom, Prop),
	int : pre(Int, shared(S, H), rpv(Ref, 'Size', Prop)) / -4.1.

assert_restr(S, H, Int, Ref, Nom) <-
	i : sort(Nom, 'q-shape'),
	i : prop(Nom, Prop),
	int : pre(Int, shared(S, H), rpv(Ref, 'Shape', Prop)) / -4.1.

assert_restr(S, H, Int, Ref, Nom) <-
	i : sort(Nom, 'e-place'),
	i : prop(Nom, Prop),
	i : feat_Delimitation(Nom, unique),
	i : feat_Num(Nom, sg),
	i : feat_Quantification(Nom, specific),
	assert_modifier(S, H, Int, Ref, Nom),
	int : pre(Int, shared(S, H), rpv(Ref, 'PlaceType', Prop)) / -7.1.

%-------------------------------------------------------------------------

assert_modifier(S, H, Int, Ref, Nom).

assert_modifier(S, H, Int, Ref, Nom) <-
	i : rel_Modifier(Nom, ModNom),
	pay_maybe_modifier(Nom) / -3.0,
	assert_restr(S, H, Int, Ref, ModNom).

%-------------------------------------------------------------------------

assert_scope(S, H, Int, Ref, Polarity, Nom) <-
	i : sort(Nom, 'q-color'),
	i : prop(Nom, Prop),
	polarprop(Prop, Polarity, PolarProp),
	int : pre(Int, private(S), rpv(Ref, 'Color', PolarProp)) / -0.1,
	int : pre(Int, attrib(S, H), rpv(Ref, 'Color', unknown)) / -0.1,
	int : post(Int, shared(S, H), rpv(Ref, 'Color', PolarProp)) / -6.1.

assert_scope(S, H, Int, Ref, Polarity, Nom) <-
	i : sort(Nom, 'q-shape'),
	i : prop(Nom, Prop),
	polarprop(Prop, Polarity, PolarProp),
	int : pre(Int, private(S), rpv(Ref, 'Shape', PolarProp)) / -0.1,
	int : pre(Int, attrib(S, H), rpv(Ref, 'Shape', unknown)) / -0.1,
	int : post(Int, shared(S, H), rpv(Ref, 'Shape', PolarProp)) / -6.1.

assert_scope(S, H, Int, Ref, Polarity, Nom) <-
	i : sort(Nom, 'q-size'),
	i : prop(Nom, Prop),
	polarprop(Prop, Polarity, PolarProp),
	int : pre(Int, private(S), rpv(Ref, 'Size', PolarProp)) / -0.1,
	int : pre(Int, attrib(S, H), rpv(Ref, 'Size', unknown)) / -0.1,
	int : post(Int, shared(S, H), rpv(Ref, 'Size', PolarProp)) / -6.1.

assert_scope(S, H, Int, Ref, Polarity, Nom) <-
	i : sort(Nom, thing),
	i : prop(Nom, Prop),
	i : feat_Delimitation(Nom, existential),
	i : feat_Num(Nom, sg),
	i : feat_Quantification(Nom, specific),
	scope_modifier(S, H, Int, Ref, Polarity, Nom),
	polarprop(Prop, Polarity, PolarProp),
	int : pre(Int, private(S), rpv(Ref, 'ObjectType', PolarProp)) / -0.1,
	int : pre(Int, attrib(S, H), rpv(Ref, 'ObjectType', unknown)) / -0.1,
	int : post(Int, shared(S, H), rpv(Ref, 'ObjectType', PolarProp)) / -8.1.

assert_scope(S, H, Int, Ref, Polarity, Nom) <-
	i : sort(Nom, 'e-place'),
	i : prop(Nom, Prop),
	polarprop(Prop, Polarity, PolarProp),
	int : pre(Int, private(S), rpv(Ref, 'PlaceType', PolarProp)) / -0.1,
	int : pre(Int, attrib(S, H), rpv(Ref, 'PlaceType', unknown)) / -0.1,
	int : post(Int, shared(S, H), rpv(Ref, 'PlaceType', PolarProp)) / -6.1.

assert_scope(S, H, Int, Ref, Polarity, Nom) <-
	i : sort(Nom, 'm-location'),
	i : prop(Nom, Prop),
	polarprop(Prop, Polarity, PolarProp),
	int : pre(Int, private(S), rpv(Ref, 'Location', PolarProp)) / -0.1,
	int : pre(Int, attrib(S, H), rpv(Ref, 'Location', unknown)) / -0.1,
	int : post(Int, shared(S, H), rpv(Ref, 'Location', PolarProp)) / -6.1.

%-------------------------------------------------------------------------

scope_modifier(S, H, Int, Ref, Polarity, Nom).

scope_modifier(S, H, Int, Ref, Polarity, Nom) <-
	i : rel_Modifier(Nom, ModNom),
	pay_maybe_scope_modifier(Nom) / -3.0,
	assert_scope(S, H, Int, Ref, Polarity, ModNom).

%-------------------------------------------------------------------------

query_prop(Nom, 'Color', PropValue) <-
	i : sort(Nom, 'q-color'),
	i : prop(Nom, PropValue).

query_prop(Nom, 'Shape', PropValue) <-
	i : sort(Nom, 'q-shape'),
	i : prop(Nom, PropValue).

query_prop(Nom, 'Size', PropValue) <-
	i : sort(Nom, 'q-size'),
	i : prop(Nom, PropValue).

query_prop(Nom, 'ObjectType', PropValue) <-
	i : sort(Nom, thing),
	i : prop(Nom, PropValue),
	i : feat_Delimitation(Nom, existential),
	i : feat_Num(Nom, sg),
	i : feat_Quantification(Nom, specific).

%-------------------------------------------------------------------------

polarity(Nom, Polarity) <-
	i : feat_Polarity(Nom, Polarity).

polarity(Nom, pos) <-
	assume_positive_polarity(Nom) / 1.5.

%-------------------------------------------------------------------------

polarprop(Prop, pos, Prop).
polarprop(Prop, neg, not(Prop)).

%-------------------------------------------------------------------------
