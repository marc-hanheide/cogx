%-------------------------------------------------------------------------
% FIXME: this will eventually have to be use probabilities exclusively.
% For now, let's just use negative weights where we care about having
% the given query/nominal in the resulting proof.
%-------------------------------------------------------------------------

% The following dummy facts are bound to nominals in the rules for generation.
dummy_nom1(dn1_1).
dummy_nom2(dn1_2).
dummy_nom3(dn1_3).
dummy_nom4(dn1_4).
dummy_nom5(dn1_5).
dummy_nom6(dn1_6).

%-------------------------------------------------------------------------

utt_head(Nom) <-
	dummy_nom1(Nom),
	i : sort(Nom, dvp) / p(1.0),
	i : prop(Nom, 'c-goal') / p(1.0).

generate : event : utter(robot, H, Int) <-
	utt_head(Nom),
	i : feat_SpeechAct(Nom, clarification) / -1.0,
	i : feat_Modality(Nom, speech) / -1.0,
	event : produce(r, Nom) / 20.0.

%-------------------------------------------------------------------------

generate : event : utter(S, H, Int) <-
	utt_head(Nom),
	i : int : agent(Int, [S]),
	i : int : post(Int, state(['error-reported'|T])),
	i : feat_SpeechAct(Nom, clarification) / -1.0,
	i : feat_Modality(Nom, speech) / -1.0,
	event : produce(r, Nom) / -1.0.

%-------------------------------------------------------------------------
% POLAR QUESTIONS
%-------------------------------------------------------------------------

generate : event : utter(S, H, Int) <-
	utt_head(Nom),
	dummy_nom2(ContentNom),
	dummy_nom3(TargetNom),
	i : int : agent(Int, [S]),
	i : int : post(Int, state(['question-answered', agent(H), about(About), feature(Feat), hypo(Hypo)])),
	i : feat_SpeechAct(Nom, clarification) / -1.0,
	i : feat_Modality(Nom, vision) / -1.0,
	i : rel_Target(Nom, TargetNom) / -1.0,
		generate : object_description(Int, TargetNom, About),
	i : rel_Content(Nom, ContentNom) / -1.0,
		feat_to_sort(Feat, FeatSort),
		i : sort(ContentNom, FeatSort) / -1.0,
		i : prop(ContentNom, Hypo) / -1.0,
	event : produce(r, Nom) / -1.0.

%- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

feat_to_sort(color, 'q-color').
feat_to_sort(shape, 'q-shape').
feat_to_sort(size, 'q-size').

%- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

maybe_add_hypo(Nom, [hypo(Hypo)|T], clarification) <-
	i : prop(Nom, Hypo) / -1.0.

maybe_add_hypo(Nom, [], question).

%-------------------------------------------------------------------------
% OBJECT DESCRIPTIONS
%-------------------------------------------------------------------------

generate : object_description(Int, Nom, PrivBId) <-
	i : int : pre(Int, belief(SharedBId)),
	% XXX this will be outdated once we switch to ancestors!
	bel : about(SharedBId, PrivBId),
	bel : objecttype(SharedBId, Type),
	i : sort(Nom, thing) / -1.0,
	i : prop(Nom, Type) / -1.0,
	i : feat_InfoStatus(Nom, familiar) / -1.0,
	i : feat_Salient(Nom, true) / -1.0.

%-------------------------------------------------------------------------

% XXX HACK XXX
% find me a box -> what size is this
generate : event : utter(S, H, Int) <-
	utt_head(Nom),
	dummy_nom2(ContentNom),
	dummy_nom3(TargetNom),
	i : int : agent(Int, [S]),
	i : int : post(Int, state(['found' | T])),
	i : feat_SpeechAct(Nom, question) / -1.0,
	i : feat_Modality(Nom, vision) / -1.0,
	i : rel_Target(Nom, TargetNom) / -1.0,
		generate : this(TargetNom),
	i : rel_Content(Nom, ContentNom) / -1.0,
		i : sort(ContentNom, 'q-size') / -1.0,
	event : produce(r, Nom) / -1.0.

%-------------------------------------------------------------------------

% XXX HACK XXX
% bring me a box -> it is blue
generate : event : utter(S, H, Int) <-
	utt_head(Nom),
	dummy_nom2(ContentNom),
	dummy_nom3(TargetNom),
	dummy_nom4(PropNom),
	i : int : agent(Int, [S]),
	i : int : post(Int, state(['possession' | T])),
	i : feat_SpeechAct(Nom, assertion) / -1.0,
	i : feat_Relation(Nom, answer) / -1.0,
	i : rel_Content(Nom, ContentNom) / -1.0,
		i : sort(ContentNom, 'ascription') / -1.0,
		i : rel_Target(ContentNom, TargetNom) / -1.0,
			generate : complex_ex(TargetNom),
		i : rel_Color(ContentNom, PropNom) / -1.0,
			i : sort(PropNom, quality) / -1.0,
			i : prop(PropNom, blue) / -1.0,
	event : produce(r, Nom) / -1.0.

%-------------------------------------------------------------------------

% XXX HACK XXX
% go left -> please show me something red
generate : event : utter(S, H, Int) <-
	utt_head(Nom),
	dummy_nom2(ContentNom),
	dummy_nom3(ActorNom),
	i : int : agent(Int, [S]),
	i : int : post(Int, state(['motion' | T])),
	i : feat_SpeechAct(Nom, request) / -1.0,
	i : feat_Modality(Nom, vision) / -1.0,
	i : rel_Actor(Nom, ActorNom) / -1.0,
		i : sort(ActorNom, person) / -1.0,
		i : prop(ActorNom, you) / -1.0,
	i : rel_Content(Nom, ContentNom) / -1.0,
		i : sort(ContentNom, 'q-color') / -1.0,
		i : prop(ContentNom, red) / -1.0,
	event : produce(r, Nom) / -1.0.

%-------------------------------------------------------------------------

% CAREFUL: "box" is a "thing"

generate : this(Nom) <-
	i : sort(Nom, entity) / -1.0,
	i : prop(Nom, context) / -1.0,
%	i : feat_InfoStatus(Nom, familiar) / -1.0.
	i : feat_Proximity(Nom, proximal) / -1.0,  % when default, "it" doesn't work
	i : feat_Salient(Nom, true) / -1.0.

generate : it(Nom) <-
	i : sort(Nom, entity) / -1.0,
	i : prop(Nom, context) / -1.0,
	i : feat_InfoStatus(Nom, familiar) / -1.0,
	i : feat_Salient(Nom, true) / -1.0.

generate : the_box(Nom) <-
	i : sort(Nom, thing) / -1.0,
	i : prop(Nom, box) / -1.0,
	i : feat_InfoStatus(Nom, familiar) / -1.0,
	i : feat_Salient(Nom, true) / -1.0.

generate : complex_ex(Nom) <-
	generate : the_box(Nom),
	i : feat_Color(Nom, red) / -1.0,
	i : feat_Shape(Nom, round) / -1.0.

%-------------------------------------------------------------------------
% ENGAGEMENT
%-------------------------------------------------------------------------

generate : event : utter(S, H, Int) <-
	i : int : agent(Int, [S]),
	i : int : post(Int, state(['engagement-open'|T])),
	utt_head(Nom),
	i : feat_SpeechAct(Nom, greeting) / -1.0,
	event : produce(r, Nom) / -1.0.

generate : event : utter(S, H, Int) <-
	i : int : agent(Int, [S]),
	i : int : post(Int, state(['engagement-closed'|T])),
	utt_head(Nom),
%	i : feat_SpeechAct(Nom, closing) / -1.0,
	i : feat_CannedText(Nom, goodbye_darling) / -1.0,
	event : produce(r, Nom) / -1.0.

%-------------------------------------------------------------------------
% THANKING
%-------------------------------------------------------------------------

generate : event : utter(S, H, Int) <-
	i : int : agent(Int, [S]),
	i : int : post(Int, state(['thanked'|T])),
	utt_head(Nom),
	i : feat_SpeechAct(Nom, confirmation) / -1.0,
	event : produce(r, Nom) / -1.0.
