# vim: set ft=cast sw=4 sts=4 ts=8 et :vim
# Part of the SUBARCHITECTURE "binder.sa"

JAVA MG MLNSerializer eu.cogx.mln.MLNSerializer

SETVAR evdFilter_params=<multiline>
   --sa binder
   --evd-ids mlnEngine1
   --type visualobject
   --keys color,shape,objecttype
   --inst belief
   --thr0 0.29
   --thr1 0.3
   # --epstatus shared
</multiline>
CPP MG evdFilter MLNBeliefEvdFilter %(evdFilter_params)

SETVAR mlnEngine1_inf_str=<multiline>
   -ms
   -i subarchitectures/binder.sa/src/mln/refresol/rrKB.mln,subarchitectures/binder.sa/src/mln/refresol/infRules.mln,subarchitectures/binder.sa/src/mln/refresol/rrDomain.mln
   -e subarchitectures/binder.sa/src/mln/refresol/defEvidence.db
   -q resolution #,unknown
   -ow color,shape,belief
</multiline>
	
SETVAR mlnEngine1_params=<multiline>
	--sa binder
	--queries resolution,unknown
	--instance-type t_belief
        --inf-str "%(mlnEngine1_inf_str)"
	--standalone-display-host localhost
</multiline>
CPP MG mlnEngine1 MLNEngine %(mlnEngine1_params)

CPP MG rrClient MLNRefResolutionClient --sa binder --inf-id mlnEngine1 --evd-ids mlnEngine1 --keys color,shape,type

##### Monitors

JAVA MG MLNFactStatus castutils.viewer.V11WMViewerComponent --displayserver "display.srv" --subscribe "eu.cogx.mln.slice.MLNState"  --generic-col
JAVA MG MLNEvidence castutils.viewer.V11WMViewerComponent --displayserver "display.srv" --subscribe "org.cognitivesystems.binder.mln.Evidence"  --generic-col --compact
JAVA MG MLNInference castutils.viewer.V11WMViewerComponent --standalone-display-host localhost --subscribe "org.cognitivesystems.binder.mln.InferredResult" --generic-col
JAVA MG RefReslResult castutils.viewer.V11WMViewerComponent --standalone-display-host localhost --subscribe "de.dfki.lt.tr.dialogue.ref.ReferenceResolutionResult" --generic-col --compact
JAVA MG RefReslRequest castutils.viewer.V11WMViewerComponent --standalone-display-host localhost --subscribe "de.dfki.lt.tr.dialogue.ref.ReferenceResolutionRequest" --generic-col --compact
