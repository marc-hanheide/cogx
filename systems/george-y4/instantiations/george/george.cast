# vim: set ft=cast sw=4 sts=4 ts=8 et :vim
# CAST config file

# The default HOSTNAMEs are defined in george-hosts.incl and are all set to localhost.
# Use george-hosts-<username>.incl for your personal settings.
INCLUDE george-hosts.incl

###########################################################################
#             DEFAULT CONFIGURATION                                       #
###########################################################################
# real or simulation(gazebo)
VARDEFAULT simulator=gazebo
VARDEFAULT hardware=simulation
#SETVAR hardware=real

IFEQ(%(hardware),real)
  OPTDEFAULT hardware_options=<multiline>
    kinect
    !kinect-video
    !video 
    !stereo
    ptz
    ptz-wmcall
    cameramount
    robot
    !laser
    katana
  </multiline>
ELSE # simulation
  OPTDEFAULT hardware_options=<multiline>
    !kinect
    !kinect-video
    video 
    stereo
    ptz
    ptz-wmcall
    cameramount
    robot
    !laser
    !katana
  </multiline>
ENDIF

OPTDEFAULT feature_options=<multiline>
   vision
   !vision-execution
   !vision-mediators
   !visual-learner
   !object-recognizer
   spatial
   !binder
   !binder-mln
   !dialogue
   !dialogue-gui
   !planning
   # Include Manual Planning, only if planning is also enabled
   !manual-planning
   !motivation
   manipulation
   visualization
   standalone-display
</multiline>

OPTDEFAULT test_options=<multiline>
    !tutor-driven-test
</multiline>

###########################################################################

HOST     [Main]

IFOPTALL(%(hardware_options), ptz)
  SETVAR ptz_server_params=--player-host %(host:PlayerHost) --ptz-device 0
  IFEQ(%(hardware), real)
    COMPONENT CPP ptz.server PlayerPTZServer %(ptz_server_params)
  ELSE
    IFEQ(%(simulator), stage)
      COMPONENT CPP ptz.server PlayerActServer %(ptz_server_params)
    ELSE
      COMPONENT CPP ptz.server PlayerPTZServer %(ptz_server_params) --motion_tolerance 0.2
    ENDIF
  ENDIF
ENDIF

# spatial ################################################################
IFOPTANY(%(feature_options) %(hardware_params), spatial ptz-wmcall)
   INCLUDE  includes/spatial.sa/spatial-base.cast
ENDIF

# --pan "0.0" --tilt "-0.8"  # --testGUI
IFOPTALL(%(hardware_options), ptz-wmcall)
    VARDEFAULT ptzwmi_params=--pan "0.0" --tilt "-0.8"
   JAVA MG ptz.wmi.server eu.cogx.ptz.PanTiltZoomServer %(ptzwmi_params)
ENDIF

# vision #################################################################
IFOPTALL(%(feature_options), vision)
   INCLUDE  includes/vision.sa/vision-base.cast

   # Configure the cameras (internal, external parameters; stereo config; position)
   IFEQ(%(hardware), real)
      INCLUDE  real/cameras-real.incl
   ELSE
      INCLUDE  sim/cameras-sim.incl
      INCLUDE  sim/juggler.incl
   ENDIF

   # Include other vision components
   INCLUDE  george-vision.incl

   # belief mediators, execution
   IFOPTALL(%(feature_options), vision-execution)
      JAVA MG exe.vision vision.execution.george.VisionActionInterface --fake-pose 
      # INCLUDE includes/vision.sa/vision-execution.cast
   ENDIF

   IFOPTALL(%(feature_options), vision-mediators  binder)
      JAVA MG po-mediator eu.cogx.perceptmediator.components.ProtoObjectMediatorComponent --write-to-sa binder
      JAVA MG vc-mediator eu.cogx.perceptmediator.components.ViewConeMediatorComponent --write-to-sa binder
      JAVA MG vcmc-mediator eu.cogx.perceptmediator.components.ViewConeMoveCostsMediatorComponent --write-to-sa binder
      JAVA MG vo-mediator eu.cogx.perceptmediator.george.components.VisualObjectMediatorComponent  --write-to-sa binder
      JAVA MG vms-mediator eu.cogx.perceptmediator.george.components.ModelStatusMediator  --write-to-sa binder
      #INCLUDE includes/vision.sa/vision-mediators.cast
   ENDIF

   CPP MG vc-costs ViewConeMoveCostGenerator
ENDIF

# testing George in simulation; the tester is in the vision.sa
IFEQ(%(hardware), simulation)
    IFOPTALL(%(test_options), tutor-driven-test)
        VARDEFAULT JugglerObjectList=%(CONFIG_DIR)/../gazebo/test1.objects.txt
        VARDEFAULT TesterLearnAttrs=%(CONFIG_DIR)/../gazebo/test1.attrs.txt
        SETVAR tester_attrs=<multiline>
            --player-host %(host:PlayerHost)
            --objects "%(JugglerObjectList)"
            --learn-attrs "%(TesterLearnAttrs)"
        </multiline>
        CPP MG test-george GeorgeTester %(tester_attrs)
    ENDIF
ENDIF

# binder #################################################################
IFOPTALL(%(feature_options), binder)
   INCLUDE includes/binder.sa/binder-base.cast
   IFOPTALL(%(feature_options), binder-mln)
      INCLUDE george-mln.incl
   ENDIF

   JAVA MG VisualSalienceRefResolver org.cognitivesystems.binder.ref.VisualSalienceReferenceResolution
ENDIF


# dialogue ###################################################################
IFOPTALL(%(feature_options), dialogue)
    IFOPTALL(%(feature_options), dialogue-gui)
        SETVAR Dialogue_IncludeGui=1
    ELSE
        SETVAR Dialogue_IncludeGui=0
    ENDIF
    INCLUDE includes/dialogue.sa/INCL/george-live.cast
    INCLUDE includes/dialogue.sa/dialogue-exe.cast
ENDIF

# planning and execution #####################################################
IFOPTALL(%(feature_options), planning)
   # modifiable options
   VARDEFAULT planner_show_dot=--nodot
   VARDEFAULT planner_workdir=subarchitectures/planner.sa/src/python
   VARDEFAULT planner_domain=george.domain.year4.mapl
   VARDEFAULT planner_config="config.george.ini"
   VARDEFAULT planner_monitor_files=<multiline>
      CurrentPlan#plan=dot:%(planner_workdir)/{plan*.dot}
   </multiline>

   SETVAR planner_srv_params=<multiline>
       --domain %(planner_domain)
       --displayserver "display.srv"
       --config %(planner_config)
        %(planner_show_dot)
   </multiline>
   # WARNING: COMPONENT ends a SA and all MG and UM components are skipped until next SA
   COMPONENT PYTHON PlannerPythonServer PythonServer %(planner_srv_params)

   SUBARCHITECTURE planner.sa
   JAVA WM cast.architecture.SubarchitectureWorkingMemory
   CPP TM AlwaysPositiveTaskManager

   CPP MG Planner WMControl 

   CPP MG fileviewer.cli FileMonitorDC --displayserver "display.srv" --monitor "%(planner_monitor_files)"

   IFOPTALL(%(feature_options), manual-planning)
      JAVA MG manual.planning eu.cogx.planner.facade.ManualPlanningTaskComponent
      JAVA MG manual.execution george.execution.components.GraphicalExecutionManager
   ENDIF
   
   JAVA MG execution-mediator george.execution.components.GeorgeExecutionMediator

   IFOPTALL(%(feature_options), binder)
      JAVA MG rbt-mediator eu.cogx.perceptmediator.george.components.RobotMediatorComponent --write-to-sa binder

      # Y3: JAVA MG shared-tracker eu.cogx.sharedtracker.george.SharedBeliefTracker --write-to-sa binder
      JAVA MG assumed-tracker eu.cogx.belieftracker.george.AssumedBeliefTracker --write-to-sa binder 
      JAVA MG assumed-verified-merger eu.cogx.belieftracker.george.AssumedVerifiedVisualObjectMerger --write-to-sa binder 
      
      # JAVA MG wmeditor.yaml castutils.castextensions.wmeditor.XMLEditor --subscribe "eu.cogx.beliefs.slice.VerifiedBelief"
   ENDIF
ENDIF

IFOPTALL(%(feature_options), motivation)
   INCLUDE includes/motivation.sa/motivation.cast
   INCLUDE includes/motivation.sa/motivation-goals-george.cast
ENDIF

# manipulation #####################################################################

IFOPTALL(%(feature_options), manipulation)

    SUBARCHITECTURE manipulation.sa
    JAVA WM cast.architecture.SubarchitectureWorkingMemory
    CPP TM AlwaysPositiveTaskManager

    # Include the appropriate Katana config
    # TODO: select katana 300 or 450
    IFOPTALL(%(hardware_options), katana)
        IFEQ(%(hardware),simulation)
            INCLUDE  sim/katana300-sim.incl
        ENDIF
        IFEQ(%(hardware),real)
            INCLUDE  real/katana300-real.incl
        ENDIF
    ELSE
        JAVA MG exe.manipulation manipulation.execution.george.FakeManipulationActionInterface 
    ENDIF
ENDIF


# visualization ##########################################################
IFOPTALL(%(feature_options), visualization)
   SUBARCHITECTURE visualization.sa 
   JAVA WM cast.architecture.SubarchitectureWorkingMemory
   CPP TM AlwaysPositiveTaskManager

   IFOPTALL(%(feature_options), standalone-display)
      SETVAR displaysrv_param_redirect=--redirect-to-host %(host:DisplayHost)
   ELSE
      SETVAR displaysrv_param_redirect=
   ENDIF
   CPP MG display.srv DisplayServer %(displaysrv_param_redirect)

   JAVA MG beliefdisplay castutils.viewer.V11WMViewerComponent --displayserver "display.srv" --subscribe "de.dfki.lt.tr.beliefs.slice.sitbeliefs.dBelief"  --generic-col --compact --omit-fields "content"
   JAVA MG mergedbeliefdisplay castutils.viewer.V11WMViewerComponent --displayserver "display.srv" --subscribe "eu.cogx.beliefs.slice.MergedBelief"  --generic-col --compact --omit-fields "content"
   JAVA MG intentiondisplay castutils.viewer.V11WMViewerComponent --displayserver "display.srv" --subscribe "de.dfki.lt.tr.beliefs.slice.intentions.InterpretedIntention"  --generic-col --compact --omit-fields "content"

   IFOPTALL(%(feature_options), planning)
      JAVA MG plannertasksdisplay castutils.viewer.V11WMViewerComponent --displayserver "display.srv" --subscribe "autogen.Planner.PlanningTask" --generic-col
   ENDIF

   IFOPTALL(%(feature_options), motivation)
      JAVA MG motivedisplay motivation.util.viewer.MotiveChartViewer --displayserver "display.srv" --mode SVG
      JAVA MG goaldisplay castutils.viewer.V11WMViewerComponent --displayserver "display.srv" --subscribe "motivation.slice.Motive"
   ENDIF

   # main_camera_id is defined by xxx/cameras-xxx.incl
   IFNEQ(%(main_camera_id),)
       CPP MG scene.2d VirtualScene2D  --v11n-objects "video.viewer.0" --videoname "videoserver" --camid "%(main_camera_id)"
   ENDIF

   VARDEFAULT dialogue_v11n_presets=%(CURRENT_DIR)/dialogPresets.txt
   CPP MG dialogue.v11n DialogInteraction --presets "%(dialogue_v11n_presets)"
   CPP MG INFO.trace GeorgeEventTrace


### all types to be logged from WMs if debug is enabled
VARDEFAULT logged_types=<multiline>
  execution.slice.Action,
  autogen.Planner.Action,
  autogen.Planner.PlanningTask,
  de.dfki.lt.tr.beliefs.slice.intentions.BaseIntention,
  de.dfki.lt.tr.beliefs.slice.intentions.PossibleInterpretedIntentions,
  VisionData.VisualLearningTask
</multiline>

   ### starts the WM logger that logs all operation of subscribed types on INFO level in the logs.
   ### Set %(logged_types) to select the types you are interested in
   JAVA MG wmlogger castutils.experimentation.WMLogger --subscribe "%(logged_types)"

ENDIF
