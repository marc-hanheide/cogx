(define (domain cogx)

  (:requirements :mapl :adl :object-fluents)
  
  (:types 
   place - object
   robot - agent
   locatable - object
   visualobject robot - locatable
   recordlabel - object
   ackvalue - object
   )
  
  (:predicates
   (connected ?n1 - place ?n2 - place)
   (visited ?loc - place)
   (searched ?loc - place)
   )
  
  (:functions
   (is-in ?l - locatable) - place
   (label ?l - locatable) - recordlabel
   (object-acknowledged ?l - locatable) - ackvalue
   )

;;; objects ;;;
  (:constants
   james jesusjones - recordlabel
   ;;;chakakhan heartbreakers james jesusjones - recordlabel;;;
   one two three - ackvalue
  )
  
;;; actions ;;;

  (:action acknowledge-object-one
   :agent (?a - robot)
   :variables (?l - visualobject ?p - place)
   :precondition (and (= (is-in ?l) ?p))
   :effect (and
     (assign (object-acknowledged ?l) one)
     (update (object-acknowledged ?l) one)
     ))

  (:action acknowledge-object-two
   :agent (?a - robot)
   :variables (?l - visualobject ?p - place)
   :precondition (and (= (is-in ?l) ?p) 
     (exists (?oa - visualobject) (and (not (= ?l ?oa)) (=(object-acknowledged ?oa) one))))
   :effect (and
     (assign (object-acknowledged ?l) two)
     (update (object-acknowledged ?l) two)
     ))

  (:action acknowledge-object-three
   :agent (?a - robot)
   :variables (?l - visualobject ?p - place)
   :precondition (and (= (is-in ?l) ?p) 
     (exists (?oa ?ob - visualobject) (and (not(= ?l ?oa)) (=(object-acknowledged ?oa) one) (not (= ?l ?ob)) (=(object-acknowledged ?ob) two))))
   :effect (and
     (assign (object-acknowledged ?l) three)
     (update (object-acknowledged ?l) three)
     ))

  (:action look-for-objects
	   :agent (?a - robot)
	   :variables (?loc - place)
	   :precondition (and
			  (= (is-in ?a) ?loc)
			  )
	   :effect (and
		    (searched ?loc)
;;;		    (forall (?l - recordlabel) (kval ?a (recordlocation ?l)));;;
;;;		    (forall (?l - recordlabel) (exists (?v - visualobject) (=(label ?v) ?l)));;;
		    (update (searched ?loc) true)
		    ))

  (:action move
	   :agent (?a - robot)
	   :parameters (?to - place)
	   :variables (?from - place)
	   :precondition (and
			  (= (is-in ?a) ?from)
			  (or (connected ?from ?to)
			      (connected ?to ?from))
			  )
	   :effect (and
		    (assign (is-in ?a) ?to)
		    (visited ?to)
		    (update (visited ?to) true)
		    ))
  
  )
