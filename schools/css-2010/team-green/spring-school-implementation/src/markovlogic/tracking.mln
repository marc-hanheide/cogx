///////////////////////////////
// CONSTANTS
///////////////////////////////

// beliefs
existingunion = {UG_Q}
percept = {P}
belief = {UG_Q,P}

// possible outcomes of the grouping process
outcome = {UG_Q,UM_Q}

// feature values
detectedval = {False,None,Unknown}
is-inval = {None,U3_q,Unknown}
nameval = {None,Unknown,Vrecord3,Vrecord4}
typeval = {None,Unknown}
vo_idval = {None,Unknown,V2_f,V3_f}

///////////////////////////////
// PREDICATES
///////////////////////////////

Detected(belief,detectedval)
Is-in(belief,is-inval)
Name(belief,nameval)
Type(belief,typeval)
Vo_id(belief,vo_idval)

Outcome(outcome)
UnifyWith(existingunion)
Existence(belief)

///////////////////////////////
// EXISTING UNIONS
///////////////////////////////

100.0 Existence(UG_Q)
0.0 Existence(UG_Q) ^ Is-in(UG_Q,U3_q)
Existence(UG_Q) => !Is-in(UG_Q,Unknown).
Existence(UG_Q) => !Is-in(UG_Q,None).
0.0 Existence(UG_Q) ^ Name(UG_Q,Vrecord3)
Existence(UG_Q) => !Name(UG_Q,Unknown).
Existence(UG_Q) => !Name(UG_Q,Vrecord4).
Existence(UG_Q) => !Name(UG_Q,None).
0.0 Existence(UG_Q) ^ Detected(UG_Q,False)
Existence(UG_Q) => !Detected(UG_Q,Unknown).
Existence(UG_Q) => !Detected(UG_Q,None).
0.0 Existence(UG_Q) ^ Vo_id(UG_Q,V2_f)
Existence(UG_Q) => !Vo_id(UG_Q,Unknown).
Existence(UG_Q) => !Vo_id(UG_Q,V3_f).
Existence(UG_Q) => !Vo_id(UG_Q,None).
Existence(UG_Q) => !Type(Ug_q,Unknown).
Existence(UG_Q) => Type(Ug_q,None).

///////////////////////////////
// NEW PERCEPT
///////////////////////////////

100.0 Existence(P)
0.0 Existence(P) ^ Is-in(P,U3_q)
Existence(P) => !Is-in(P,Unknown).
Existence(P) => !Is-in(P,None).
0.0 Existence(P) ^ Name(P,Vrecord4)
Existence(P) => !Name(P,Unknown).
Existence(P) => !Name(P,Vrecord3).
Existence(P) => !Name(P,None).
0.0 Existence(P) ^ Detected(P,False)
Existence(P) => !Detected(P,Unknown).
Existence(P) => !Detected(P,None).
0.0 Existence(P) ^ Vo_id(P,V3_f)
Existence(P) => !Vo_id(P,Unknown).
Existence(P) => !Vo_id(P,V2_f).
Existence(P) => !Vo_id(P,None).
Existence(P) => !Type(P,Unknown).
Existence(P) => Type(P,None).

///////////////////////////////
// FEATURE VALUE CONSTRAINTS
///////////////////////////////

// rules for existence dependency
!Existence(x) => y=None v !Detected(x,y).
!Existence(x) => Detected(x,None).
!Existence(x) => y=None v !Is-in(x,y).
!Existence(x) => Is-in(x,None).
!Existence(x) => y=None v !Name(x,y).
!Existence(x) => Name(x,None).
!Existence(x) => y=None v !Type(x,y).
!Existence(x) => Type(x,None).
!Existence(x) => y=None v !Vo_id(x,y).
!Existence(x) => Vo_id(x,None).

// mutual exclusivity and unicity constraints
Detected(x,y) ^ Detected(x,z) => y=z.
EXIST y Detected(x,y).
Is-in(x,y) ^ Is-in(x,z) => y=z.
EXIST y Is-in(x,y).
Name(x,y) ^ Name(x,z) => y=z.
EXIST y Name(x,y).
Type(x,y) ^ Type(x,z) => y=z.
EXIST y Type(x,y).
Vo_id(x,y) ^ Vo_id(x,z) => y=z.
EXIST y Vo_id(x,y).


///////////////////////////////
// SIMILARITIES
///////////////////////////////

// general correlations
100 Existence(x) ^ Existence(P) ^ Name(x,y) ^ Name(P,y) ^ y!=Unknown ^ y!=None => UnifyWith(x)
100 UnifyWith(x) ^ Name(x,y) ^ Name(P,z) => y=z
UnifyWith(x) ^ Name(x,y) => y!=Unknown. 
UnifyWith(x) ^ Name(x,y) => y!=None.

100 Existence(x) ^ Existence(P) ^ Is-in(x,y) ^ Is-in(P,y) ^ y!=Unknown ^ y!=None => UnifyWith(x)
100 UnifyWith(x) ^ Is-in(x,y) ^ Is-in(P,z) => y=z
UnifyWith(x) ^ Is-in(x,y) => y!=Unknown. 
UnifyWith(x) ^ Is-in(x,y) => y!=None. 

UnifyWith(x) => Existence(x) ^ Existence(P).


// ADD YOUR ADDITIONAL FORMULAE FOR OBJECT TRACKING HERE
///////////////////////////////
// FINAL OUTCOME
///////////////////////////////

-3.5 Existence(P) => Outcome(UM_Q)
UnifyWith(UG_Q) <=> Outcome(UG_Q).
-1.0 Outcome(x)
Outcome(x) ^ Outcome(y) => x=y.
Exist x Outcome(x).

