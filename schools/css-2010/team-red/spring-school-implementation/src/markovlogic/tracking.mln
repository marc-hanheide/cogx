///////////////////////////////
// CONSTANTS
///////////////////////////////

// beliefs
existingunion = {UG1_P,UK1_P}
percept = {P}
belief = {UG1_P,UK1_P,P}

// possible outcomes of the grouping process
outcome = {UG1_P,UK1_P,UN1_P}

// feature values
is-inval = {None,U3_p,U5_p,Unknown}
personidval = {None,Unknown,V1_g,V2_g,V3_g}
typeval = {None,Unknown}

///////////////////////////////
// PREDICATES
///////////////////////////////

Is-in(belief,is-inval)
Personid(belief,personidval)
Type(belief,typeval)

Outcome(outcome)
UnifyWith(existingunion)
Existence(belief)

///////////////////////////////
// EXISTING UNIONS
///////////////////////////////

100.0 Existence(UG1_P)
0.0 Existence(UG1_P) ^ Is-in(UG1_P,U3_p)
Existence(UG1_P) => !Is-in(UG1_P,U5_p).
Existence(UG1_P) => !Is-in(UG1_P,Unknown).
Existence(UG1_P) => !Is-in(UG1_P,None).
0.0 Existence(UG1_P) ^ Personid(UG1_P,V1_g)
Existence(UG1_P) => !Personid(UG1_P,Unknown).
Existence(UG1_P) => !Personid(UG1_P,V2_g).
Existence(UG1_P) => !Personid(UG1_P,V3_g).
Existence(UG1_P) => !Personid(UG1_P,None).
Existence(UG1_P) => !Type(Ug1_p,Unknown).
Existence(UG1_P) => Type(Ug1_p,None).

100.0 Existence(UK1_P)
0.0 Existence(UK1_P) ^ Is-in(UK1_P,U5_p)
Existence(UK1_P) => !Is-in(UK1_P,U3_p).
Existence(UK1_P) => !Is-in(UK1_P,Unknown).
Existence(UK1_P) => !Is-in(UK1_P,None).
0.0 Existence(UK1_P) ^ Personid(UK1_P,V2_g)
Existence(UK1_P) => !Personid(UK1_P,Unknown).
Existence(UK1_P) => !Personid(UK1_P,V1_g).
Existence(UK1_P) => !Personid(UK1_P,V3_g).
Existence(UK1_P) => !Personid(UK1_P,None).
Existence(UK1_P) => !Type(Uk1_p,Unknown).
Existence(UK1_P) => Type(Uk1_p,None).

///////////////////////////////
// NEW PERCEPT
///////////////////////////////

100.0 Existence(P)
0.0 Existence(P) ^ Is-in(P,U5_p)
Existence(P) => !Is-in(P,U3_p).
Existence(P) => !Is-in(P,Unknown).
Existence(P) => !Is-in(P,None).
0.0 Existence(P) ^ Personid(P,V3_g)
Existence(P) => !Personid(P,Unknown).
Existence(P) => !Personid(P,V1_g).
Existence(P) => !Personid(P,V2_g).
Existence(P) => !Personid(P,None).
Existence(P) => !Type(P,Unknown).
Existence(P) => Type(P,None).

///////////////////////////////
// FEATURE VALUE CONSTRAINTS
///////////////////////////////

// rules for existence dependency
!Existence(x) => y=None v !Is-in(x,y).
!Existence(x) => Is-in(x,None).
!Existence(x) => y=None v !Personid(x,y).
!Existence(x) => Personid(x,None).
!Existence(x) => y=None v !Type(x,y).
!Existence(x) => Type(x,None).

// mutual exclusivity and unicity constraints
Is-in(x,y) ^ Is-in(x,z) => y=z.
EXIST y Is-in(x,y).
Personid(x,y) ^ Personid(x,z) => y=z.
EXIST y Personid(x,y).
Type(x,y) ^ Type(x,z) => y=z.
EXIST y Type(x,y).


///////////////////////////////
// SIMILARITIES
///////////////////////////////

// general correlations

100 Existence(x) ^ Existence(P) ^ Is-in(x,y) ^ Is-in(P,y) ^ y!=Unknown ^ y!=None => UnifyWith(x)
100 UnifyWith(x) ^ Is-in(x,y) ^ Is-in(P,z) => y=z
UnifyWith(x) ^ Is-in(x,y) => y!=Unknown. 
UnifyWith(x) ^ Is-in(x,y) => y!=None. 

UnifyWith(x) => Existence(x) ^ Existence(P).
///////////////////////////////
// FINAL OUTCOME
///////////////////////////////

-3.5 Existence(P) => Outcome(UN1_P)
UnifyWith(UG1_P) <=> Outcome(UG1_P).
UnifyWith(UK1_P) <=> Outcome(UK1_P).
-1.0 Outcome(x)
Outcome(x) ^ Outcome(y) => x=y.
Exist x Outcome(x).

