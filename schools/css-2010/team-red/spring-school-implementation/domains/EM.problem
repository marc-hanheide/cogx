(define (problem cogxtask)

(:domain cogx)

(:objects  robot_3__q - robot
           place_3__q place_2__q place_1__q place_0__q - place
           place_id_0 place_id_3 place_id_2 place_id_1 - place_id
	   
	   object_3__q - visualobject 
	   object_id_3 - visualobject_id 
	   object_label_3 - visualobject_label

           person_2__q person_1__q person_0__q - person
           person_id_0 person_id_2 person_id_1 - person_id
           shanker patric kai - person_name
)

(:init  
 (= (label object_3__q) object_label_3)
 (= (is-in object_3__q) place_3__q)
 (= (objectid object_3__q) object_id_3)

 (= (placeid place_3__q) place_id_3)
 (= (placeid place_2__q) place_id_2)
 (= (placeid place_1__q) place_id_1)
 (= (placeid place_0__q) place_id_0)

 (= (personid person_2__q) person_id_2)
 (= (personid person_1__q) person_id_1)
 (= (personid person_0__q) person_id_0)
 
 (= (is-in robot_3__q) place_0__q)

 (= (is-in person_0__q) place_0__q)
 (= (is-in person_1__q) place_2__q)
 (= (is-in person_2__q) place_3__q)
 
 (connected place_0__q place_3__q)
 (connected place_0__q place_1__q)
 (connected place_1__q place_2__q)
 (connected place_1__q place_0__q)
 (connected place_2__q place_1__q)
 
 (= (wave1 place_3__q) yes)
 (= (wave1 place_2__q) no)
 (= (wave1 place_1__q) yes)
 (= (wave1 place_0__q) yes)

;; 	(= (wave1 ) yes)
;; 	(= (wave1 ) yes)
)

(:goal (forall (?a - agent) (goal-achieved ?a)))

;; (:goal (forall (?p - place)  (visited ?p)))

;; (:goal  (and  (forall (?p - place)  (visited ?p)) 
;; 	      (forall (?a - robot) 
;; 		      (forall (?p - person) 
;; 			      (and 
;; 				   (kval ?a (name ?p))
;; 				   )))))

;; (:goal  (and  (forall (?p - place)  (visited ?p))))
;;(:goal  (and  (forall (?p - place)  (explored ?p))))

)
