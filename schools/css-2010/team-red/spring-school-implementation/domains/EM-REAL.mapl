(define (domain cogx)
  ;; the planner domain is case insensitive, the beliefs are mixed
  ;; case, though here we only use lower case...
  (:requirements :mapl :adl :object-fluents :action-costs)
  
  (:types 
   place place_id - object
   person person_id person_name  - object
   visualobject visualobject_id visualobject_label - object
   robot - agent
   place_special - object
   )
  
  (:constants yes no - place_special)

  (:predicates
   (connected ?n1 - place ?n2 - place)

   (visited ?p - place)
;;    (visited-person ?p - place)

   (explored ?p - place)
	
   (wave1-visited ?pp - place)	
;;    (wave1-visited-person ?pp - place)	
   )	

  (:functions
   (owns-record ?h - person) - visualobject

   (is-in ?r - robot) - place
   (is-in ?h - person) - place
   (is-in ?o - visualobject) - place
   (label ?o - visualobject) - visualobject_label

   (wave1 ?p - place) - place_special

   ;; we need to model the place id as well to distinguish places from
   ;; other objects
   (placeid ?p - place) - place_id

   ;; a person can a have name feature. StringValues, IntegerValues,
   ;; and PointerValues in StableBelief are turned into funtions in
   ;; the planner, BooleanValues are turned into predicates, other
   ;; value types are not supported
   (name ?h - person) - person_name

;;    (name ?h - room) - person_name

   ;; we also need the id of the persons and objects as unique identifier here
   (personid ?h - person) - person_id
   (objectid ?h - visualobject) - visualobject_id
   )
  
;;; actions ;;;

  (:action move
	   :agent (?a - robot)
	   :parameters (?to - place)
	   :variables (?from - place)
	   :precondition (and
;; 			  (or (not (=  (wave1 ?to) yes)) (not (visited ?to)))
			  ;; (or (not (=  (wave1 ?to) yes)) )

			  
			  (or (forall (?pp - place) 
				  (or (not (= (wave1 ?pp) yes)) (wave1-visited ?pp)))
			      (=  (wave1 ?to) yes))

			  (not (visited ?to))

			  (= (is-in ?a) ?from)
			  (or (connected ?from ?to)
			      (connected ?to ?from))
			  
			  (or (not (=  (wave1 ?from) yes)) (visited ?from))
			  )
	   :effect (and

		    (assign (is-in ?a) ?to)
;; 		    (visited ?to)
;; 		    (update (visited ?to) true)
		    ))

  (:action move-rough
	   :agent (?a - robot)
	   :parameters (?to - place)
	   :variables (?from - place)
	   :precondition (and

			  (not (and (or (forall (?pp - place) 
						(or (not (= (wave1 ?pp) yes)) (wave1-visited ?pp)))
					(=  (wave1 ?to) yes))
				    
				    (not (visited ?to))))


			  (= (is-in ?a) ?from)
			  (or (connected ?from ?to)
			      (connected ?to ?from))
			  (or (not (=  (wave1 ?from) yes)) (visited ?from))
			  )
	   :effect (and
		    (assign (is-in ?a) ?to)
;; 		    (visited ?to)
;; 		    (update (visited ?to) true)
		    ))


;;   (:action thingi-action
;; 	   :agent (?a - robot)
;; 	   :variables (?p - place)
;; 	   :precondition (and 
;; 			  (not (visited-person ?p))
			  
			  
;; ;; 			  (forall (?pp - place) 
;; ;; 				  (or (not (= (wave1 ?pp) yes)) (wave1-visited-person ?pp)))

;; 			  )
;; 	   :effect (and (visited-person ?p) (update (visited-person ?p) true)))

;;   (:action look-for-people-first
;; 	   :agent (?a - robot)
;; 	   :parameters (?p - place)
;; 	   :precondition (and 
			  
;; 			  (not (visited-person ?p))

;; 			  (= (wave1 ?p) yes)

;; 			  (= (is-in ?a) ?p))
;; 	   :effect (and
		    
;; 		    (wave1-visited-person ?p)
;; 		    (update (wave1-visited-person ?p) true)
;; 		    (visited-person ?p)	
;; 		    (update (visited-person ?p) true) )

;; ;; 		    (explored ?p)
;; ;; 		    (update (explored ?p) true)

;; 		    )

;;   (:action look-for-people-second
;; 	   :agent (?a - robot)
;; 	   :parameters (?p - place)
;; 	   :precondition (and 
			  
;; 			  (not (visited-person ?p))

;; 			  (forall (?pp - place) 
;; 				  (or (not (= (wave1 ?pp) yes)) (wave1-visited-person ?pp)))

;; 			  (= (wave1 ?p) no)


;; 			  (= (is-in ?a) ?p))
;; 	   :effect (and
;; 		    (visited-person ?p)	
;; 		    (update (visited-person ?p) true) )
;; ;; 		    (explored ?p)
;; ;; 		    (update (explored ?p) true)
;; 		    )
	 


  (:action ask-for-your-name
	   :agent (?a - robot)
	   :parameters (?p - person)
	   :variables (?loc - place)
	   :precondition (and
			  (= (is-in ?a) ?loc)
			  (= (is-in ?p) ?loc)
			  )
	   :effect
	   (kval ?a (name ?p))
	   )

  
   (:action ask-for-your-record
	   :agent (?a - robot)
	   :parameters (?p - person)
	   :variables (?loc - place)
	   :precondition (and
			  (= (is-in ?a) ?loc)
			  (= (is-in ?p) ?loc)
			  )
	   :effect
	   (kval ?a (owns-record ?p))
	   )


;;   (:action ask-for-place-name
;; 	   :agent (?a - robot)
;; 	   :parameters (?p - person)
;; 	   :variables (?loc - place)
;; 	   :precondition (and
;; 			  (= (is-in ?a) ?loc)
;; 			  (= (is-in ?p) ?loc)
;; 			  )
;; 	   :effect
;; 	   (kval ?a (name ?loc))
;; 	   )

;;   (:action commit-name
;; 	   :agent (?a - robot)
;; 	   :parameters (?p - person ?n - person_name)
;; 	   :precondition (and
;; 			  (in-domain (name ?p) ?n)
;; 			  )
;; 	   :replan (kval ?a (name ?p))
;; 	   :effect
;; 	   (assign (name ?p) ?n)
;; 	   )

  
  (:action look-for-objects-and-people-wave1
	   :agent (?a - robot)
	   :parameters (?p - place)
	   :precondition (and

			  
			  (not (visited ?p))

			  (= (wave1 ?p) yes)

			  (= (is-in ?a) ?p)
			  )
	   :effect (and
		    (wave1-visited ?p)
		    (update (wave1-visited ?p) true)

		    (visited ?p)	
		    (update (visited ?p) true)))
  
  (:action look-for-objects-and-people-wave2
	   :agent (?a - robot)
	   :parameters (?p - place)
	   :precondition (and

			  
			  (not (visited ?p))

			  
			  (forall (?pp - place) 
				  (or (not (= (wave1 ?pp) yes)) (wave1-visited ?pp)))

			  (= (wave1 ?p) no)

			  (= (is-in ?a) ?p)
			  )
	   :effect (and

		    (visited ?p)	
		    (update (visited ?p) true)))
  

;;   (:action cheap-look-for-objects
;; 	   :agent (?a - robot)
;; 	   :parameters (?to - place)
;; 	   :precondition (and

;; 			  (visited-person ?to)
;; 			  (not (visited ?to))
;; 			  (= (is-in ?a) ?to)
;; 			  (= (wave1 ?to) yes)
;; 			  )
;; 	   :effect (and
;; 		    (wave1-visited ?to)
;; 		    (update (wave1-visited ?to) true)
;; 		    (visited ?to)	
;; 		    (update (visited ?to) true) ))

	
;;   (:action expensive-look-for-objects
;; 	   :agent (?a - robot)
;; 	   :parameters (?to - place)
;; 	   :precondition (and
;; 			  (visited-person ?to)

;; 			  (forall (?pp - place) 
;; 				  (or (not (= (wave1 ?pp) yes)) (wave1-visited ?pp)))

;; 			  (= (wave1 ?to) no)
;; 			  (not (visited ?to))
;; 			  (= (is-in ?a) ?to)

;; 			  )
;; 	   :effect (and
;; 		    (visited ?to)	
;; 		    (update (visited ?to) true) ))

  )


