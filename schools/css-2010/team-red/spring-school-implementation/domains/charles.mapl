(define (domain cogx)

	(:requirements :mapl :adl :object-fluents)
	
	(:types 
		place place_id - object
		robot - agent
	)
	
    (:predicates
		(connected ?n1 - place ?n2 - place)
		(visited ?p - place)
    )	

	(:functions
        (is-in ?r - robot) - place
        (placeid ?p - place) - place_id
 	)
	
;;; actions ;;;

	(:action move
	 :agent (?a - robot)
	 :parameters (?to - place)
	 :variables (?from - place)
	 :precondition (and
		(= (is-in ?a) ?from)
        (or (connected ?from ?to)
            (connected ?to ?from))
		)
	 :effect (and
		(assign (is-in ?a) ?to)
	))

	(:action look-for-object
	 :agent (?a - robot)
	 :parameters (?to - place)
	 :precondition (and
		(= (is-in ?a) ?to)
		)
	 :effect (and
		  (visited ?to)	
		  (update (visited ?to) true) ))

)

;; goal: (forall (?p - place) (visited ?p))

