(define (domain cogx)

(:requirements :mapl :adl :object-fluents)

(:types
        place recordname - object
        robot - agent
        robot visualobject - movable
)

;;; ======================================================================================
;;; PREDICATES
;;; ----------
;;; connected:  asserts that there is a directed connected from place ?n1 to place ?n2
;;; visited:    asserts whether a place has been visited
;;; searched:   asserts whether a place has been searched for objects
;;; ======================================================================================

(:predicates
	(finished ?r - robot)
        (object-report-pending ?p - place ?v - visualobject)
        (connected ?n1 - place ?n2 - place)
	(visited1 ?p - place)
	(visited2 ?p - place)
        (searched1 ?p - place)
        (searched2 ?p - place)
        (detected ?v - visualobject)
        (endnode ?p - place)
        (located ?p - place ?v - visualobject)
)

;;; ======================================================================================
;;; FUNCTIONS
;;; functions can be updated, and as such yield a belief in the belief model on the binder
;;; ------------
;;; is-in:      records the robot's current position (place)
;;; ======================================================================================

(:functions
        (is-in ?r - movable) - place
        (label ?l - visualobject) - recordname
)

;;; ======================================================================================   
;;; ACTIONS
;;; ------------
;;; move:       takes the robot from a place (?from) to a given goal place (?to), marking
;;;             the goal place as visited. visited is assigned true, and updated to true.
;;; look-for-objects:   given that the robot is in a place, the action performs a look-for-objects
;;;             action in that place, and marks and updates the place as searched.
;;; ======================================================================================   

;;; (not (visited2 ?to))
(:action move
         :agent         (?a - robot)
         :parameters    (?to - place)
         :variables     (?from - place)
         :precondition  (and
                        (= (is-in ?a) ?from)
                        (or (connected ?from ?to)
                        (connected ?to ?from))
			(not (exists (?p - place ?v - visualobject) (object-report-pending ?p ?v)))
                        )
         :effect        (and
                        (assign (is-in ?a) ?to)
			(when (visited1 ?to)
			      (and
				(visited2 ?to)
				(update (visited2 ?to) true)
			      )
			)
                        (visited1 ?to)
                        (update (visited1 ?to) true)
			(not (searched1 ?to))
                        (update (searched1 ?to) false)
                        )
) ;;; end move

(:action look-for-objects
         :agent         (?a - robot)
         :variables     (?p - place)
         :precondition  (and
                        (= (is-in ?a) ?p)
                        (endnode ?p)
                        )
         :effect        (and
			(when (searched1 ?p)
                              (and
                                (searched2 ?p)
                                (update (searched2 ?p) true)
                              )
                        )
                        (searched1 ?p)
                        (update (searched1 ?p) true)
			(forall (?v - visualobject)
				(and
				(object-report-pending ?p ?v)
                        	(update (object-report-pending ?p ?v) true)
				)
                        )
			)
) ;;; look-for-objects

(:action detect-objects
	 :agent		(?a - robot)
         :variables     (?p - place)
         :precondition  (and
                        (= (is-in ?a) ?p)
                        (not (endnode ?p))
                        )
         :effect        (and
 			(when (searched1 ?p)
                              (and
                                (searched2 ?p)
                                (update (searched2 ?p) true)
                              )
                        )
                        (searched1 ?p)
                        (update (searched1 ?p) true)
                        (forall (?v - visualobject)
                                (and
                                (object-report-pending ?p ?v)
                                (update (object-report-pending ?p ?v) true)
                                )
                        )
			)
) ;;; detect-object

(:action report-object
        :agent          (?a - robot)
        :parameters     (?p - place ?l - recordname)
	:variables	(?v - visualobject)
        :precondition   (and
				(= (label ?v) ?l)
				(object-report-pending ?p ?v)
				(not (located ?p ?v))
			)
        :effect         (and
			   (located ?p ?v)
			   (update (located ?p ?v) true)
                           (not (object-report-pending ?p ?v))
                           (update (object-report-pending ?p ?v) false)
                        )
) ;;; end report-object

(:action report-nothing
	:agent		(?a - robot)
	:variables	(?p - place ?v - visualobject)
	:precondition	(and
			  (object-report-pending ?p ?v)
			  (located ?p ?v) 
			)
	:effect		(and
                           (not (object-report-pending ?p ?v))
                           (update (object-report-pending ?p ?v) false)
                        )
) ;;; end report-nothing

(:action report-finished
	:agent		(?a - robot)
	:precondition	(and
				(not (exists (?p - place ?v - visualobject) (object-report-pending ?p ?v)))
				(or
				(and (forall (?p - place) (searched1 ?p))
				     (forall (?p - place)
						(or
						   (and (endnode ?p) (visited1 ?p))
						   (and (not (endnode ?p)) (visited2 ?p))
						)
				     )
				)
				(exists (?v1 ?v2 ?v3 - visualobject ?l1 ?l2 ?l3 - recordname)
					(and 
						(= (label ?v1) ?l1) (= (label ?v2) ?l2) (= (label ?v3) ?l3) 
						(exists (?p1 - place) (located ?p1 ?v1))
						(exists (?p2 - place) (located ?p2 ?v2))
						(exists (?p3 - place) (located ?p3 ?v3))
						(not (= ?l1 ?l2)) (not (= ?l3 ?l2)) (not (= ?l1 ?l3))
					)
				)
				)
			)
	:effect		(and
				(finished ?a)
				(update (finished ?a) true)
			)
) ;;; end report-finished

) ;;; end domain

