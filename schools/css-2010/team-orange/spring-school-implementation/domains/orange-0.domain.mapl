;;; ======================================================================================
;;; DOMAIN for the ORANGE team (gj@dfki.de)
;;;
;;; This domain can be tested with the following goals, using [ move1.problem.mapl ] 
;;; 
;;; * move to place p4 -- (:goal (= (is-in dora) p4))
;;; * visit all places -- (:goal (forall (?p - place) (= (visited ?p) true) ))
;;; * look for objects in all places -- (:goal (forall (?p - place) (= (searched ?p) true) ))
;;;
;;; ======================================================================================

(define (domain cogx)

(:requirements :mapl :adl :object-fluents)
	
(:types 
	place - object
	robot - agent
	robot - movable
)
	
;;; ======================================================================================
;;; PREDICATES
;;; ----------
;;; connected:	asserts that there is a directed connected from place ?n1 to place ?n2
;;; ======================================================================================

(:predicates
	(connected ?n1 - place ?n2 - place)
)	
;;; ======================================================================================
;;; FUNCTIONS
;;; functions can be updated, and as such yield a belief in the belief model on the binder
;;; ------------
;;; is-in:	records the robot's current position (place)
;;; visited: 	records whether a place has been visited (boolean)
;;; searched:	records whether a place has been searched for objects (boolean)
;;; ======================================================================================

(:functions
	(is-in ?r - robot) - place
	(visited ?p - place) - boolean 	
	(searched ?p - place) - boolean
	(located ?p - object) - place
)

;;; ======================================================================================	
;;; ACTIONS
;;; ------------
;;; move:	takes the robot from a place (?from) to a given goal place (?to), marking 
;;; 		the goal place as visited. visited is assigned true, and updated to true.
;;; look-for-objects:	given that the robot is in a place, the action performs a look-for-objects
;;; 		action in that place, and marks and updates the place as searched.  	
;;; ======================================================================================	

(:action move
	 :agent		(?a - robot)
	 :parameters 	(?to - place)
	 :variables 	(?from - place)
	 :precondition 	(and
			(= (is-in ?a) ?from)
			(or (connected ?from ?to)
			(connected ?to ?from))
			)
	 :effect 	(and
			(assign (is-in ?a) ?to)
			(assign (visited ?to) true)
			(update (visited ?to) true)
			)
) ;;; end move

(:action look-for-object
	 :agent		(?a - robot)
	 :variables	(?p - place)
	 :precondition	(and 
	 		(= (is-in ?a) ?p)
			)
	 :effect	(and
	 	 	(assign (searched ?p) true)
	 	 	(update (searched ?p) true)			
			)
) ;;; look-for-object













) ;;; end domain
