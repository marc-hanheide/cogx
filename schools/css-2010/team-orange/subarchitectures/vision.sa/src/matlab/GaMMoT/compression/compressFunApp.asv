function f0 = compressFunApp( f1, f2 )
%
% Matej Kristan (2007)
%
% ------------------------------------
% Compresses a mixture of Gaussians.
% ------------------------------------
% Input:
% f1   ... Input distribution. Structure:
%           f1.mu          ... row vector of mean values
%           f1.covariances ... column vector of covariances
%           f1.weights     ... row vector of weights
% varargin:
%   'showIntermediate' ...  Toggle visualization (0,1).

% Output:
% f0   ... Output distribution. Structure same as f1. 
%

global fignum ;
fignum = 1 ;

disp(' ') ;
disp('-------------------------------------------------------------')
disp('Compressing distributions...') ;
disp('-------------------------------------------------------------'); 
disp(' ') ;
maxItFitting = 20 ;         % maximum cycles of fitt-remove iterations
maxLMFitIterations = 15 ;   % maximum number of fine-fitting iterations
in_maxLMFitIterations = 5 ; % maximal number of intermediate fitting iterations
showIntermediate = 0 ;      % toggle visualizations
gradient = 1 ;              % use LevenbergMarquadt with gradient descent (1) or least squares (2)
finely_refit = 1 ;          % perform multiple iterations of fine-fitting at the end

pruning = 'SMO' ;

% calculate scale of the input distribution
[scale shift] = getScaleOfDistribution( f1 ) ;
% rescale the distribution

f1 = rescaleDistribution( f1, scale, shift, 'forward' ) ;
f0 = rescaleDistribution( f2, scale, shift, 'forward' ) ;
f0 = removeUnits( f0, f_ref, 2 ) ;  

f0 = refitGaussianMixtureFunApprox( f0, f_ref ) ;

return





counter = 0 ;
init_num_modes = cols(f0.mu) ;
init_num_modes0 = init_num_modes ;
sw = 0 ;
 

% remove some units
[f0,alpha]= removeUnits( f0, f0, scale_var ) ;
[f0,alpha] = removeUnits( pruning, f0, f0, f_ref_data_X, f_ref_data_Y ) ;
for i = 1 : maxItFitting
    counter = counter + 1 ;
    
    % --- begin compression step --- 
    % refit parameters 
%     tic
    disp('Fitting parameters...') ; 
    f0 = refitGaussianMixture( f1, varargin{:},...
        'showIntermediate', showIntermediate, ...
        'opt_weights',1, 'maxIterations', in_maxLMFitIterations, 'f_init', f0, 'gradient', gradient ) ;
%     toc

%    f0 = UEM( f1, f0, 'maxIterations' , 15 ) ;

  % figure(3);  clf; plot(f1.weights); hold on ; plot(f0.weights,'--r')    
    % remove components weights
    disp('Removing components...') ;
    [f0,alpha] = removeUnits( pruning, f0, f0, f_ref_data_X, f_ref_data_Y ) ;
    % --- end compression step --- 

    if ( showIntermediate == 1 )
        showme(f0) ;
        figure(2); clf; plot(alpha) ; title('Recomputed weights. Zero weights will be removed') ;
    end

    curr_num_modes = length(f0.weights) ;
    reportInt(init_num_modes0, init_num_modes, curr_num_modes) ;
    if ( init_num_modes == curr_num_modes) 
        break ;
       if ( sw == 1 ) break ; else sw = 1 ; end
    else
        sw = 0 ;
    end
        
    init_num_modes = curr_num_modes ;
end

% % remove components weights     
if ( finely_refit == 1 ) 
   %  maxItFitting = 80 
   gradient = 0 ;
    disp('Fine-fitting parameters...') ; %   gradient = 1 ;
    f0 = refitGaussianMixture( f1, varargin{:},...
        'showIntermediate', showIntermediate, ...
        'opt_weights',1, 'maxIterations', 3, 'f_init', f0, 'gradient', gradient ) ;
    gradient = 1 ;
 %   maxItFitting = 80 
    f0 = refitGaussianMixture( f1, varargin{:},...
        'showIntermediate', showIntermediate, ...
        'opt_weights',1, 'maxIterations', maxItFitting, 'f_init', f0, 'gradient', gradient ) ;
%     [f0,alpha] = removeUnits( 'SMO', f0, f1, f_ref_data_X, f_ref_data_Y ) ;
%     curr_num_modes = length(f0.weights) ;
    disp('Finished!')
end

% rescale the distribution
f0 = rescaleDistribution( f0, scale, shift, 'backward' ) ;

% report results
reportFin(maxItFitting, counter, init_num_modes0, curr_num_modes) ;
% ----------------------------------------------------------------------- %
function f0 = removeUnits( f0, f_ref, scale_var )
%scale_var = 2 ; 4 ; % 1.5^2 ;
fx = f0 ;
fx.covariances = fx.covariances*scale_var ;
alpha = optimizeWeights( f_ref, fx ) ;
f0 = pruneMixture( f0, alpha ) ;

% ----------------------------------------------------------------------- %
function showPdfNow(f1_mix, X, Y)
global showInterm fignum;

%if showInterm ~= 1 return ; end
figure(fignum); hold on ; 

b1 = sqrt(max([f1_mix.covariances])) ;
bmin = min([f1_mix.mu]) - b1*5 ;
bmax = max([f1_mix.mu]) + b1*5 ;
bounds = [bmin,bmax] ;
%bounds = [-4, 40] ;
showPdf( bounds, 100, f1_mix.mu, f1_mix.covariances, f1_mix.weights, '--k' ) ;
plot(X, Y, 'ok') ; title('Current optimization result.')
drawnow ;

% ----------------------------------------------------------------------- %
function reportInt(init_num_modes0, init_num_modes, curr_num_modes)

disp(' ') ;
msg = sprintf('Components removed: %d', init_num_modes-curr_num_modes ) ; 
disp(msg) ;
msg = sprintf('Current number of components: %d (of initial %d)', curr_num_modes, init_num_modes0) ; 
disp(msg) ;

% ----------------------------------------------------------------------- %
function reportFin(maxItFitting, counter, init_num_modes0, curr_num_modes)

disp(' ')
disp('-----  ') ;
msg = sprintf('Compression finished in %d iterations.', counter ) ; 
msg = sprintf('Number of components remaining: %d (of initial %d)', curr_num_modes, init_num_modes0) ; 
disp(msg) ; disp('-----  ') ;

% ----------------------------------------------------------------------- %
function f = pruneMixture( f, alpha )

id = find(alpha>0) ;
f.weights = alpha(id)'; 
% f.weights = f.weights(id)/sum(f.weights(id)) ;
f.mu = f.mu(:,id) ;
f.covariances = f.covariances(id,:) ;


% ----------------------------------------------------------------------- %
function showme(f1_mix)
global showInterm fignum;

if showInterm ~= 1 return ; end
figure(fignum);  hold on ;
b1 = sqrt(max([f1_mix.covariances])) ;
bmin = min([f1_mix.mu]) - b1*5 ;
bmax = max([f1_mix.mu]) + b1*5 ;
bounds = [bmin,bmax] ;
showPdf( bounds, 100, f1_mix.mu, f1_mix.covariances, f1_mix.weights, 'b' ) ;
drawnow ;

% ----------------------------------------------------------------------- %
function y_evals = showPdf( bounds, N,centers, covariances, weights, color )
x_evals = [bounds(1):abs(diff(bounds))/N:bounds(2)] ;
y_evals = evaluateDistributionAt( centers, weights, covariances, x_evals ) ;
plot ( x_evals, y_evals, color )