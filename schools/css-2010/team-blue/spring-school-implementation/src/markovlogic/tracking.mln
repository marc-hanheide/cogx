///////////////////////////////
// CONSTANTS
///////////////////////////////

// beliefs
existingunion = {Uo_R}
percept = {P}
belief = {Uo_R,P}

// possible outcomes of the grouping process
outcome = {Uo_R,Ur_R}

// feature values
is-inval = {None,U2_r,U5_r,Unknown}
labelval = {None,Unknown,Vjames,Vjesusjones}
typeval = {None,Unknown}
visualobjectidval = {None,Unknown,V64_g,Vel_g}

///////////////////////////////
// PREDICATES
///////////////////////////////

Is-in(belief,is-inval)
Label(belief,labelval)
Type(belief,typeval)
Visualobjectid(belief,visualobjectidval)

Outcome(outcome)
UnifyWith(existingunion)
Existence(belief)

///////////////////////////////
// EXISTING UNIONS
///////////////////////////////

100.0 Existence(Uo_R)
0.0 Existence(Uo_R) ^ Visualobjectid(Uo_R,V64_g)
Existence(Uo_R) => !Visualobjectid(Uo_R,Unknown).
Existence(Uo_R) => !Visualobjectid(Uo_R,Vel_g).
Existence(Uo_R) => !Visualobjectid(Uo_R,None).
0.0 Existence(Uo_R) ^ Is-in(Uo_R,U5_r)
Existence(Uo_R) => !Is-in(Uo_R,U2_r).
Existence(Uo_R) => !Is-in(Uo_R,Unknown).
Existence(Uo_R) => !Is-in(Uo_R,None).
0.0 Existence(Uo_R) ^ Label(Uo_R,Vjames)
Existence(Uo_R) => !Label(Uo_R,Unknown).
Existence(Uo_R) => !Label(Uo_R,Vjesusjones).
Existence(Uo_R) => !Label(Uo_R,None).
Existence(Uo_R) => !Type(Uo_r,Unknown).
Existence(Uo_R) => Type(Uo_r,None).

///////////////////////////////
// NEW PERCEPT
///////////////////////////////

100.0 Existence(P)
0.0 Existence(P) ^ Is-in(P,U2_r)
Existence(P) => !Is-in(P,U5_r).
Existence(P) => !Is-in(P,Unknown).
Existence(P) => !Is-in(P,None).
0.0 Existence(P) ^ Visualobjectid(P,Vel_g)
Existence(P) => !Visualobjectid(P,Unknown).
Existence(P) => !Visualobjectid(P,V64_g).
Existence(P) => !Visualobjectid(P,None).
0.0 Existence(P) ^ Label(P,Vjesusjones)
Existence(P) => !Label(P,Unknown).
Existence(P) => !Label(P,Vjames).
Existence(P) => !Label(P,None).
Existence(P) => !Type(P,Unknown).
Existence(P) => Type(P,None).

///////////////////////////////
// FEATURE VALUE CONSTRAINTS
///////////////////////////////

// rules for existence dependency
!Existence(x) => y=None v !Is-in(x,y).
!Existence(x) => Is-in(x,None).
!Existence(x) => y=None v !Label(x,y).
!Existence(x) => Label(x,None).
!Existence(x) => y=None v !Type(x,y).
!Existence(x) => Type(x,None).
!Existence(x) => y=None v !Visualobjectid(x,y).
!Existence(x) => Visualobjectid(x,None).

// mutual exclusivity and unicity constraints
Is-in(x,y) ^ Is-in(x,z) => y=z.
EXIST y Is-in(x,y).
Label(x,y) ^ Label(x,z) => y=z.
EXIST y Label(x,y).
Type(x,y) ^ Type(x,z) => y=z.
EXIST y Type(x,y).
Visualobjectid(x,y) ^ Visualobjectid(x,z) => y=z.
EXIST y Visualobjectid(x,y).


///////////////////////////////
// SIMILARITIES
///////////////////////////////

// general correlations

100 Existence(x) ^ Existence(P) ^ Label(x, t) ^ Label(P, t) ^ t!=Unknown ^ t!=None=> UnifyWith(x)
100 Existence(x) ^ Existence(P) ^ Is-in(x, t) ^ Is-in(P, t) ^ t=Unknown ^ t!=None=> UnifyWith(x)

UnifyWith(x) ^ Label(x,t1) ^ Label(P,t2) => t1=t2.

UnifyWith(x) ^ Label(x,t) => t!=Unknown. 
UnifyWith(x) ^ Label(x,t) => t!=None.

UnifyWith(x) => Existence(x) ^ Existence(P).


// ADD YOUR ADDITIONAL FORMULAE FOR OBJECT TRACKING HERE
///////////////////////////////
// FINAL OUTCOME
///////////////////////////////

-3.5 Existence(P) => Outcome(Ur_R)
UnifyWith(Uo_R) <=> Outcome(Uo_R).
-1.0 Outcome(x)
Outcome(x) ^ Outcome(y) => x=y.
Exist x Outcome(x).

