(define (domain cogx)

	(:requirements :mapl :adl :object-fluents)
	
	(:types 
		place - object
		robot - agent
	)
	
    (:predicates
		(connected ?n1 - place ?n2 - place)
		(visited ?p - place)
    )	

	(:functions
        (is-in ?r - robot) - place
 	)
	
;;; actions ;;;

	(:action move
	 :agent (?a - robot)
	 :parameters (?to - place)
	 :variables (?from - place)
	 :precondition (and
		(= (is-in ?a) ?from)
        (or (connected ?from ?to)
            (connected ?to ?from))
		)
	 :effect (and
		(assign (is-in ?a) ?to)
                (visited ?to)
		(update (visited ?to) true)
	))

)
