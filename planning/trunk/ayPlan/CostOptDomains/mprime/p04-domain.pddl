(define (domain mystery-prime-strips)
(:requirements :typing :action-costs)
 (:types block)
 
   (:predicates
       (province ?x - block )
       (planet ?x - block )
       (food ?x - block )
       (pleasure ?x - block )
       (pain ?x - block )
       (eats ?n1 - block  ?n2 - block )
       (craves ?v - block  ?n - block )
       (fears ?c - block  ?v - block )
       (locale ?n - block  ?a - block )
       (harmony ?v - block  ?s - block )
       (attacks ?i - block  ?j - block )
       (orbits ?i - block  ?j - block ))

 
 (:functions
     (total-cost) - number
  )


   (:action overcome
       :parameters (?c - block  ?v - block  ?n - block  ?s1 - block  ?s2 - block )
       :precondition (and (pain ?c)
			  (pleasure ?v)
			  (craves ?c ?n)
                          (craves ?v ?n)
			  (food ?n)
                          (harmony ?v ?s2)
			  (planet ?s2)
			  (orbits ?s1 ?s2)
                          (planet ?s1))
       :effect (and (not (craves ?c ?n))
                    (fears ?c ?v)
                    (not (harmony ?v ?s2))
                    (harmony ?v ?s1)
                    (increase (total-cost) 1)
                    )
                    
                    )
   (:action feast
       :parameters (?v - block  ?n1 - block  ?n2 - block  ?l1 - block  ?l2 - block )
       :precondition (and (craves ?v ?n1)
			  (food ?n1)
			  (pleasure ?v)
                          (eats ?n1 ?n2)
			  (food ?n2)
                          (locale ?n1 ?l2)
                          (attacks ?l1 ?l2))
       :effect (and (not (craves ?v ?n1))
                    (craves ?v ?n2)
                    (not (locale ?n1 ?l2))
                    (locale ?n1 ?l1)
                    (increase (total-cost) 1))
                    )
   (:action succumb
       :parameters (?c - block  ?v - block  ?n - block  ?s1 - block  ?s2 - block )
       :precondition (and (fears ?c ?v)
			  (pain ?c)
			  (pleasure ?v)
                          (craves ?v ?n)
			  (food ?n)
			  (harmony ?v ?s1)
                          (orbits ?s1 ?s2))
       :effect (and (not (fears ?c ?v))
                    (craves ?c ?n)
                    (not (harmony ?v ?s1))
                    (harmony ?v ?s2)
                    (increase (total-cost) 1))
                    )
   (:action drink
      :parameters (?n1 - block  ?n2 - block  ?l11 - block  ?l12 - block  ?l13 - block  ?l21 - block  ?l22 - block )
      :precondition (and (not (= ?n1 ?n2)) ; MALTE: fix
                         (locale ?n1 ?l11)
                         (attacks ?l12 ?l11)
                         (attacks ?l13 ?l12)
                         (locale ?n2 ?l21)
                         (attacks ?l21 ?l22))
      :effect (and (not (locale ?n1 ?l11))
                   (locale ?n1 ?l12)
                   (not (locale ?n2 ?l21))
                   (locale ?n2 ?l22)
                   (increase (total-cost) 1))
                   )
                   )


