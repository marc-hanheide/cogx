// Copyright (c) 2008 National ICT Australia Limited (NICTA)
//
// Author: Charles Gretton (charles.gretton@nicta.com.au)
//
// Redistribution and use in source and binary forms, with or without
// modification and only for non-commercial research and educational
// purposes are permitted provided that the conditions in the
// accompanying file "licence.txt" are met.
#line 2 "pddl+lex.cc"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <fstream>
using std::istream;
using std::ostream;
#ifndef _WIN32
#include <unistd.h>
#endif

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif


/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 106
#define YY_END_OF_BUFFER 107
static yyconst short int yy_accept[695] =
    {   0,
      104,  104,  107,  106,  101,  103,  106,    1,    2,   91,
       89,   90,   92,  104,   98,  106,   95,   62,   93,   97,
        3,    4,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  101,   70,  104,
      105,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  102,
       96,   94,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,   50,  100,  100,  100,  100,  100,  100,  100,  100,
      105,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  100,   49,  100,    0,    0,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
       54,  100,  100,  100,  100,  100,  100,  100,  100,  100,
        0,    8,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  100,  100,    0,   99,    0,    0,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,

      100,  100,  100,  100,  100,  100,  100,  100,  100,   55,
      100,   73,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   61,   60,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   16,    0,    0,    0,  100,
      100,   99,    0,    0,  100,  100,  100,  100,  100,  100,
      100,  100,  100,   53,  100,  100,  100,  100,    0,  100,
      100,  100,  100,  100,  100,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   33,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,   22,
        0,    0,   80,   78,   99,   42,    0,  100,  100,   29,
       30,  100,   56,   51,   52,  100,  100,  100,  100,  100,
      100,    0,  100,  100,  100,  100,  100,   82,   31,    0,
        0,    0,    0,    0,    0,   58,    0,   44,    0,    0,
        0,    0,    0,    0,    0,    0,   63,   66,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   64,    0,
        7,    0,    9,    0,  100,    0,  100,  100,  100,  100,
      100,  100,  100,  100,  100,    0,  100,   57,  100,  100,
      100,  100,    0,    0,    0,    0,   35,    0,    0,    0,

        0,    0,    0,    0,   15,    0,    0,    0,    0,   59,
        0,    0,    0,    0,    0,   32,    0,    0,    0,    0,
        0,  100,   41,  100,   75,   71,  100,  100,   74,  100,
       68,   67,   43,  100,  100,   76,   81,  100,    0,    0,
        0,    0,    0,    0,   48,    0,    0,    6,    0,    0,
        0,    0,    0,    0,   65,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  100,  100,  100,  100,  100,  100,
      100,  100,  100,   38,   19,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   21,    0,   47,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  100,  100,   88,

      100,  100,   79,   77,  100,  100,   72,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   36,
        0,   20,    0,    0,    0,    0,    0,    0,  100,  100,
       87,   69,  100,  100,    0,   18,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   17,    0,    0,
        0,    0,    0,  100,   83,  100,  100,    0,    0,    0,
        0,    0,    0,    0,    0,   46,    0,    0,   37,    0,
        5,    0,    0,    0,   86,  100,  100,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   84,  100,    0,    0,    0,    0,    0,    0,    0,

        0,   45,    0,    0,    0,    0,    0,   85,    0,    0,
        0,    0,    0,   34,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   23,   40,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   25,   27,    0,    0,
        0,    0,    0,   39,    0,    0,   14,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   24,    0,    0,    0,    0,    0,    0,    0,
       26,    0,   28,    0,    0,    0,    0,   12,    0,    0,
       13,   10,   11,    0

    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    1,    5,    1,    1,    1,    1,    6,
        7,    8,    9,    1,   10,   11,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   14,   15,   16,
       17,   18,   19,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   22,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       20,    1,   21,    1,   22,    1,   23,   24,   25,   26,

       27,   28,   29,   30,   31,   32,   22,   33,   34,   35,
       36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
       46,   47,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[48] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2
    } ;

static yyconst short int yy_base[698] =
    {   0,
        0,  960, 1000, 1002,   46, 1002,  958, 1002, 1002, 1002,
     1002,  985, 1002,   38,   29,  994,  979, 1002,  978, 1002,
     1002, 1002,   62,   63,   64,   68,   69,   73,   77,   79,
       84,   75,  106,  111,  112,  113,  118,   57, 1002,   82,
      981,   82,  957,  110,  122,   96,  956,  956,  963,  962,
      961,  963,  112,  944,  958,   74,  109,  949,  980, 1002,
     1002, 1002,    0,  120,  129,  143,  148,  162,  149,  158,
      166,  168,  170,  172,  174,  176,  181,  180,  185,  186,
      187,  202,  204,  206,  212,  210,  214,  216,  224,  226,
      969,  940,  947,  944,  939,  937,  942,  936,  946,  947,

      930,  944,  939,  934,  926,  932,  943,  207,  930,  923,
      934,  930,  922,  205,  937,  921,  919,  179,  923,  919,
      924,  235,  236,  241,  257,  264,  920,  243,  263,  265,
      270,  271,  276,  277,  282,  286,  292,  910,  293,  297,
      299,  301,  305,  310,  312,  316,  325,  317,  326,  331,
      921, 1002,  306,  920,  918,  926,  925,  920,  936,  922,
      909,  903,  919,  914,  915,  906,  897,  914,  907,  896,
      911,  906,  909,  325,  906,  895,  887,  897,  888,  895,
      898,   53,  881,  344,  349,  910,  121,  887,  880,  884,
      350,  351,  356,  355,  357,  361,  362,  363,  369,  370,

      888,  375,  379,  390,  391,  395,  397,  401,  406,  407,
      412,  413,  882,  886,  875,  884,  871,  871,  881,  870,
      885,  872,  875,  866,  865,  872,  869,  862, 1002,  871,
      862,  859,  868,  857,  872,  170,  860,  864,  867,  866,
      851,  860,  867,  848,  851,  861,  846,  850,  857,  417,
      419,  870,  856,  858,  840,  421,  423,  425,  427,  435,
      436,  442,  430,  449,  454,  843,  453,  455,  855,  459,
      460,  468,  469,  470,  475,  842,  835,  224,  840,  847,
      838,  837,  840,  829,  830,  837, 1002,  840,  856,  824,
      833,  840,  831,  831,  835,  828,  817,  824,  829,  820,

      829,  814,  812,  820,  811,  816,  838,  807,  836, 1002,
      816,  805,  479,  480,  830, 1002,  803,  800,  481,  486,
      491,  492,  493,  498,  499,  812,  797,  503,  805,  504,
      505,  804,  509,  510,  243,  514,  795,  516, 1002,  804,
      799,  810,  790,  805,  805, 1002,  127, 1002,  802,  787,
      792,  799,  785,  788,  790,  799, 1002, 1002,  778,  780,
      792,  777,  791,  793,  788,  774,  785,  785, 1002,  774,
     1002,  779, 1002,  769,  764,  766,  796,  520,  521,  764,
      765,  522,  780,  527,  528,  769,  529,  540,  765,  763,
      547,  768,  762,  756,  765,  759,  784,  752,  757,  764,

      765,  743,  747,  759, 1002,  751,  775,  749,  756, 1002,
      749,  754,  749,  738,  743, 1002,  746,  742,  736,  739,
      750,  741, 1002,  735,  548,  549,  743,  738,  553,  727,
      555,  557, 1002,  559,  723,    0,  563,  732,  730,  724,
      728,  720,  724,  729,  749,  748,  721, 1002,  725,  727,
      714,  726,  711,  741, 1002,  711,  708,  721,  722,  719,
      718,  717,  712,  709,  700,  705,  700,  703,  710,  565,
      701,  274,  708,  711, 1002,  692,  692,  692,  687,  698,
      705,  692,  703,  698, 1002,  696, 1002,  686,  682,  690,
      680,  692,  692,  682,  691,  674,  704,  683,  687,    0,

      682,  684,  567,    0,  681,  681,    0,  674,  666,  695,
      677,  676,  667,  676,  674,  666,  673,  669,  657, 1002,
      659, 1002,  654,  683,  651,  655,  659,  652,  657,  660,
        0,    0,  645,  657,  674, 1002,  656,  656,  671,  653,
      638,  647,  667,  635,  648,  647,  638, 1002,  635,  631,
      635,  646,  629,  632,    0,  639,  629,  637,  635,  631,
      624,  622,  628,  617,  620, 1002,  631,  630, 1002,  615,
     1002,  627,  619,  624,    0,  611,  610,  620,  619,  621,
      606,  602,  607,  611,  602,  599,  603,  611,  606,  626,
      610,    0,  607,  605,  605,  608,  603,  606,  593,  591,

      599, 1002,  590,  599,  582,  589,  585,    0,  593,  594,
      577,  592,  583,  575,  579,  588,  586,  575,  579,  578,
      573,  582,  565,  578,  568,  572, 1002, 1002,  566,  570,
      565,  563,  557,  571,  555,  555,  551,  555,  548,  553,
      546,  560,  550,  556,  551,  541, 1002, 1002,  553,  540,
      520,  514,  494, 1002,  468,  456, 1002,  464,  444,  430,
      415,  406,  418,  390,  371,  366,  358,  363,  362,  358,
      345,  324, 1002,  318,  302,  301,  281,  282,  277,  243,
     1002,  236, 1002,  224,  227,  222,  212, 1002,  200,  170,
     1002, 1002, 1002, 1002,  592,  206,   51

    } ;

static yyconst short int yy_def[698] =
    {   0,
      694,    1,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  695,  694,  694,  694,  694,
      694,  694,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  695,  694,
      694,  694,  697,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,

      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  696,  696,  696,  694,  694,  697,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  697,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  696,  696,  694,  694,  694,  694,  697,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,

      697,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  696,
      696,  694,  694,  694,  697,  696,  696,  696,  696,  696,
      696,  696,  697,  696,  696,  697,  696,  696,  694,  696,
      696,  696,  696,  696,  696,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,

      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  696,  696,  694,  694,  694,  697,  696,  696,
      696,  696,  696,  696,  696,  697,  697,  696,  697,  696,
      696,  694,  696,  696,  697,  696,  697,  696,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  697,  694,  697,  696,  696,  697,
      697,  696,  697,  696,  696,  694,  696,  696,  697,  697,
      696,  697,  694,  694,  694,  694,  694,  694,  694,  694,

      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  697,  694,  697,  696,  696,  697,  697,  696,  697,
      696,  696,  694,  696,  697,  697,  696,  697,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  697,  697,  697,  697,  697,  696,
      697,  697,  697,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  697,  697,  697,

      697,  697,  696,  697,  697,  697,  697,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  697,  697,
      697,  697,  697,  697,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  697,  697,  697,  697,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  697,  697,  697,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  697,  697,  694,  694,  694,  694,  694,  694,  694,

      694,  694,  694,  694,  694,  694,  694,  697,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,    0,  694,  694,  694

    } ;

static yyconst short int yy_nxt[1050] =
    {   0,
        4,    5,    6,    5,    7,    8,    9,   10,   11,   12,
        4,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   23,   24,   23,   23,   25,   26,   27,   23,   28,
       29,   23,   23,   30,   31,   32,   33,   23,   23,   34,
       35,   23,   23,   36,   23,   23,   23,   38,   41,   38,
       40,   42,   63,   43,   44,   45,   46,   47,   38,   48,
       38,   49,   50,   51,   52,   53,   54,   55,   56,   57,
       58,   63,   63,   63,   63,   63,   63,   63,   63,  247,
       63,   63,   63,  248,   63,   63,   63,   63,   63,   63,
       69,   63,   41,   63,   40,   65,   63,   66,   72,   70,

      117,   79,   67,   68,   74,   71,   92,   93,   75,   80,
       76,   77,   73,   82,  118,   63,   78,   83,   63,   81,
       63,   63,   63,   63,   63,   63,  104,   63,  105,   63,
       63,  252,   63,  187,  113,   85,   95,  106,   63,  119,
       96,   63,   88,   89,   84,   97,   86,   87,   90,   99,
      114,   98,   63,   87,  120,   63,  100,   63,   63,  101,
       63,   63,  399,  125,  102,  126,  103,   63,  123,  400,
       63,  127,  122,  128,   63,   63,  129,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,  124,   63,  138,
       63,  130,   63,   63,   63,   63,   63,   63,   63,   63,

      133,  179,  298,  299,  131,  137,  135,   64,  132,  693,
      134,   63,  136,   63,   63,   63,   63,  180,   63,   63,
      140,   63,   63,   63,   63,   63,   63,  141,   63,  139,
      142,  174,  143,   63,  145,   63,   63,  167,   63,  692,
      175,  144,  148,  146,   63,   63,  341,   63,   63,  168,
       63,  691,   63,   63,  147,   63,  690,  184,  125,  150,
      125,  689,  342,  688,  149,  125,  186,  125,  389,  187,
      687,  185,   63,  186,   63,   63,  187,   63,  686,   63,
       63,  191,   63,   63,  390,   63,   63,  193,   63,   63,
      188,   63,  194,  192,   63,   63,  505,  506,   63,  197,

      195,   63,   63,  189,   63,   63,   63,  198,   63,   63,
       63,   63,  685,   63,   63,  196,  684,   63,  199,   63,
      683,   63,   63,  202,   63,   63,   63,  203,   63,   63,
      200,  214,  205,  206,   63,   63,  682,   63,   63,  204,
       63,  681,  208,   63,  207,  215,  216,  209,  680,  237,
      238,  210,  239,   63,  679,  211,   63,  212,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,  263,   63,   63,   63,  256,  251,   63,   63,
      678,   63,   63,  260,   63,  257,  258,   63,   63,  250,
      677,   63,  676,  269,  262,  259,  265,  675,  674,   63,

       63,  261,   63,   63,   63,  673,   63,   63,  267,   63,
       63,  672,  268,   63,  264,   63,   63,  270,   63,   63,
      671,   63,   63,  272,   63,   63,   63,  271,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,  274,   63,
      670,  273,  275,  319,   63,   63,  669,   63,   63,  320,
      668,   63,  326,  314,   63,  327,  313,  322,   63,  321,
      667,   63,   63,   63,   63,   63,   63,   63,   63,   63,
      666,   63,   63,  323,  325,  324,  328,  335,   63,  337,
       63,   63,   63,  330,   63,  331,  334,   63,  375,   63,
       63,   63,   63,   63,  665,   63,  664,  333,   63,  336,

       63,   63,   63,   63,   63,   63,  663,   63,   63,  338,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
      378,   63,   63,   63,  662,   63,   63,  379,   63,   63,
       63,   63,   63,   63,   63,  387,   63,   63,   63,   63,
       63,   63,  382,  388,  661,  660,  425,  391,  429,   63,
      384,  385,   63,  431,  432,  426,   63,   63,   63,   63,
       63,   63,   63,  434,   63,   63,   63,   63,   63,   63,
      659,   63,  472,  437,   63,   63,   63,   63,  658,   63,
      657,  656,  655,  470,  654,  653,  652,  651,  650,  649,
      648,  503,   59,   59,  647,  646,  645,  644,  643,  642,

      641,  640,  639,  638,  637,  636,  635,  634,  633,  632,
      631,  630,  629,  628,  627,  626,  625,  624,  623,  622,
      621,  620,  619,  618,  617,  616,  615,  614,  613,  612,
      611,  610,  609,  608,  607,  606,  605,  604,  603,  602,
      601,  600,  599,  598,  597,  596,  595,  594,  593,  592,
      591,  590,  589,  588,  587,  586,  585,  584,  583,  582,
      581,  580,  579,  578,  577,  576,  575,  574,  573,  572,
      571,  570,  569,  568,  567,  566,  565,  564,  563,  562,
      561,  560,  559,  558,  557,  556,  555,  554,  553,  552,
      551,  550,  549,  548,  547,  546,  545,  544,  543,  542,

      541,  540,  539,  538,  537,  536,  535,  534,  533,  532,
      531,  530,  529,  528,  527,  526,  525,  524,  523,  522,
      521,  520,  519,  518,  517,  516,  515,  514,  513,  512,
      511,  510,  509,  508,  507,  504,  502,  501,  500,  499,
      498,  497,  496,  495,  494,  493,  492,  491,  490,  489,
      488,  487,  486,  485,  484,  483,  482,  481,  480,  479,
      478,  477,  476,  475,  474,  473,  471,  469,  468,  467,
      466,  465,  464,  463,  462,  461,  460,  459,  458,  457,
      456,  455,  454,  453,  452,  451,  450,  449,  448,  447,
      446,  445,  444,  443,  442,  441,  440,  439,  438,  436,

      435,  433,  430,  428,  427,  424,  423,  422,  421,  420,
      419,  418,  417,  416,  415,  414,  413,  412,  411,  410,
      409,  408,  407,  406,  405,  404,  403,  402,  401,  398,
      397,  396,  395,  394,  393,  392,  386,  383,  381,  380,
      377,  376,  315,  374,  373,  372,  371,  370,  369,  368,
      367,  366,  365,  364,  363,  362,  361,  360,  359,  358,
      357,  356,  355,  354,  353,  352,  351,  350,  349,  348,
      347,  346,  345,  344,  343,  340,  339,  332,  329,  318,
      317,  316,  315,  312,  311,  310,  309,  308,  307,  306,
      305,  304,  303,  302,  301,  300,  297,  296,  295,  294,

      293,  292,  291,  290,  289,  288,  287,  286,  285,  284,
      283,  282,  281,  280,  279,  278,  277,  276,  266,  255,
      254,  253,  187,  249,  246,  245,  244,  243,  242,  241,
      240,  236,  235,  234,  233,  232,  231,  230,  229,  228,
      227,  226,  225,  224,  223,  222,  221,  220,  219,  218,
      217,  213,  201,  190,  183,  182,  181,  178,  177,  176,
      173,  172,  171,  170,  169,  166,  165,  164,  163,  162,
      161,  160,  159,  158,  157,  156,  155,  154,  153,  152,
      151,   91,   60,  121,  116,  115,  112,  111,  110,  109,
      108,  107,   94,   91,   62,   61,   60,   40,   39,  694,

       37,    3,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694
    } ;

static yyconst short int yy_chk[1050] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    5,   14,    5,
       14,   15,  697,   15,   15,   15,   15,   15,   38,   15,
       38,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   23,   24,   25,   23,   24,   25,   26,   27,  182,
       26,   27,   28,  182,   32,   28,   29,   32,   30,   29,
       25,   30,   40,   31,   40,   24,   31,   24,   26,   25,

       56,   30,   24,   24,   27,   25,   42,   42,   28,   30,
       29,   29,   26,   32,   56,   33,   29,   32,   33,   31,
       34,   35,   36,   34,   35,   36,   46,   37,   46,   64,
       37,  187,   64,  187,   53,   34,   44,   46,   65,   57,
       44,   65,   36,   36,   33,   44,   34,   35,   37,   45,
       53,   44,   66,   37,   57,   66,   45,   67,   69,   45,
       67,   69,  347,   68,   45,   68,   45,   70,   66,  347,
       70,   68,   65,   69,   68,   71,   69,   72,   71,   73,
       72,   74,   73,   75,   74,   76,   75,   67,   76,   78,
       77,   70,   78,   77,   79,   80,   81,   79,   80,   81,

       73,  118,  236,  236,   71,   77,   75,  696,   72,  690,
       74,   82,   76,   83,   82,   84,   83,  118,   84,   86,
       80,   85,   86,   87,   85,   88,   87,   81,   88,   79,
       83,  114,   84,   89,   85,   90,   89,  108,   90,  689,
      114,   84,   88,   86,  122,  123,  278,  122,  123,  108,
      124,  687,  128,  124,   87,  128,  686,  122,  125,   90,
      125,  685,  278,  684,   89,  126,  125,  126,  335,  125,
      682,  124,  129,  126,  130,  129,  126,  130,  680,  131,
      132,  128,  131,  132,  335,  133,  134,  130,  133,  134,
      126,  135,  131,  129,  135,  136,  472,  472,  136,  134,

      132,  137,  139,  126,  137,  139,  140,  135,  141,  140,
      142,  141,  679,  142,  143,  133,  678,  143,  136,  144,
      677,  145,  144,  139,  145,  146,  148,  140,  146,  148,
      137,  153,  143,  144,  147,  149,  676,  147,  149,  142,
      150,  675,  146,  150,  145,  153,  153,  147,  674,  174,
      174,  148,  174,  184,  672,  149,  184,  150,  185,  191,
      192,  185,  191,  192,  194,  193,  195,  194,  193,  195,
      196,  197,  198,  196,  197,  198,  191,  185,  199,  200,
      671,  199,  200,  195,  202,  192,  193,  202,  203,  184,
      670,  203,  669,  204,  197,  194,  200,  668,  667,  204,

      205,  196,  204,  205,  206,  666,  207,  206,  202,  207,
      208,  665,  203,  208,  199,  209,  210,  205,  209,  210,
      664,  211,  212,  207,  211,  212,  250,  206,  251,  250,
      256,  251,  257,  256,  258,  257,  259,  258,  209,  259,
      663,  208,  211,  256,  260,  261,  662,  260,  261,  257,
      661,  262,  263,  251,  262,  263,  250,  259,  264,  258,
      660,  264,  267,  265,  268,  267,  265,  268,  270,  271,
      659,  270,  271,  260,  262,  261,  265,  272,  273,  274,
      272,  273,  274,  267,  275,  268,  271,  275,  313,  314,
      319,  313,  314,  319,  658,  320,  656,  270,  320,  273,

      321,  322,  323,  321,  322,  323,  655,  324,  325,  275,
      324,  325,  328,  330,  331,  328,  330,  331,  333,  334,
      319,  333,  334,  336,  653,  338,  336,  322,  338,  378,
      379,  382,  378,  379,  382,  333,  384,  385,  387,  384,
      385,  387,  328,  334,  652,  651,  378,  336,  382,  388,
      330,  331,  388,  384,  385,  379,  391,  425,  426,  391,
      425,  426,  429,  387,  431,  429,  432,  431,  434,  432,
      650,  434,  437,  391,  470,  437,  503,  470,  649,  503,
      646,  645,  644,  434,  643,  642,  641,  640,  639,  638,
      637,  470,  695,  695,  636,  635,  634,  633,  632,  631,

      630,  629,  626,  625,  624,  623,  622,  621,  620,  619,
      618,  617,  616,  615,  614,  613,  612,  611,  610,  609,
      607,  606,  605,  604,  603,  601,  600,  599,  598,  597,
      596,  595,  594,  593,  591,  590,  589,  588,  587,  586,
      585,  584,  583,  582,  581,  580,  579,  578,  577,  576,
      574,  573,  572,  570,  568,  567,  565,  564,  563,  562,
      561,  560,  559,  558,  557,  556,  554,  553,  552,  551,
      550,  549,  547,  546,  545,  544,  543,  542,  541,  540,
      539,  538,  537,  535,  534,  533,  530,  529,  528,  527,
      526,  525,  524,  523,  521,  519,  518,  517,  516,  515,

      514,  513,  512,  511,  510,  509,  508,  506,  505,  502,
      501,  499,  498,  497,  496,  495,  494,  493,  492,  491,
      490,  489,  488,  486,  484,  483,  482,  481,  480,  479,
      478,  477,  476,  474,  473,  471,  469,  468,  467,  466,
      465,  464,  463,  462,  461,  460,  459,  458,  457,  456,
      454,  453,  452,  451,  450,  449,  447,  446,  445,  444,
      443,  442,  441,  440,  439,  438,  435,  430,  428,  427,
      424,  422,  421,  420,  419,  418,  417,  415,  414,  413,
      412,  411,  409,  408,  407,  406,  404,  403,  402,  401,
      400,  399,  398,  397,  396,  395,  394,  393,  392,  390,

      389,  386,  383,  381,  380,  377,  376,  375,  374,  372,
      370,  368,  367,  366,  365,  364,  363,  362,  361,  360,
      359,  356,  355,  354,  353,  352,  351,  350,  349,  345,
      344,  343,  342,  341,  340,  337,  332,  329,  327,  326,
      318,  317,  315,  312,  311,  309,  308,  307,  306,  305,
      304,  303,  302,  301,  300,  299,  298,  297,  296,  295,
      294,  293,  292,  291,  290,  289,  288,  286,  285,  284,
      283,  282,  281,  280,  279,  277,  276,  269,  266,  255,
      254,  253,  252,  249,  248,  247,  246,  245,  244,  243,
      242,  241,  240,  239,  238,  237,  235,  234,  233,  232,

      231,  230,  228,  227,  226,  225,  224,  223,  222,  221,
      220,  219,  218,  217,  216,  215,  214,  213,  201,  190,
      189,  188,  186,  183,  181,  180,  179,  178,  177,  176,
      175,  173,  172,  171,  170,  169,  168,  167,  166,  165,
      164,  163,  162,  161,  160,  159,  158,  157,  156,  155,
      154,  151,  138,  127,  121,  120,  119,  117,  116,  115,
      113,  112,  111,  110,  109,  107,  106,  105,  104,  103,
      102,  101,  100,   99,   98,   97,   96,   95,   94,   93,
       92,   91,   59,   58,   55,   54,   52,   51,   50,   49,
       48,   47,   43,   41,   19,   17,   16,   12,    7,    3,

        2,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "pddl+.lex"
#define INITIAL 0
#line 2 "pddl+.lex"

#include <string>

#include <fstream>
  using std::cin;
  using std::cout;
  using std::cerr;
  using std::istream;
  //using namespace VAL;
extern "C" int yywrap();

#line 799 "pddl+lex.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 26 "pddl+.lex"

#line 931 "pddl+lex.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &cin;

		if ( ! yyout )
			yyout = &cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 695 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1002 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 27 "pddl+.lex"
{return OPEN_BRAC;}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 28 "pddl+.lex"
{return CLOSE_BRAC;}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 29 "pddl+.lex"
{return OPEN_SQ;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 30 "pddl+.lex"
{return CLOSE_SQ;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 31 "pddl+.lex"
{return REQS;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 32 "pddl+.lex"
{return EQUALITY;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 33 "pddl+.lex"
{return STRIPS;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 34 "pddl+.lex"
{return ADL;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 35 "pddl+.lex"
{return TYPING;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 36 "pddl+.lex"
{return DISJUNCTIVE_PRECONDS;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 37 "pddl+.lex"
{return EXT_PRECS;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 38 "pddl+.lex"
{return UNIV_PRECS;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 39 "pddl+.lex"
{return QUANT_PRECS;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 40 "pddl+.lex"
{return COND_EFFS;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 41 "pddl+.lex"
{return FLUENTS;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 42 "pddl+.lex"
{return TIME;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 43 "pddl+.lex"
{return PREFERENCES;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 44 "pddl+.lex"
{return CONSTRAINTS;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 45 "pddl+.lex"
{return CONSTANTS;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 46 "pddl+.lex"
{return PREDS;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 47 "pddl+.lex"
{return FUNCTIONS;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 48 "pddl+.lex"
{return TYPES;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 49 "pddl+.lex"
{return DURATIVE_ACTIONS;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 50 "pddl+.lex"
{return DURATION_INEQUALITIES;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 51 "pddl+.lex"
{return CONTINUOUS_EFFECTS;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 52 "pddl+.lex"
{return NEGATIVE_PRECONDITIONS;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 53 "pddl+.lex"
{return DERIVED_PREDICATES;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 54 "pddl+.lex"
{return TIMED_INITIAL_LITERALS;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 55 "pddl+.lex"
{return DEFINE;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 56 "pddl+.lex"
{return PDDLDOMAIN;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 57 "pddl+.lex"
{return ACTION;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 58 "pddl+.lex"
{return PROCESS;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 59 "pddl+.lex"
{return EVENT;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 60 "pddl+.lex"
{return DURATIVE_ACTION;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 61 "pddl+.lex"
{return DERIVED;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 62 "pddl+.lex"
{return ARGS;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 63 "pddl+.lex"
{return PRE;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 64 "pddl+.lex"
{return CONDITION;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 65 "pddl+.lex"
{return START_PRE;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 66 "pddl+.lex"
{return END_PRE;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 67 "pddl+.lex"
{return AT_START;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 68 "pddl+.lex"
{return AT_END;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 69 "pddl+.lex"
{return OVER_ALL;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 70 "pddl+.lex"
{return EFFECTS;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 71 "pddl+.lex"
{return INITIAL_EFFECT;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 72 "pddl+.lex"
{return FINAL_EFFECT;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 73 "pddl+.lex"
{return INVARIANT;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 74 "pddl+.lex"
{return DURATION;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 75 "pddl+.lex"
{return AND;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 76 "pddl+.lex"
{return OR;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 77 "pddl+.lex"
{return EXISTS;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 78 "pddl+.lex"
{return FORALL;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 79 "pddl+.lex"
{return IMPLY;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 80 "pddl+.lex"
{return NOT;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 81 "pddl+.lex"
{return WHEN;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 82 "pddl+.lex"
{return EITHER;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 83 "pddl+.lex"
{return PROBLEM;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 84 "pddl+.lex"
{return FORDOMAIN;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 85 "pddl+.lex"
{return OBJECTS;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 86 "pddl+.lex"
{return INITIALLY;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 87 "pddl+.lex"
{return GOALS;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 88 "pddl+.lex"
{return EQ;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 89 "pddl+.lex"
{return LENGTH;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 90 "pddl+.lex"
{return SERIAL;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 91 "pddl+.lex"
{return PARALLEL;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 92 "pddl+.lex"
{return METRIC;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 93 "pddl+.lex"
{return MINIMIZE;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 94 "pddl+.lex"
{return MAXIMIZE;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 95 "pddl+.lex"
{return ISVIOLATED;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 96 "pddl+.lex"
{return HASHT;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 97 "pddl+.lex"
{return DURATION_VAR;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 98 "pddl+.lex"
{return TOTAL_TIME;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 99 "pddl+.lex"
{return TIME;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 100 "pddl+.lex"
{return INCREASE;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 101 "pddl+.lex"
{return DECREASE;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 102 "pddl+.lex"
{return SCALE_UP;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 103 "pddl+.lex"
{return SCALE_DOWN;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 104 "pddl+.lex"
{return ASSIGN;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 105 "pddl+.lex"
{return PREFERENCE;}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 106 "pddl+.lex"
{return ALWAYS;}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 107 "pddl+.lex"
{return SOMETIME;}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 108 "pddl+.lex"
{return WITHIN;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 109 "pddl+.lex"
{return ATMOSTONCE;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 110 "pddl+.lex"
{return SOMETIMEAFTER;}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 111 "pddl+.lex"
{return SOMETIMEBEFORE;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 112 "pddl+.lex"
{return ALWAYSWITHIN;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 113 "pddl+.lex"
{return HOLDDURING;}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 114 "pddl+.lex"
{return HOLDAFTER;}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 115 "pddl+.lex"
{return PLUS;}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 116 "pddl+.lex"
{return HYPHEN;}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 117 "pddl+.lex"
{return MUL;}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 118 "pddl+.lex"
{return DIV;}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 119 "pddl+.lex"
{return GREATER;}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 120 "pddl+.lex"
{return GREATEQ;}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 121 "pddl+.lex"
{return LESS;}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 122 "pddl+.lex"
{return LESSEQ;}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 123 "pddl+.lex"
{return Q;}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 124 "pddl+.lex"
{return COLON;}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 126 "pddl+.lex"
{unsigned int i;
           for(i = 3;i < strlen(yytext);++i)
           {
           	  if(yytext[i] != '\t' && yytext[i] != ' ') break;
           };
           yylval./*fval*/real = atof(yytext+i);
			return (AT_TIME);
          }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 136 "pddl+.lex"
{unsigned int i;
    
     for(i = 0;i<strlen(yytext);i++)
	 yytext[i] = tolower(yytext[i]);
    yylval.str = new string(yytext);//char[strlen(yytext)+1];
//     strcpy(yylval.str,yytext);
//     /*Charles ::Tue Oct 30 14:07:51 EST 2007 :: Not sure why the
//      * string is being converted to lower case here...*/
//     for(i = 0;i<strlen(yylval.str);i++)
// 	yylval.str[i] = tolower(yylval.str[i]);
    // If symbol is registered as a function symbol,
    // return token FUNCTION_SYMBOL else return NAME
    //cout << yytext << " " << line_no << "\n";
    if (false)//current_analysis->func_tab.symbol_probe(yylval.str) != NULL)
	return FUNCTION_SYMBOL;
    else
	return NAME;
}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 155 "pddl+.lex"
;
	YY_BREAK
case 102:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 156 "pddl+.lex"
;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 157 "pddl+.lex"
{line_no++;};
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 159 "pddl+.lex"
{yylval.integer = atoi(yytext);return (INTVAL);}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 160 "pddl+.lex"
{yylval.real = atof(yytext);return (FLOATVAL);}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 162 "pddl+.lex"
ECHO;
	YY_BREAK
#line 1572 "pddl+lex.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( istream* arg_yyin, ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( istream* new_in, ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 695 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 695 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 694);

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');

	return c;
	}


void yyFlexLexer::yyrestart( istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, istream* file )

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 162 "pddl+.lex"



extern "C" {
int yywrap()
{
	return 1;
};
};

