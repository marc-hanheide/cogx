/* A lexical scanner generated by flex*/

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <iostream>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* Some routines like yy_flex_realloc() are emitted as static but are
   not called by all lexers. This generates warnings in some compilers,
   notably GCC. Arrange to suppress these. */
#ifdef __GNUC__
#define YY_MAY_BE_UNUSED __attribute__((unused))
#else
#define YY_MAY_BE_UNUSED
#endif

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t )) YY_MAY_BE_UNUSED;
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 108
#define YY_END_OF_BUFFER 109
static yyconst short int yy_accept[706] =
    {   0,
      106,  106,  109,  108,  103,  105,  108,    1,    2,   93,
       91,   92,   94,  106,  100,  108,   97,   64,   95,   99,
        3,    4,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  103,   72,  106,
      107,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  104,
       98,   96,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,   52,  102,  102,  102,  102,  102,  102,  102,
      102,  107,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  102,   51,  102,    0,    0,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,   56,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,    0,    8,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  102,  102,    0,  101,    0,
        0,  102,  102,  102,  102,  102,  102,  102,  102,  102,

      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,   57,  102,   75,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   63,   62,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   16,    0,
        0,    0,  102,  102,  101,    0,    0,  102,  102,  102,
      102,  102,  102,  102,  102,  102,   55,  102,  102,  102,
      102,  102,    0,  102,  102,  102,  102,  102,  102,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       35,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   22,    0,    0,   82,   80,  101,   44,
        0,  102,  102,   29,   30,  102,   58,   53,   54,  102,
      102,  102,  102,  102,  102,   32,    0,  102,  102,  102,
      102,  102,   84,   33,    0,    0,    0,    0,    0,    0,
       60,    0,   46,    0,    0,    0,    0,    0,    0,    0,
        0,   65,   68,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   66,    0,    7,    0,    9,    0,  102,
        0,  102,  102,  102,  102,  102,  102,  102,  102,  102,
        0,  102,   59,  102,  102,  102,  102,    0,    0,    0,

        0,    0,   37,    0,    0,    0,    0,    0,    0,    0,
       15,    0,    0,    0,    0,   61,    0,    0,    0,    0,
        0,   34,    0,    0,    0,    0,    0,  102,   43,  102,
       77,   73,  102,  102,   76,  102,   70,   69,   45,  102,
      102,   78,   83,  102,    0,    0,    0,    0,    0,    0,
        0,   50,    0,    0,    6,    0,    0,    0,    0,    0,
        0,   67,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  102,  102,  102,  102,  102,  102,  102,  102,  102,
        0,   40,   19,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   21,    0,   49,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  102,  102,   90,  102,  102,
       81,   79,  102,  102,   74,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   38,    0,
       20,    0,    0,    0,    0,    0,    0,  102,  102,   89,
       71,  102,  102,    0,    0,   18,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   17,    0,    0,
        0,    0,    0,  102,   85,  102,  102,   31,    0,    0,
        0,    0,    0,    0,    0,    0,   48,    0,    0,   39,
        0,    5,    0,    0,    0,   88,  102,  102,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,   86,  102,    0,    0,    0,    0,    0,    0,
        0,    0,   47,    0,    0,    0,    0,    0,   87,    0,
        0,    0,    0,    0,   36,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   23,   42,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   25,   27,    0,
        0,    0,    0,    0,   41,    0,    0,   14,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   24,    0,    0,    0,    0,    0,    0,
        0,   26,    0,   28,    0,    0,    0,    0,   12,    0,

        0,   13,   10,   11,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    1,    5,    1,    1,    1,    1,    6,
        7,    8,    9,    1,   10,   11,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   14,   15,   16,
       17,   18,   19,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   22,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       20,    1,   21,    1,   22,    1,   23,   24,   25,   26,

       27,   28,   29,   30,   31,   32,   22,   33,   34,   35,
       36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
       46,   47,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[48] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2
    } ;

static yyconst short int yy_base[709] =
    {   0,
        0,  981, 1021, 1023,   46, 1023,  979, 1023, 1023, 1023,
     1023, 1006, 1023,   38,   29, 1015, 1000, 1023,  999, 1023,
     1023, 1023,   62,   63,   64,   68,   69,   73,   77,   79,
       84,   75,  106,  111,  112,  119,  120,   57, 1023,   82,
     1002,   82,  978,  104,   99,  110,  977,  977,  984,  983,
      982,  984,  100,  965,  979,   74,  107,  970, 1001, 1023,
     1023, 1023,    0,  144,  145,  149,  150,  163,  156,  151,
      158,  164,  169,  170,  178,  182,  183,  188,  189,  193,
      194,  202,  200,  204,  210,  216,  208,  212,  214,  220,
      230,  990,  961,  968,  965,  960,  958,  963,  957,  967,

      968,  951,  965,  960,  955,  947,  953,  964,  201,  951,
      944,  955,  951,  943,  151,  958,  942,  940,  147,  944,
      940,  945,  235,  237,  239,  252,  253,  941,  258,  259,
      263,  264,  265,  269,  271,  275,  279,  286,  931,  290,
      292,  294,  298,  300,  304,  305,  314,  306,  318,  324,
      325,  330,  942, 1023,  304,  941,  939,  947,  946,  941,
      957,  943,  930,  924,  940,  935,  936,  927,  918,  935,
      928,  917,  932,  927,  930,  323,  927,  916,  908,  918,
      909,  916,  919,   53,  902,  340,  348,  931,  341,  908,
      901,  905,  352,  350,  356,  354,  361,  360,  365,  370,

      371,  379,  909,  380,  381,  386,  398,  394,  387,  399,
      406,  412,  414,  418,  419,  903,  907,  896,  905,  892,
      892,  902,  891,  906,  893,  896,  887,  886,  893,  890,
      883, 1023,  892,  883,  880,  889,  878,  893,  226,  881,
      885,  888,  887,  872,  881,  888,  869,  872,  882,  867,
      871,  878,  420,  424,  891,  877,  879,  861,  425,  426,
      430,  431,  441,  442,  448,  440,  454,  460,  864,  458,
      459,  464,  876,  465,  466,  474,  475,  481,  482,  863,
      856,  228,  861,  868,  859,  858,  861,  850,  851,  858,
     1023,  861,  877,  845,  854,  861,  852,  852,  856,  849,

      838,  845,  850,  841,  850,  835,  833,  841,  832,  837,
      859,  828,  857, 1023,  837,  826,  486,  487,  851, 1023,
      824,  821,  488,  492,  497,  498,  499,  503,  505,  833,
      818,  509,  826,  510,  511,  516,  825,  517,  522,  294,
      526,  816,  527,  846,  824,  819,  830,  810,  825,  825,
     1023,  255, 1023,  822,  807,  812,  819,  805,  808,  810,
      819, 1023, 1023,  798,  800,  812,  797,  811,  813,  808,
      794,  805,  805, 1023,  794, 1023,  799, 1023,  789,  784,
      786,  816,  528,  532,  784,  785,  537,  800,  538,  549,
      789,  533,  553,  785,  783,  559,  788,  793,  781,  775,

      784,  778,  803,  771,  776,  783,  784,  762,  766,  778,
     1023,  770,  794,  768,  775, 1023,  768,  773,  768,  757,
      762, 1023,  765,  761,  755,  758,  769,  760, 1023,  754,
      560,  561,  762,  757,  565,  746,  567,  569, 1023,  571,
      742,    0,  575,  751,  748,  748,  742,  746,  738,  742,
      747,  767,  766,  739, 1023,  743,  745,  732,  744,  729,
      759, 1023,  729,  726,  739,  740,  737,  736,  735,  730,
      727,  718,  723,  718,  721,  728,  577,  719,  433,  726,
      712,  728, 1023,  709,  709,  709,  704,  715,  722,  709,
      720,  715, 1023,  713, 1023,  703,  699,  707,  697,  709,

      709,  699,  708,  691,  721,  700,  704,    0,  699,  701,
      579,    0,  698,  698,    0,  683,  690,  682,  711,  693,
      692,  683,  692,  690,  682,  689,  685,  673, 1023,  675,
     1023,  670,  699,  667,  671,  675,  668,  673,  676,    0,
        0,  661,  673,  660,  689, 1023,  671,  671,  686,  668,
      653,  662,  682,  650,  663,  662,  653, 1023,  650,  646,
      650,  661,  644,  647,    0,  654,  644, 1023,  652,  650,
      646,  639,  637,  643,  632,  635, 1023,  646,  645, 1023,
      630, 1023,  642,  634,  639,    0,  626,  625,  635,  634,
      636,  621,  617,  622,  626,  617,  614,  618,  626,  621,

      641,  625,    0,  622,  620,  620,  623,  618,  621,  608,
      606,  614, 1023,  605,  614,  597,  604,  600,    0,  608,
      609,  592,  607,  598,  590,  594,  603,  601,  590,  594,
      593,  588,  597,  580,  593,  583,  587, 1023, 1023,  581,
      585,  580,  578,  572,  586,  570,  570,  569,  573,  566,
      568,  561,  575,  565,  572,  567,  557, 1023, 1023,  569,
      563,  567,  560,  552, 1023,  522,  513, 1023,  522,  525,
      502,  495,  484,  491,  455,  409,  406,  401,  388,  387,
      377,  369,  372, 1023,  351,  336,  336,  328,  321,  310,
      306, 1023,  291, 1023,  266,  248,  203,  176, 1023,  154,

      132, 1023, 1023, 1023, 1023,  604,  126,   51
    } ;

static yyconst short int yy_def[709] =
    {   0,
      705,    1,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  706,  705,  705,  705,  705,
      705,  705,  707,  707,  707,  707,  707,  707,  707,  707,
      707,  707,  707,  707,  707,  707,  707,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  706,  705,
      705,  705,  708,  707,  707,  707,  707,  707,  707,  707,
      707,  707,  707,  707,  707,  707,  707,  707,  707,  707,
      707,  707,  707,  707,  707,  707,  707,  707,  707,  707,
      707,  705,  705,  705,  705,  705,  705,  705,  705,  705,

      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  707,  707,  707,  705,  705,  708,  707,  707,
      707,  707,  707,  707,  707,  707,  707,  707,  708,  707,
      707,  707,  707,  707,  707,  707,  707,  707,  707,  707,
      707,  707,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  707,  707,  705,  705,  705,
      705,  708,  707,  707,  707,  707,  707,  707,  707,  707,

      707,  707,  708,  707,  707,  707,  707,  707,  707,  707,
      707,  707,  707,  707,  707,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  707,  707,  705,  705,  705,  708,  707,  707,
      707,  707,  707,  707,  707,  708,  707,  707,  708,  707,
      707,  707,  705,  707,  707,  707,  707,  707,  707,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,

      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  707,  707,  705,  705,
      705,  708,  707,  707,  707,  707,  707,  707,  707,  708,
      708,  707,  708,  707,  707,  707,  705,  707,  707,  708,
      707,  708,  707,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  708,
      705,  708,  707,  707,  708,  708,  707,  708,  707,  707,
      705,  707,  707,  708,  708,  707,  708,  705,  705,  705,

      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  708,  705,  708,
      707,  707,  708,  708,  707,  708,  707,  707,  705,  707,
      708,  708,  707,  708,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  708,  708,  708,  708,  708,  707,  708,  708,  708,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,

      705,  705,  705,  705,  705,  708,  708,  708,  708,  708,
      707,  708,  708,  708,  708,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  708,  708,  708,
      708,  708,  708,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  708,  708,  708,  708,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  708,  708,  708,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,

      705,  705,  708,  708,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  708,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,

      705,  705,  705,  705,    0,  705,  705,  705
    } ;

static yyconst short int yy_nxt[1071] =
    {   0,
        4,    5,    6,    5,    7,    8,    9,   10,   11,   12,
        4,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   23,   24,   23,   23,   25,   26,   27,   23,   28,
       29,   23,   23,   30,   31,   32,   33,   23,   23,   34,
       35,   23,   23,   36,   23,   23,   23,   38,   41,   38,
       40,   42,   63,   43,   44,   45,   46,   47,   38,   48,
       38,   49,   50,   51,   52,   53,   54,   55,   56,   57,
       58,   63,   63,   63,   63,   63,   63,   63,   63,  250,
       63,   63,   63,  251,   63,   63,   63,   63,   63,   63,
       69,   63,   41,   63,   40,   65,   63,   66,   72,   70,

      118,   79,   67,   68,   74,   71,   93,   94,   75,   80,
       76,   77,   73,   83,  119,   63,   78,   84,   63,   81,
       63,   63,  114,   63,   63,   82,  100,   64,   63,   63,
       96,   63,   63,  101,   97,   86,  102,  120,  115,   98,
      105,  103,  106,  104,   85,   99,   87,   88,   89,   90,
       91,  107,  121,   63,   63,   88,   63,   63,   63,   63,
       63,   63,   63,   63,  126,   63,  127,   63,   63,  181,
       63,  704,  128,   63,  124,   63,   63,  176,   63,   63,
      129,   63,   63,  130,  131,  182,  177,   63,  123,  125,
       63,   63,   63,  703,   63,   63,  132,  139,   63,  134,

       63,   63,   63,   63,  133,   63,   63,  138,  135,   63,
      136,   63,   63,   63,   63,  702,   63,   63,  137,   63,
       63,   63,   63,   63,   63,   63,   63,  141,   63,   63,
      144,  169,   63,  140,  142,  143,  145,  701,  147,   63,
      150,  148,   63,  170,   63,  146,   63,   63,   63,   63,
      346,   63,  149,  126,  126,  126,  126,  186,  302,  303,
      151,  188,  188,  152,  189,  189,  347,   63,   63,  187,
       63,   63,   63,   63,   63,   63,   63,   63,   63,  190,
       63,   63,  700,   63,   63,  195,  196,   63,   63,  194,
      405,   63,  191,  199,  197,   63,  193,  406,   63,   63,

      200,   63,   63,   63,   63,  699,   63,   63,  198,   63,
       63,  201,   63,   63,   63,   63,   63,   63,   63,  394,
      204,  206,  205,   63,  202,  698,   63,   63,  209,  217,
       63,  208,  211,   63,   63,  395,   63,   63,  207,   63,
      212,  697,   63,  218,  219,  696,  210,  240,  241,   63,
      242,  255,   63,  189,  214,  695,  215,   63,  213,   63,
       63,   63,   63,   63,   63,   63,   63,  694,   63,   63,
       63,  693,   63,   63,   63,  692,  254,   63,  259,  266,
       63,  691,   63,   63,  260,  253,  261,  263,   63,   63,
       63,   63,   63,   63,  262,   63,   63,  265,   63,   63,

      264,  273,  690,   63,  689,  268,   63,   63,   63,  688,
       63,   63,  272,  270,  271,   63,  267,  687,   63,  275,
      274,   63,  686,   63,   63,  276,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,  685,   63,   63,  278,  684,  277,  323,  279,  683,
       63,   63,  324,   63,   63,  513,  514,   63,  318,  317,
       63,  326,  330,   63,  325,  331,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,  327,
      329,  328,  332,  340,   63,  682,   63,   63,  334,  335,
      342,   63,  339,   63,   63,  380,   63,   63,   63,   63,

       63,   63,  336,  338,   63,  341,   63,   63,   63,   63,
       63,   63,   63,  681,   63,   63,  343,   63,   63,   63,
       63,   63,   63,   63,  680,   63,   63,  383,   63,   63,
      679,   63,  678,  384,   63,   63,   63,   63,   63,   63,
       63,   63,   63,  392,   63,   63,   63,   63,  387,   63,
       63,  677,  676,  675,  431,  393,  389,  390,   63,  396,
      674,   63,   63,  435,  437,   63,  432,  440,   63,   63,
       63,   63,   63,   63,   63,  438,   63,   63,   63,   63,
       63,   63,  673,   63,  479,  443,   63,   63,   63,   63,
      672,   63,  671,  670,  669,  477,  668,  667,  666,  665,

      664,  663,  662,  511,   59,   59,  661,  660,  659,  658,
      657,  656,  655,  654,  653,  652,  651,  650,  649,  648,
      647,  646,  645,  644,  643,  642,  641,  640,  639,  638,
      637,  636,  635,  634,  633,  632,  631,  630,  629,  628,
      627,  626,  625,  624,  623,  622,  621,  620,  619,  618,
      617,  616,  615,  614,  613,  612,  611,  610,  609,  608,
      607,  606,  605,  604,  603,  602,  601,  600,  599,  598,
      597,  596,  595,  594,  593,  592,  591,  590,  589,  588,
      587,  586,  585,  584,  583,  582,  581,  580,  579,  578,
      577,  576,  575,  574,  573,  572,  571,  570,  569,  568,

      567,  566,  565,  564,  563,  562,  561,  560,  559,  558,
      557,  556,  555,  554,  553,  552,  551,  550,  549,  548,
      547,  546,  545,  544,  543,  542,  541,  540,  539,  538,
      537,  536,  535,  534,  533,  532,  531,  530,  529,  528,
      527,  526,  525,  524,  523,  522,  521,  520,  519,  518,
      517,  516,  515,  512,  510,  509,  508,  507,  506,  505,
      504,  503,  502,  501,  500,  499,  498,  497,  496,  495,
      494,  493,  492,  491,  490,  489,  488,  487,  486,  485,
      484,  483,  482,  481,  480,  478,  476,  475,  474,  473,
      472,  471,  470,  469,  468,  467,  466,  465,  464,  463,

      462,  461,  460,  459,  458,  457,  456,  455,  454,  453,
      452,  451,  450,  449,  448,  447,  446,  445,  444,  442,
      441,  439,  436,  434,  433,  430,  429,  428,  427,  426,
      425,  424,  423,  422,  421,  420,  419,  418,  417,  416,
      415,  414,  413,  412,  411,  410,  409,  408,  407,  404,
      403,  402,  401,  400,  399,  398,  397,  391,  388,  386,
      385,  382,  381,  319,  379,  378,  377,  376,  375,  374,
      373,  372,  371,  370,  369,  368,  367,  366,  365,  364,
      363,  362,  361,  360,  359,  358,  357,  356,  355,  354,
      353,  352,  351,  350,  349,  348,  345,  344,  337,  333,

      322,  321,  320,  319,  316,  315,  314,  313,  312,  311,
      310,  309,  308,  307,  306,  305,  304,  301,  300,  299,
      298,  297,  296,  295,  294,  293,  292,  291,  290,  289,
      288,  287,  286,  285,  284,  283,  282,  281,  280,  269,
      258,  257,  256,  189,  252,  249,  248,  247,  246,  245,
      244,  243,  239,  238,  237,  236,  235,  234,  233,  232,
      231,  230,  229,  228,  227,  226,  225,  224,  223,  222,
      221,  220,  216,  203,  192,  185,  184,  183,  180,  179,
      178,  175,  174,  173,  172,  171,  168,  167,  166,  165,
      164,  163,  162,  161,  160,  159,  158,  157,  156,  155,

      154,  153,   92,   60,  122,  117,  116,  113,  112,  111,
      110,  109,  108,   95,   92,   62,   61,   60,   40,   39,
      705,   37,    3,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705
    } ;

static yyconst short int yy_chk[1071] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    5,   14,    5,
       14,   15,  708,   15,   15,   15,   15,   15,   38,   15,
       38,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   23,   24,   25,   23,   24,   25,   26,   27,  184,
       26,   27,   28,  184,   32,   28,   29,   32,   30,   29,
       25,   30,   40,   31,   40,   24,   31,   24,   26,   25,

       56,   30,   24,   24,   27,   25,   42,   42,   28,   30,
       29,   29,   26,   32,   56,   33,   29,   32,   33,   31,
       34,   35,   53,   34,   35,   31,   45,  707,   36,   37,
       44,   36,   37,   45,   44,   34,   45,   57,   53,   44,
       46,   45,   46,   45,   33,   44,   34,   35,   36,   36,
       37,   46,   57,   64,   65,   37,   64,   65,   66,   67,
       70,   66,   67,   70,   68,   69,   68,   71,   69,  119,
       71,  701,   68,   72,   66,   68,   72,  115,   73,   74,
       69,   73,   74,   69,   70,  119,  115,   75,   65,   67,
       75,   76,   77,  700,   76,   77,   71,   78,   79,   73,

       78,   79,   80,   81,   72,   80,   81,   77,   74,   83,
       75,   82,   83,   84,   82,  698,   84,   87,   76,   85,
       87,   88,   85,   89,   88,   86,   89,   80,   86,   90,
       84,  109,   90,   79,   81,   82,   85,  697,   86,   91,
       89,   87,   91,  109,  123,   85,  124,  123,  125,  124,
      282,  125,   88,  126,  127,  126,  127,  123,  239,  239,
       90,  126,  127,   91,  126,  127,  282,  129,  130,  125,
      129,  130,  131,  132,  133,  131,  132,  133,  134,  127,
      135,  134,  696,  135,  136,  131,  132,  136,  137,  130,
      352,  137,  127,  135,  133,  138,  129,  352,  138,  140,

      136,  141,  140,  142,  141,  695,  142,  143,  134,  144,
      143,  137,  144,  145,  146,  148,  145,  146,  148,  340,
      140,  143,  141,  147,  138,  693,  147,  149,  146,  155,
      149,  145,  148,  150,  151,  340,  150,  151,  144,  152,
      149,  691,  152,  155,  155,  690,  147,  176,  176,  186,
      176,  189,  186,  189,  151,  689,  152,  187,  150,  194,
      187,  193,  194,  196,  193,  195,  196,  688,  195,  198,
      197,  687,  198,  197,  199,  686,  187,  199,  193,  200,
      201,  685,  200,  201,  194,  186,  195,  197,  202,  204,
      205,  202,  204,  205,  196,  206,  209,  199,  206,  209,

      198,  207,  683,  208,  682,  202,  208,  207,  210,  681,
      207,  210,  206,  204,  205,  211,  201,  680,  211,  209,
      208,  212,  679,  213,  212,  210,  213,  214,  215,  253,
      214,  215,  253,  254,  259,  260,  254,  259,  260,  261,
      262,  678,  261,  262,  212,  677,  211,  259,  214,  676,
      263,  264,  260,  263,  264,  479,  479,  265,  254,  253,
      265,  262,  266,  267,  261,  266,  267,  270,  271,  268,
      270,  271,  268,  272,  274,  275,  272,  274,  275,  263,
      265,  264,  268,  276,  277,  675,  276,  277,  270,  271,
      278,  279,  275,  278,  279,  317,  318,  323,  317,  318,

      323,  324,  272,  274,  324,  277,  325,  326,  327,  325,
      326,  327,  328,  674,  329,  328,  279,  329,  332,  334,
      335,  332,  334,  335,  673,  336,  338,  323,  336,  338,
      672,  339,  671,  326,  339,  341,  343,  383,  341,  343,
      383,  384,  392,  338,  384,  392,  387,  389,  332,  387,
      389,  670,  669,  667,  383,  339,  334,  335,  390,  341,
      666,  390,  393,  387,  389,  393,  384,  392,  396,  431,
      432,  396,  431,  432,  435,  390,  437,  435,  438,  437,
      440,  438,  664,  440,  443,  396,  477,  443,  511,  477,
      663,  511,  662,  661,  660,  440,  657,  656,  655,  654,

      653,  652,  651,  477,  706,  706,  650,  649,  648,  647,
      646,  645,  644,  643,  642,  641,  640,  637,  636,  635,
      634,  633,  632,  631,  630,  629,  628,  627,  626,  625,
      624,  623,  622,  621,  620,  618,  617,  616,  615,  614,
      612,  611,  610,  609,  608,  607,  606,  605,  604,  602,
      601,  600,  599,  598,  597,  596,  595,  594,  593,  592,
      591,  590,  589,  588,  587,  585,  584,  583,  581,  579,
      578,  576,  575,  574,  573,  572,  571,  570,  569,  567,
      566,  564,  563,  562,  561,  560,  559,  557,  556,  555,
      554,  553,  552,  551,  550,  549,  548,  547,  545,  544,

      543,  542,  539,  538,  537,  536,  535,  534,  533,  532,
      530,  528,  527,  526,  525,  524,  523,  522,  521,  520,
      519,  518,  517,  516,  514,  513,  510,  509,  507,  506,
      505,  504,  503,  502,  501,  500,  499,  498,  497,  496,
      494,  492,  491,  490,  489,  488,  487,  486,  485,  484,
      482,  481,  480,  478,  476,  475,  474,  473,  472,  471,
      470,  469,  468,  467,  466,  465,  464,  463,  461,  460,
      459,  458,  457,  456,  454,  453,  452,  451,  450,  449,
      448,  447,  446,  445,  444,  441,  436,  434,  433,  430,
      428,  427,  426,  425,  424,  423,  421,  420,  419,  418,

      417,  415,  414,  413,  412,  410,  409,  408,  407,  406,
      405,  404,  403,  402,  401,  400,  399,  398,  397,  395,
      394,  391,  388,  386,  385,  382,  381,  380,  379,  377,
      375,  373,  372,  371,  370,  369,  368,  367,  366,  365,
      364,  361,  360,  359,  358,  357,  356,  355,  354,  350,
      349,  348,  347,  346,  345,  344,  342,  337,  333,  331,
      330,  322,  321,  319,  316,  315,  313,  312,  311,  310,
      309,  308,  307,  306,  305,  304,  303,  302,  301,  300,
      299,  298,  297,  296,  295,  294,  293,  292,  290,  289,
      288,  287,  286,  285,  284,  283,  281,  280,  273,  269,

      258,  257,  256,  255,  252,  251,  250,  249,  248,  247,
      246,  245,  244,  243,  242,  241,  240,  238,  237,  236,
      235,  234,  233,  231,  230,  229,  228,  227,  226,  225,
      224,  223,  222,  221,  220,  219,  218,  217,  216,  203,
      192,  191,  190,  188,  185,  183,  182,  181,  180,  179,
      178,  177,  175,  174,  173,  172,  171,  170,  169,  168,
      167,  166,  165,  164,  163,  162,  161,  160,  159,  158,
      157,  156,  153,  139,  128,  122,  121,  120,  118,  117,
      116,  114,  113,  112,  111,  110,  108,  107,  106,  105,
      104,  103,  102,  101,  100,   99,   98,   97,   96,   95,

       94,   93,   92,   59,   58,   55,   54,   52,   51,   50,
       49,   48,   47,   43,   41,   19,   17,   16,   12,    7,
        3,    2,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "pddl+.lex"
#define INITIAL 0
/*
  Charles Gretton (2008) says: This is a modified version of the pddl
  lexer presumably written by Simon Cresswell from the Strathclyde
  Planning Group.
  
  s.n.cresswell@durham.ac.uk
  Derek Long

  Srathclyde Planning Group
  http://planning.cis.ac.uk

*/
#line 15 "pddl+.lex"

#include <string>

#include <fstream>
  using std::cin;
  using std::cout;
  using std::cerr;
  using std::istream;
  //using namespace VAL;
  
#ifdef OLD_FLEX
  extern "C" int yywrap();
#endif

#line 824 "lex.yy.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp = NULL, *yy_bp = NULL;
	register int yy_act;

#line 42 "pddl+.lex"

#line 956 "lex.yy.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &std::cin;

		if ( ! yyout )
			yyout = &std::cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 706 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1023 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 43 "pddl+.lex"
{return OPEN_BRAC;}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 44 "pddl+.lex"
{return CLOSE_BRAC;}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 45 "pddl+.lex"
{return OPEN_SQ;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 46 "pddl+.lex"
{return CLOSE_SQ;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 47 "pddl+.lex"
{return REQS;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 48 "pddl+.lex"
{return EQUALITY;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 49 "pddl+.lex"
{return STRIPS;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 50 "pddl+.lex"
{return ADL;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 51 "pddl+.lex"
{return TYPING;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 52 "pddl+.lex"
{return DISJUNCTIVE_PRECONDS;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 53 "pddl+.lex"
{return EXT_PRECS;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 54 "pddl+.lex"
{return UNIV_PRECS;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 55 "pddl+.lex"
{return QUANT_PRECS;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 56 "pddl+.lex"
{return COND_EFFS;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 57 "pddl+.lex"
{return FLUENTS;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 58 "pddl+.lex"
{return TIME;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 59 "pddl+.lex"
{return PREFERENCES;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 60 "pddl+.lex"
{return CONSTRAINTS;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 61 "pddl+.lex"
{return CONSTANTS;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 62 "pddl+.lex"
{return PREDS;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 63 "pddl+.lex"
{return FUNCTIONS;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 64 "pddl+.lex"
{return TYPES;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 65 "pddl+.lex"
{return DURATIVE_ACTIONS;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 66 "pddl+.lex"
{return DURATION_INEQUALITIES;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 67 "pddl+.lex"
{return CONTINUOUS_EFFECTS;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 68 "pddl+.lex"
{return NEGATIVE_PRECONDITIONS;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 69 "pddl+.lex"
{return DERIVED_PREDICATES;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 70 "pddl+.lex"
{return TIMED_INITIAL_LITERALS;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 71 "pddl+.lex"
{return DEFINE;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 72 "pddl+.lex"
{return PDDLDOMAIN;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 73 "pddl+.lex"
{return ACTION_COSTS;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 74 "pddl+.lex"
{return NUMBER;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 75 "pddl+.lex"
{return ACTION;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 76 "pddl+.lex"
{return PROCESS;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 77 "pddl+.lex"
{return EVENT;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 78 "pddl+.lex"
{return DURATIVE_ACTION;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 79 "pddl+.lex"
{return DERIVED;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 80 "pddl+.lex"
{return ARGS;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 81 "pddl+.lex"
{return PRE;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 82 "pddl+.lex"
{return CONDITION;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 83 "pddl+.lex"
{return START_PRE;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 84 "pddl+.lex"
{return END_PRE;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 85 "pddl+.lex"
{return AT_START;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 86 "pddl+.lex"
{return AT_END;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 87 "pddl+.lex"
{return OVER_ALL;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 88 "pddl+.lex"
{return EFFECTS;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 89 "pddl+.lex"
{return INITIAL_EFFECT;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 90 "pddl+.lex"
{return FINAL_EFFECT;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 91 "pddl+.lex"
{return INVARIANT;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 92 "pddl+.lex"
{return DURATION;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 93 "pddl+.lex"
{return AND;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 94 "pddl+.lex"
{return OR;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 95 "pddl+.lex"
{return EXISTS;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 96 "pddl+.lex"
{return FORALL;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 97 "pddl+.lex"
{return IMPLY;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 98 "pddl+.lex"
{return NOT;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 99 "pddl+.lex"
{return WHEN;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 100 "pddl+.lex"
{return EITHER;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 101 "pddl+.lex"
{return PROBLEM;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 102 "pddl+.lex"
{return FORDOMAIN;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 103 "pddl+.lex"
{return OBJECTS;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 104 "pddl+.lex"
{return INITIALLY;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 105 "pddl+.lex"
{return GOALS;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 106 "pddl+.lex"
{return EQ;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 107 "pddl+.lex"
{return LENGTH;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 108 "pddl+.lex"
{return SERIAL;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 109 "pddl+.lex"
{return PARALLEL;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 110 "pddl+.lex"
{return METRIC;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 111 "pddl+.lex"
{return MINIMIZE;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 112 "pddl+.lex"
{return MAXIMIZE;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 113 "pddl+.lex"
{return ISVIOLATED;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 114 "pddl+.lex"
{return HASHT;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 115 "pddl+.lex"
{return DURATION_VAR;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 116 "pddl+.lex"
{return TOTAL_TIME;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 117 "pddl+.lex"
{return TIME;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 118 "pddl+.lex"
{return INCREASE;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 119 "pddl+.lex"
{return DECREASE;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 120 "pddl+.lex"
{return SCALE_UP;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 121 "pddl+.lex"
{return SCALE_DOWN;}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 122 "pddl+.lex"
{return ASSIGN;}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 123 "pddl+.lex"
{return PREFERENCE;}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 124 "pddl+.lex"
{return ALWAYS;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 125 "pddl+.lex"
{return SOMETIME;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 126 "pddl+.lex"
{return WITHIN;}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 127 "pddl+.lex"
{return ATMOSTONCE;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 128 "pddl+.lex"
{return SOMETIMEAFTER;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 129 "pddl+.lex"
{return SOMETIMEBEFORE;}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 130 "pddl+.lex"
{return ALWAYSWITHIN;}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 131 "pddl+.lex"
{return HOLDDURING;}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 132 "pddl+.lex"
{return HOLDAFTER;}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 133 "pddl+.lex"
{return PLUS;}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 134 "pddl+.lex"
{return HYPHEN;}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 135 "pddl+.lex"
{return MUL;}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 136 "pddl+.lex"
{return DIV;}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 137 "pddl+.lex"
{return GREATER;}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 138 "pddl+.lex"
{return GREATEQ;}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 139 "pddl+.lex"
{return LESS;}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 140 "pddl+.lex"
{return LESSEQ;}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 141 "pddl+.lex"
{return Q;}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 142 "pddl+.lex"
{return COLON;}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 144 "pddl+.lex"
{unsigned int i;
           for(i = 3;i < strlen(yytext);++i)
           {
           	  if(yytext[i] != '\t' && yytext[i] != ' ') break;
           };
           yylval./*fval*/real = atof(yytext+i);
			return (AT_TIME);
          }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 154 "pddl+.lex"
{unsigned int i;
    
	  for(i = 0;i<strlen(yytext);i++)
	      yytext[i] = tolower(yytext[i]);
	  yylval.str = new string(yytext);
    
//           yylval.str = new char[strlen(yytext)+1];
//           strcpy(yylval.str,yytext);
// 	  /*Charles ::Tue Oct 30 14:07:51 EST 2007 :: Not sure why the
// 	   * string is being converted to lower case here...*/
// 	  for(i = 0;i<strlen(yylval.str);i++)
// 	      yylval.str[i] = tolower(yylval.str[i]);
// 	  // If symbol is registered as a function symbol,
// 	  // return token FUNCTION_SYMBOL else return NAME
// 	  //cout << yytext << " " << line_no << "\n";
	  if (false)//current_analysis->func_tab.symbol_probe(yylval.str) != NULL)
	      return FUNCTION_SYMBOL;
	  else
	      return NAME;

}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 176 "pddl+.lex"
;
	YY_BREAK
case 104:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 177 "pddl+.lex"
;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 178 "pddl+.lex"
{line_no++;};
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 180 "pddl+.lex"
{yylval.integer = atoi(yytext);return (INTVAL);}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 181 "pddl+.lex"
{yylval.real = atof(yytext);return (FLOATVAL);}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 183 "pddl+.lex"
ECHO;
	YY_BREAK
#line 1610 "lex.yy.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 706 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 706 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 705);

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');

	return c;
	}

void yyFlexLexer::yyrestart( std::istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	std::cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 183 "pddl+.lex"


#ifdef OLD_FLEX
extern "C" {
    int yywrap()
    {
	return 1;
    };
};
#else
int yyFlexLexer::yywrap()
{
	return 1;
}
#endif
