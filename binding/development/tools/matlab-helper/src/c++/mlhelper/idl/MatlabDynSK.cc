// This file is generated by omniidl (C++ backend) - omniORB_4_1. Do not edit.

#include "Matlab.hh"

OMNI_USING_NAMESPACE(omni)

static const char* _0RL_dyn_library_version = omniORB_4_1_dyn;

static ::CORBA::TypeCode::_Tracker _0RL_tcTrack(__FILE__);

static CORBA::TypeCode_ptr _0RL_tc_Matlab_mlongSeq = CORBA::TypeCode::PR_alias_tc("IDL:Matlab/longSeq:1.0", "longSeq", CORBA::TypeCode::PR_sequence_tc(0, CORBA::TypeCode::PR_long_tc(), &_0RL_tcTrack), &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace Matlab { 
  const ::CORBA::TypeCode_ptr _tc_longSeq = _0RL_tc_Matlab_mlongSeq;
} 
#else
const ::CORBA::TypeCode_ptr Matlab::_tc_longSeq = _0RL_tc_Matlab_mlongSeq;
#endif

static CORBA::TypeCode_ptr _0RL_tc_Matlab_mdoubleSeq = CORBA::TypeCode::PR_alias_tc("IDL:Matlab/doubleSeq:1.0", "doubleSeq", CORBA::TypeCode::PR_sequence_tc(0, CORBA::TypeCode::PR_double_tc(), &_0RL_tcTrack), &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace Matlab { 
  const ::CORBA::TypeCode_ptr _tc_doubleSeq = _0RL_tc_Matlab_mdoubleSeq;
} 
#else
const ::CORBA::TypeCode_ptr Matlab::_tc_doubleSeq = _0RL_tc_Matlab_mdoubleSeq;
#endif

static CORBA::PR_structMember _0RL_structmember_Matlab_mMatrix[] = {
  {"dimensions_", _0RL_tc_Matlab_mlongSeq},
  {"data_", _0RL_tc_Matlab_mdoubleSeq}
};

#ifdef _0RL_tc_Matlab_mMatrix
#  undef _0RL_tc_Matlab_mMatrix
#endif
static CORBA::TypeCode_ptr _0RL_tc_Matlab_mMatrix = CORBA::TypeCode::PR_struct_tc("IDL:Matlab/Matrix:1.0", "Matrix", _0RL_structmember_Matlab_mMatrix, 2, &_0RL_tcTrack);

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace Matlab { 
  const ::CORBA::TypeCode_ptr _tc_Matrix = _0RL_tc_Matlab_mMatrix;
} 
#else
const ::CORBA::TypeCode_ptr Matlab::_tc_Matrix = _0RL_tc_Matlab_mMatrix;
#endif


static void _0RL_Matlab_mlongSeq_marshal_fn(cdrStream& _s, void* _v)
{
  Matlab::longSeq* _p = (Matlab::longSeq*)_v;
  *_p >>= _s;
}
static void _0RL_Matlab_mlongSeq_unmarshal_fn(cdrStream& _s, void*& _v)
{
  Matlab::longSeq* _p = new Matlab::longSeq;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_Matlab_mlongSeq_destructor_fn(void* _v)
{
  Matlab::longSeq* _p = (Matlab::longSeq*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const Matlab::longSeq& _s)
{
  Matlab::longSeq* _p = new Matlab::longSeq(_s);
  _a.PR_insert(_0RL_tc_Matlab_mlongSeq,
               _0RL_Matlab_mlongSeq_marshal_fn,
               _0RL_Matlab_mlongSeq_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, Matlab::longSeq* _sp)
{
  _a.PR_insert(_0RL_tc_Matlab_mlongSeq,
               _0RL_Matlab_mlongSeq_marshal_fn,
               _0RL_Matlab_mlongSeq_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, Matlab::longSeq*& _sp)
{
  return _a >>= (const Matlab::longSeq*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const Matlab::longSeq*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_Matlab_mlongSeq,
                    _0RL_Matlab_mlongSeq_unmarshal_fn,
                    _0RL_Matlab_mlongSeq_marshal_fn,
                    _0RL_Matlab_mlongSeq_destructor_fn,
                    _v)) {
    _sp = (const Matlab::longSeq*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_Matlab_mdoubleSeq_marshal_fn(cdrStream& _s, void* _v)
{
  Matlab::doubleSeq* _p = (Matlab::doubleSeq*)_v;
  *_p >>= _s;
}
static void _0RL_Matlab_mdoubleSeq_unmarshal_fn(cdrStream& _s, void*& _v)
{
  Matlab::doubleSeq* _p = new Matlab::doubleSeq;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_Matlab_mdoubleSeq_destructor_fn(void* _v)
{
  Matlab::doubleSeq* _p = (Matlab::doubleSeq*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const Matlab::doubleSeq& _s)
{
  Matlab::doubleSeq* _p = new Matlab::doubleSeq(_s);
  _a.PR_insert(_0RL_tc_Matlab_mdoubleSeq,
               _0RL_Matlab_mdoubleSeq_marshal_fn,
               _0RL_Matlab_mdoubleSeq_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, Matlab::doubleSeq* _sp)
{
  _a.PR_insert(_0RL_tc_Matlab_mdoubleSeq,
               _0RL_Matlab_mdoubleSeq_marshal_fn,
               _0RL_Matlab_mdoubleSeq_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, Matlab::doubleSeq*& _sp)
{
  return _a >>= (const Matlab::doubleSeq*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const Matlab::doubleSeq*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_Matlab_mdoubleSeq,
                    _0RL_Matlab_mdoubleSeq_unmarshal_fn,
                    _0RL_Matlab_mdoubleSeq_marshal_fn,
                    _0RL_Matlab_mdoubleSeq_destructor_fn,
                    _v)) {
    _sp = (const Matlab::doubleSeq*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_Matlab_mMatrix_marshal_fn(cdrStream& _s, void* _v)
{
  Matlab::Matrix* _p = (Matlab::Matrix*)_v;
  *_p >>= _s;
}
static void _0RL_Matlab_mMatrix_unmarshal_fn(cdrStream& _s, void*& _v)
{
  Matlab::Matrix* _p = new Matlab::Matrix;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_Matlab_mMatrix_destructor_fn(void* _v)
{
  Matlab::Matrix* _p = (Matlab::Matrix*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const Matlab::Matrix& _s)
{
  Matlab::Matrix* _p = new Matlab::Matrix(_s);
  _a.PR_insert(_0RL_tc_Matlab_mMatrix,
               _0RL_Matlab_mMatrix_marshal_fn,
               _0RL_Matlab_mMatrix_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, Matlab::Matrix* _sp)
{
  _a.PR_insert(_0RL_tc_Matlab_mMatrix,
               _0RL_Matlab_mMatrix_marshal_fn,
               _0RL_Matlab_mMatrix_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, Matlab::Matrix*& _sp)
{
  return _a >>= (const Matlab::Matrix*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const Matlab::Matrix*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_Matlab_mMatrix,
                    _0RL_Matlab_mMatrix_unmarshal_fn,
                    _0RL_Matlab_mMatrix_marshal_fn,
                    _0RL_Matlab_mMatrix_destructor_fn,
                    _v)) {
    _sp = (const Matlab::Matrix*)_v;
    return 1;
  }
  return 0;
}

