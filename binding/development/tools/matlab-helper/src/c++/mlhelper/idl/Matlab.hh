// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __Matlab_hh__
#define __Matlab_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_Matlab
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_Matlab
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_Matlab
#endif






#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE Matlab

_CORBA_MODULE_BEG

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_longSeq;

  class longSeq_var;

  class longSeq : public _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Long, 4, 4 >  {
  public:
    typedef longSeq_var _var_type;
    inline longSeq() {}
    inline longSeq(const longSeq& _s)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Long, 4, 4 > (_s) {}

    inline longSeq(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Long, 4, 4 > (_max) {}
    inline longSeq(_CORBA_ULong _max, _CORBA_ULong _len, ::CORBA::Long* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Long, 4, 4 > (_max, _len, _val, _rel) {}

  

    inline longSeq& operator = (const longSeq& _s) {
      _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Long, 4, 4 > ::operator=(_s);
      return *this;
    }
  };

  class longSeq_out;

  class longSeq_var {
  public:
    inline longSeq_var() : _pd_seq(0) {}
    inline longSeq_var(longSeq* _s) : _pd_seq(_s) {}
    inline longSeq_var(const longSeq_var& _s) {
      if( _s._pd_seq )  _pd_seq = new longSeq(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~longSeq_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline longSeq_var& operator = (longSeq* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline longSeq_var& operator = (const longSeq_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new longSeq;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline ::CORBA::Long& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline longSeq* operator -> () { return _pd_seq; }
    inline const longSeq* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator longSeq& () const { return *_pd_seq; }
#else
    inline operator const longSeq& () const { return *_pd_seq; }
    inline operator longSeq& () { return *_pd_seq; }
#endif
      
    inline const longSeq& in() const { return *_pd_seq; }
    inline longSeq&       inout()    { return *_pd_seq; }
    inline longSeq*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline longSeq* _retn() { longSeq* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class longSeq_out;
    
  private:
    longSeq* _pd_seq;
  };

  class longSeq_out {
  public:
    inline longSeq_out(longSeq*& _s) : _data(_s) { _data = 0; }
    inline longSeq_out(longSeq_var& _s)
      : _data(_s._pd_seq) { _s = (longSeq*) 0; }
    inline longSeq_out(const longSeq_out& _s) : _data(_s._data) {}
    inline longSeq_out& operator = (const longSeq_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline longSeq_out& operator = (longSeq* _s) {
      _data = _s;
      return *this;
    }
    inline operator longSeq*&()  { return _data; }
    inline longSeq*& ptr()       { return _data; }
    inline longSeq* operator->() { return _data; }

    inline ::CORBA::Long& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    longSeq*& _data;

  private:
    longSeq_out();
    longSeq_out& operator=(const longSeq_var&);
  };

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_doubleSeq;

  class doubleSeq_var;

  class doubleSeq : public _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Double, 8, 8 >  {
  public:
    typedef doubleSeq_var _var_type;
    inline doubleSeq() {}
    inline doubleSeq(const doubleSeq& _s)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Double, 8, 8 > (_s) {}

    inline doubleSeq(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Double, 8, 8 > (_max) {}
    inline doubleSeq(_CORBA_ULong _max, _CORBA_ULong _len, ::CORBA::Double* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Double, 8, 8 > (_max, _len, _val, _rel) {}

  

    inline doubleSeq& operator = (const doubleSeq& _s) {
      _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Double, 8, 8 > ::operator=(_s);
      return *this;
    }
  };

  class doubleSeq_out;

  class doubleSeq_var {
  public:
    inline doubleSeq_var() : _pd_seq(0) {}
    inline doubleSeq_var(doubleSeq* _s) : _pd_seq(_s) {}
    inline doubleSeq_var(const doubleSeq_var& _s) {
      if( _s._pd_seq )  _pd_seq = new doubleSeq(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~doubleSeq_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline doubleSeq_var& operator = (doubleSeq* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline doubleSeq_var& operator = (const doubleSeq_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new doubleSeq;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline ::CORBA::Double& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline doubleSeq* operator -> () { return _pd_seq; }
    inline const doubleSeq* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator doubleSeq& () const { return *_pd_seq; }
#else
    inline operator const doubleSeq& () const { return *_pd_seq; }
    inline operator doubleSeq& () { return *_pd_seq; }
#endif
      
    inline const doubleSeq& in() const { return *_pd_seq; }
    inline doubleSeq&       inout()    { return *_pd_seq; }
    inline doubleSeq*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline doubleSeq* _retn() { doubleSeq* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class doubleSeq_out;
    
  private:
    doubleSeq* _pd_seq;
  };

  class doubleSeq_out {
  public:
    inline doubleSeq_out(doubleSeq*& _s) : _data(_s) { _data = 0; }
    inline doubleSeq_out(doubleSeq_var& _s)
      : _data(_s._pd_seq) { _s = (doubleSeq*) 0; }
    inline doubleSeq_out(const doubleSeq_out& _s) : _data(_s._data) {}
    inline doubleSeq_out& operator = (const doubleSeq_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline doubleSeq_out& operator = (doubleSeq* _s) {
      _data = _s;
      return *this;
    }
    inline operator doubleSeq*&()  { return _data; }
    inline doubleSeq*& ptr()       { return _data; }
    inline doubleSeq* operator->() { return _data; }

    inline ::CORBA::Double& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    doubleSeq*& _data;

  private:
    doubleSeq_out();
    doubleSeq_out& operator=(const doubleSeq_var&);
  };

  struct Matrix {
    typedef _CORBA_ConstrType_Variable_Var<Matrix> _var_type;

    
    longSeq dimensions_;

    doubleSeq data_;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef Matrix::_var_type Matrix_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< Matrix,Matrix_var > Matrix_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_Matrix;

_CORBA_MODULE_END



_CORBA_MODULE POA_Matlab
_CORBA_MODULE_BEG

_CORBA_MODULE_END



_CORBA_MODULE OBV_Matlab
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

void operator<<=(::CORBA::Any& _a, const Matlab::longSeq& _s);
void operator<<=(::CORBA::Any& _a, Matlab::longSeq* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, Matlab::longSeq*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const Matlab::longSeq*& _sp);

void operator<<=(::CORBA::Any& _a, const Matlab::doubleSeq& _s);
void operator<<=(::CORBA::Any& _a, Matlab::doubleSeq* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, Matlab::doubleSeq*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const Matlab::doubleSeq*& _sp);

extern void operator<<=(::CORBA::Any& _a, const Matlab::Matrix& _s);
extern void operator<<=(::CORBA::Any& _a, Matlab::Matrix* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, Matlab::Matrix*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const Matlab::Matrix*& _sp);





#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_Matlab
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_Matlab
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_Matlab
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_Matlab
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_Matlab
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_Matlab
#endif

#endif  // __Matlab_hh__

