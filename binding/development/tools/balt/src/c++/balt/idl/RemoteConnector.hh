// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __RemoteConnector_hh__
#define __RemoteConnector_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_RemoteConnector
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_RemoteConnector
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_RemoteConnector
#endif



#ifndef __FrameworkData_hh_EXTERNAL_GUARD__
#define __FrameworkData_hh_EXTERNAL_GUARD__
#include <balt/idl/FrameworkData.hh>
#endif
#ifndef __FrameworkBasics_hh_EXTERNAL_GUARD__
#define __FrameworkBasics_hh_EXTERNAL_GUARD__
#include <balt/idl/FrameworkBasics.hh>
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE RemoteConnectors

_CORBA_MODULE_BEG

#ifndef __RemoteConnectors_mRemotePushReceiver__
#define __RemoteConnectors_mRemotePushReceiver__

  class RemotePushReceiver;
  class _objref_RemotePushReceiver;
  class _impl_RemotePushReceiver;
  
  typedef _objref_RemotePushReceiver* RemotePushReceiver_ptr;
  typedef RemotePushReceiver_ptr RemotePushReceiverRef;

  class RemotePushReceiver_Helper {
  public:
    typedef RemotePushReceiver_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_RemotePushReceiver, RemotePushReceiver_Helper> RemotePushReceiver_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_RemotePushReceiver,RemotePushReceiver_Helper > RemotePushReceiver_out;

#endif

  // interface RemotePushReceiver
  class RemotePushReceiver {
  public:
    // Declarations for this interface type.
    typedef RemotePushReceiver_ptr _ptr_type;
    typedef RemotePushReceiver_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    
  };

  class _objref_RemotePushReceiver :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    void receivePushData(const char* src, const ::CORBA::Any& data);

    inline _objref_RemotePushReceiver()  { _PR_setobj(0); }  // nil
    _objref_RemotePushReceiver(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_RemotePushReceiver();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_RemotePushReceiver(const _objref_RemotePushReceiver&);
    _objref_RemotePushReceiver& operator = (const _objref_RemotePushReceiver&);
    // not implemented

    friend class RemotePushReceiver;
  };

  class _pof_RemotePushReceiver : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_RemotePushReceiver() : _OMNI_NS(proxyObjectFactory)(RemotePushReceiver::_PD_repoId) {}
    virtual ~_pof_RemotePushReceiver();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_RemotePushReceiver :
    public virtual omniServant
  {
  public:
    virtual ~_impl_RemotePushReceiver();

    virtual void receivePushData(const char* src, const ::CORBA::Any& data) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_RemotePushReceiver;

#ifndef __RemoteConnectors_mRemotePushConnector__
#define __RemoteConnectors_mRemotePushConnector__

  class RemotePushConnector;
  class _objref_RemotePushConnector;
  class _impl_RemotePushConnector;
  
  typedef _objref_RemotePushConnector* RemotePushConnector_ptr;
  typedef RemotePushConnector_ptr RemotePushConnectorRef;

  class RemotePushConnector_Helper {
  public:
    typedef RemotePushConnector_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_RemotePushConnector, RemotePushConnector_Helper> RemotePushConnector_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_RemotePushConnector,RemotePushConnector_Helper > RemotePushConnector_out;

#endif

  // interface RemotePushConnector
  class RemotePushConnector {
  public:
    // Declarations for this interface type.
    typedef RemotePushConnector_ptr _ptr_type;
    typedef RemotePushConnector_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    
  };

  class _objref_RemotePushConnector :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    void push(const char* src, const ::CORBA::Any& data);
    void flush();
    void registerPushReceiver(RemotePushReceiver_ptr pr);

    inline _objref_RemotePushConnector()  { _PR_setobj(0); }  // nil
    _objref_RemotePushConnector(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_RemotePushConnector();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_RemotePushConnector(const _objref_RemotePushConnector&);
    _objref_RemotePushConnector& operator = (const _objref_RemotePushConnector&);
    // not implemented

    friend class RemotePushConnector;
  };

  class _pof_RemotePushConnector : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_RemotePushConnector() : _OMNI_NS(proxyObjectFactory)(RemotePushConnector::_PD_repoId) {}
    virtual ~_pof_RemotePushConnector();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_RemotePushConnector :
    public virtual omniServant
  {
  public:
    virtual ~_impl_RemotePushConnector();

    virtual void push(const char* src, const ::CORBA::Any& data) = 0;
    virtual void flush() = 0;
    virtual void registerPushReceiver(RemotePushReceiver_ptr pr) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_RemotePushConnector;

#ifndef __RemoteConnectors_mRemotePushSender__
#define __RemoteConnectors_mRemotePushSender__

  class RemotePushSender;
  class _objref_RemotePushSender;
  class _impl_RemotePushSender;
  
  typedef _objref_RemotePushSender* RemotePushSender_ptr;
  typedef RemotePushSender_ptr RemotePushSenderRef;

  class RemotePushSender_Helper {
  public:
    typedef RemotePushSender_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_RemotePushSender, RemotePushSender_Helper> RemotePushSender_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_RemotePushSender,RemotePushSender_Helper > RemotePushSender_out;

#endif

  // interface RemotePushSender
  class RemotePushSender {
  public:
    // Declarations for this interface type.
    typedef RemotePushSender_ptr _ptr_type;
    typedef RemotePushSender_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    
  };

  class _objref_RemotePushSender :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    void setPushConnector(RemotePushConnector_ptr out);

    inline _objref_RemotePushSender()  { _PR_setobj(0); }  // nil
    _objref_RemotePushSender(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_RemotePushSender();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_RemotePushSender(const _objref_RemotePushSender&);
    _objref_RemotePushSender& operator = (const _objref_RemotePushSender&);
    // not implemented

    friend class RemotePushSender;
  };

  class _pof_RemotePushSender : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_RemotePushSender() : _OMNI_NS(proxyObjectFactory)(RemotePushSender::_PD_repoId) {}
    virtual ~_pof_RemotePushSender();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_RemotePushSender :
    public virtual omniServant
  {
  public:
    virtual ~_impl_RemotePushSender();

    virtual void setPushConnector(RemotePushConnector_ptr out) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_RemotePushSender;

#ifndef __RemoteConnectors_mRemotePullReceiver__
#define __RemoteConnectors_mRemotePullReceiver__

  class RemotePullReceiver;
  class _objref_RemotePullReceiver;
  class _impl_RemotePullReceiver;
  
  typedef _objref_RemotePullReceiver* RemotePullReceiver_ptr;
  typedef RemotePullReceiver_ptr RemotePullReceiverRef;

  class RemotePullReceiver_Helper {
  public:
    typedef RemotePullReceiver_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_RemotePullReceiver, RemotePullReceiver_Helper> RemotePullReceiver_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_RemotePullReceiver,RemotePullReceiver_Helper > RemotePullReceiver_out;

#endif

  // interface RemotePullReceiver
  class RemotePullReceiver {
  public:
    // Declarations for this interface type.
    typedef RemotePullReceiver_ptr _ptr_type;
    typedef RemotePullReceiver_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    
  };

  class _objref_RemotePullReceiver :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    ::CORBA::Any* receivePullQuery(const char* src, const char* query);

    inline _objref_RemotePullReceiver()  { _PR_setobj(0); }  // nil
    _objref_RemotePullReceiver(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_RemotePullReceiver();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_RemotePullReceiver(const _objref_RemotePullReceiver&);
    _objref_RemotePullReceiver& operator = (const _objref_RemotePullReceiver&);
    // not implemented

    friend class RemotePullReceiver;
  };

  class _pof_RemotePullReceiver : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_RemotePullReceiver() : _OMNI_NS(proxyObjectFactory)(RemotePullReceiver::_PD_repoId) {}
    virtual ~_pof_RemotePullReceiver();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_RemotePullReceiver :
    public virtual omniServant
  {
  public:
    virtual ~_impl_RemotePullReceiver();

    virtual ::CORBA::Any* receivePullQuery(const char* src, const char* query) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_RemotePullReceiver;

#ifndef __RemoteConnectors_mRemotePullConnector__
#define __RemoteConnectors_mRemotePullConnector__

  class RemotePullConnector;
  class _objref_RemotePullConnector;
  class _impl_RemotePullConnector;
  
  typedef _objref_RemotePullConnector* RemotePullConnector_ptr;
  typedef RemotePullConnector_ptr RemotePullConnectorRef;

  class RemotePullConnector_Helper {
  public:
    typedef RemotePullConnector_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_RemotePullConnector, RemotePullConnector_Helper> RemotePullConnector_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_RemotePullConnector,RemotePullConnector_Helper > RemotePullConnector_out;

#endif

  // interface RemotePullConnector
  class RemotePullConnector {
  public:
    // Declarations for this interface type.
    typedef RemotePullConnector_ptr _ptr_type;
    typedef RemotePullConnector_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    
  };

  class _objref_RemotePullConnector :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    ::CORBA::Any* pull(const char* src, const char* query);
    void registerPullReceiver(RemotePullReceiver_ptr pr);

    inline _objref_RemotePullConnector()  { _PR_setobj(0); }  // nil
    _objref_RemotePullConnector(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_RemotePullConnector();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_RemotePullConnector(const _objref_RemotePullConnector&);
    _objref_RemotePullConnector& operator = (const _objref_RemotePullConnector&);
    // not implemented

    friend class RemotePullConnector;
  };

  class _pof_RemotePullConnector : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_RemotePullConnector() : _OMNI_NS(proxyObjectFactory)(RemotePullConnector::_PD_repoId) {}
    virtual ~_pof_RemotePullConnector();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_RemotePullConnector :
    public virtual omniServant
  {
  public:
    virtual ~_impl_RemotePullConnector();

    virtual ::CORBA::Any* pull(const char* src, const char* query) = 0;
    virtual void registerPullReceiver(RemotePullReceiver_ptr pr) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_RemotePullConnector;

#ifndef __RemoteConnectors_mRemotePullSender__
#define __RemoteConnectors_mRemotePullSender__

  class RemotePullSender;
  class _objref_RemotePullSender;
  class _impl_RemotePullSender;
  
  typedef _objref_RemotePullSender* RemotePullSender_ptr;
  typedef RemotePullSender_ptr RemotePullSenderRef;

  class RemotePullSender_Helper {
  public:
    typedef RemotePullSender_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_RemotePullSender, RemotePullSender_Helper> RemotePullSender_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_RemotePullSender,RemotePullSender_Helper > RemotePullSender_out;

#endif

  // interface RemotePullSender
  class RemotePullSender {
  public:
    // Declarations for this interface type.
    typedef RemotePullSender_ptr _ptr_type;
    typedef RemotePullSender_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    
  };

  class _objref_RemotePullSender :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    void setPullConnector(RemotePullConnector_ptr out);

    inline _objref_RemotePullSender()  { _PR_setobj(0); }  // nil
    _objref_RemotePullSender(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_RemotePullSender();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_RemotePullSender(const _objref_RemotePullSender&);
    _objref_RemotePullSender& operator = (const _objref_RemotePullSender&);
    // not implemented

    friend class RemotePullSender;
  };

  class _pof_RemotePullSender : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_RemotePullSender() : _OMNI_NS(proxyObjectFactory)(RemotePullSender::_PD_repoId) {}
    virtual ~_pof_RemotePullSender();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_RemotePullSender :
    public virtual omniServant
  {
  public:
    virtual ~_impl_RemotePullSender();

    virtual void setPullConnector(RemotePullConnector_ptr out) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_RemotePullSender;

_CORBA_MODULE_END



_CORBA_MODULE POA_RemoteConnectors
_CORBA_MODULE_BEG

  class RemotePushReceiver :
    public virtual RemoteConnectors::_impl_RemotePushReceiver,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~RemotePushReceiver();

    inline ::RemoteConnectors::RemotePushReceiver_ptr _this() {
      return (::RemoteConnectors::RemotePushReceiver_ptr) _do_this(::RemoteConnectors::RemotePushReceiver::_PD_repoId);
    }
  };

  class RemotePushConnector :
    public virtual RemoteConnectors::_impl_RemotePushConnector,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~RemotePushConnector();

    inline ::RemoteConnectors::RemotePushConnector_ptr _this() {
      return (::RemoteConnectors::RemotePushConnector_ptr) _do_this(::RemoteConnectors::RemotePushConnector::_PD_repoId);
    }
  };

  class RemotePushSender :
    public virtual RemoteConnectors::_impl_RemotePushSender,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~RemotePushSender();

    inline ::RemoteConnectors::RemotePushSender_ptr _this() {
      return (::RemoteConnectors::RemotePushSender_ptr) _do_this(::RemoteConnectors::RemotePushSender::_PD_repoId);
    }
  };

  class RemotePullReceiver :
    public virtual RemoteConnectors::_impl_RemotePullReceiver,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~RemotePullReceiver();

    inline ::RemoteConnectors::RemotePullReceiver_ptr _this() {
      return (::RemoteConnectors::RemotePullReceiver_ptr) _do_this(::RemoteConnectors::RemotePullReceiver::_PD_repoId);
    }
  };

  class RemotePullConnector :
    public virtual RemoteConnectors::_impl_RemotePullConnector,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~RemotePullConnector();

    inline ::RemoteConnectors::RemotePullConnector_ptr _this() {
      return (::RemoteConnectors::RemotePullConnector_ptr) _do_this(::RemoteConnectors::RemotePullConnector::_PD_repoId);
    }
  };

  class RemotePullSender :
    public virtual RemoteConnectors::_impl_RemotePullSender,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~RemotePullSender();

    inline ::RemoteConnectors::RemotePullSender_ptr _this() {
      return (::RemoteConnectors::RemotePullSender_ptr) _do_this(::RemoteConnectors::RemotePullSender::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_RemoteConnectors
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

void operator<<=(::CORBA::Any& _a, RemoteConnectors::RemotePushReceiver_ptr _s);
void operator<<=(::CORBA::Any& _a, RemoteConnectors::RemotePushReceiver_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, RemoteConnectors::RemotePushReceiver_ptr& _s);

void operator<<=(::CORBA::Any& _a, RemoteConnectors::RemotePushConnector_ptr _s);
void operator<<=(::CORBA::Any& _a, RemoteConnectors::RemotePushConnector_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, RemoteConnectors::RemotePushConnector_ptr& _s);

void operator<<=(::CORBA::Any& _a, RemoteConnectors::RemotePushSender_ptr _s);
void operator<<=(::CORBA::Any& _a, RemoteConnectors::RemotePushSender_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, RemoteConnectors::RemotePushSender_ptr& _s);

void operator<<=(::CORBA::Any& _a, RemoteConnectors::RemotePullReceiver_ptr _s);
void operator<<=(::CORBA::Any& _a, RemoteConnectors::RemotePullReceiver_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, RemoteConnectors::RemotePullReceiver_ptr& _s);

void operator<<=(::CORBA::Any& _a, RemoteConnectors::RemotePullConnector_ptr _s);
void operator<<=(::CORBA::Any& _a, RemoteConnectors::RemotePullConnector_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, RemoteConnectors::RemotePullConnector_ptr& _s);

void operator<<=(::CORBA::Any& _a, RemoteConnectors::RemotePullSender_ptr _s);
void operator<<=(::CORBA::Any& _a, RemoteConnectors::RemotePullSender_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, RemoteConnectors::RemotePullSender_ptr& _s);



inline void
RemoteConnectors::RemotePushReceiver::_marshalObjRef(::RemoteConnectors::RemotePushReceiver_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}


inline void
RemoteConnectors::RemotePushConnector::_marshalObjRef(::RemoteConnectors::RemotePushConnector_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}


inline void
RemoteConnectors::RemotePushSender::_marshalObjRef(::RemoteConnectors::RemotePushSender_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}


inline void
RemoteConnectors::RemotePullReceiver::_marshalObjRef(::RemoteConnectors::RemotePullReceiver_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}


inline void
RemoteConnectors::RemotePullConnector::_marshalObjRef(::RemoteConnectors::RemotePullConnector_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}


inline void
RemoteConnectors::RemotePullSender::_marshalObjRef(::RemoteConnectors::RemotePullSender_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_RemoteConnector
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_RemoteConnector
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_RemoteConnector
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_RemoteConnector
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_RemoteConnector
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_RemoteConnector
#endif

#endif  // __RemoteConnector_hh__

