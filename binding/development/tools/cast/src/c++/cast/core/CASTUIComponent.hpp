/*
 * CAST - The CoSy Architecture Schema Toolkit
 *
 * Copyright (C) 2006-2007 Nick Hawes
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 * 02110-1301 USA
 *
 */

#ifndef CAST_CAST_UI_COMPONENT_H_
#define CAST_CAST_UI_COMPONENT_H_

#include  "CASTComponent.hpp"
#include <cast/cdl/CAST.hh>


namespace cast {

class CASTUIComponent : 
  public CASTComponent,
  public PushSender<cdl::ui::TextOutput>,
  //public PushSender<ComponentEvent>,
  public PullReceiver<cdl::ui::ComponentStatus> {
 
 public:

  /**
   * Construct a new ui component with the given unique ID.
   * 
   * @param _id
   *            The id used to identify this component. 
   */
  CASTUIComponent(const std::string &_id);
  
  /**
   * Empty virtual destructor.
   */
  virtual ~CASTUIComponent(){};


  /**
   * Overrides the configure method from FrameworkProcess to use
   * _config to set the subarchitecture ID.
   * 
   * @param _config
   *            The ID of the subarchitecture which contains this
   *            component.
   */
  virtual void configure(std::map<std::string,std::string> & _config);

  // protected:
 
/*   virtual void setPushConnector(const std::string &_connectionID, */
/* 			       PushConnectorOut<ComponentEvent> * _pOut) { */
/*     m_pComponentEventPushConnector = _pOut; */
/*   } */
  
  virtual void setPushConnector(const std::string &_connectionID,
				PushConnectorOut<cdl::ui::TextOutput> *_pOut) {
    m_pTextOutputConnector = _pOut;
  }


  virtual void receivePullQuery(const FrameworkQuery & _query, 
				FrameworkLocalData<cdl::ui::ComponentStatus> *& _pData);

private:

  void updateStatus(const cdl::ui::ComponentEventType &_event) const;

  bool hasUIConnection() const {
    return m_pTextOutputConnector != NULL;
  }

  void textToUI(const char * _s, const cdl::ui::OutputType & _type) const;

  void logEvent(cdl::ui::ComponentEvent * _pEvent) const;

  //PushConnectorOut<ComponentEvent> * m_pComponentEventPushConnector;

  PushConnectorOut<cdl::ui::TextOutput> * m_pTextOutputConnector;

  mutable omni_mutex m_textOutMutex;
  omni_mutex m_componentEventMutex;;

  /**
   * Controls whether the events generated by this component are
   * logged as text.
   */
  bool m_bDebugEvents;

public: 



  /**
   * Print out the input in a formatted way.
   * 
   * @param _s
   *            Std::String to print.
   */
  virtual void println(const std::string & _s) const;


//   /**
//    * printf-like method
//    * @param format   (in) printf-style format std::string
//    */
//   virtual void printfln(const char *format, ...) const;

    /**
   * printf-like method
   * @param format   (in) printf-style format std::string
   */
  virtual void println(const char *format, ...) const;
  

    /**
   * Log a c-std::string. Only does anything if the variable m_bLogOutput is
   * true.
   *
   * @param _s The c-std::string to log.
   */
  virtual void log(const char * _s, ...) const;

  /**
   * Log a stl std::string. Only does anything if the variable m_bLogOutput
   * is true.
   *
   * @param _s The stl std::string to log.
   */  
  virtual void log(const std::string & _s) const;

  /**
   * Use a cstd::string as debug output. Only does anything if the variable
   * m_bDebugOuput is true.
   *
   * @param _s The c-std::string to log.
   */  
  virtual void debug(const char *format, ...) const;

  /**
   * Use an stl std::string as debug output. Only does anything if the
   * variable m_bDebugOuput is true.
   *
   * @param _s The stl std::string to log.
   */  
  virtual void debug(const std::string & _s) const;

  
  virtual void logEvent(const cdl::ui::ComponentEventType & _event, 
			const std::string & _componentID, const std::string & _target, 
			const std::string & _dataType,  const std::string & _dataID) const;

  virtual std::string toString(const cdl::ui::ComponentEventType & _event) const {
    switch(_event) {
    case cdl::ui::GET:
      return "GET";
    case cdl::ui::ADD:
      return "ADD";
    case cdl::ui::OVERWRITE:
      return "OVERWRITE";
    case cdl::ui::DELETE:
      return "DELETE";
    case cdl::ui::START:
      return "START";
    case cdl::ui::END:
      return "END";
    case cdl::ui::PROPOSED:
      return "PROPOSED";
    }
    return "unknown event type";
  }

  omni_mutex m_componentStatusMutex;
  mutable cdl::ui::ComponentStatus  m_componentStatus;

};

} //namespace cast

#endif
