;; generated by MAPL2PDDL
(define (domain coffee)
(:requirements :typing)
(:types
   room thing - object 
   agent boolean - object 
   human robot - agent 
   self_agent - robot 
   
)
(:predicates
  (timeout ?agt - agent ?t - number)
  (i__timeout ?agt - agent)
  (mb_timeout ?agt0 - agent ?agt1 - agent ?agt - agent)
  (succ ?small - number ?big - number)
  (i__succ ?small - number)
  (mb_succ ?agt0 - agent ?agt1 - agent ?small - number)
  (pos ?o - object ?p - (either room agent))
  (i__pos ?o - object)
  (mb_pos ?agt0 - agent ?agt1 - agent ?o - object)
  (connected ?r1 - room ?r2 - room)
  (i__connected ?r1 - room ?r2 - room)
  (mb_connected ?agt0 - agent ?agt1 - agent ?r1 - room ?r2 - room)
)

(:action __activate
 :parameters (?a - agent ?t - number ?tn - number)
 :precondition
    (and
      (timeout ?a ?t)
      (succ ?tn ?t)
    )
 :effect (and
    (timeout ?a ?tn)
    (not (timeout ?a ?t))
))

(:action pick-up
 :parameters (?a - agent ?t - thing ?r - room)
 :precondition
    (and
      (timeout ?a n0)
      (pos ?a ?r)
      (pos ?t ?r)
      (mb_pos ?a ?a ?t)
    )
 :effect (and
    (pos ?t ?a)
    (mb_pos ?a ?a ?t)
    (forall (?a1 - agent, ?a2 - agent)
      (when
        (or
          (not (= ?a ?a1))
          (not (= ?a ?a2))
        )
        (not (mb_pos ?a1 ?a2 ?t))
        )
    )
    (not (pos ?t ?r))
))

(:action __guess-pos
 :parameters (?a - self_agent ?t - thing ?r - room)
 :precondition
    (and
      (timeout ?a n0)
      (not (mb_pos ?a ?a ?t))
    )
 :effect (and
    (pos ?t ?r)
))

(:action drop
 :parameters (?a - agent ?t - thing ?r - room)
 :precondition
    (and
      (timeout ?a n0)
      (pos ?a ?r)
      (pos ?t ?a)
    )
 :effect (and
    (pos ?t ?r)
    (not (pos ?t ?a))
))

(:action move
 :parameters (?a - robot ?r1 - room ?r2 - room)
 :precondition
    (and
      (timeout ?a n0)
      (pos ?a ?r1)
      (connected ?r1 ?r2)
    )
 :effect (and
    (pos ?a ?r2)
    (not (pos ?a ?r1))
))

(:action ask_val_timeout
 :parameters (?agt0 - self_agent ?agt1 - agent ?agt - agent)
 :precondition
    (mb_timeout ?agt1 ?agt1 ?agt)
 :effect (and
    (mb_timeout ?agt0 ?agt0 ?agt)
))

(:action ask_val_succ
 :parameters (?agt0 - self_agent ?agt1 - agent ?small - number)
 :precondition
    (mb_succ ?agt1 ?agt1 ?small)
 :effect (and
    (mb_succ ?agt0 ?agt0 ?small)
))

(:action ask_val_pos
 :parameters (?agt0 - self_agent ?agt1 - agent ?o - object)
 :precondition
    (mb_pos ?agt1 ?agt1 ?o)
 :effect (and
    (mb_pos ?agt0 ?agt0 ?o)
))

(:action ask_val_connected
 :parameters (?agt0 - self_agent ?agt1 - agent ?r1 - room ?r2 - room)
 :precondition
    (mb_connected ?agt1 ?agt1 ?r1 ?r2)
 :effect (and
    (mb_connected ?agt0 ?agt0 ?r1 ?r2)
))

(:action tell_val_timeout
 :parameters (?agt0 - agent ?agt1 - agent ?agt - agent)
 :precondition
    (mb_timeout ?agt0 ?agt0 ?agt)
 :effect (and
    (mb_timeout ?agt0 ?agt1 ?agt)
    (mb_timeout ?agt1 ?agt0 ?agt)
))

(:action tell_val_succ
 :parameters (?agt0 - agent ?agt1 - agent ?small - number)
 :precondition
    (mb_succ ?agt0 ?agt0 ?small)
 :effect (and
    (mb_succ ?agt0 ?agt1 ?small)
    (mb_succ ?agt1 ?agt0 ?small)
))

(:action tell_val_pos
 :parameters (?agt0 - agent ?agt1 - agent ?o - object)
 :precondition
    (mb_pos ?agt0 ?agt0 ?o)
 :effect (and
    (mb_pos ?agt0 ?agt1 ?o)
    (mb_pos ?agt1 ?agt0 ?o)
))

(:action tell_val_connected
 :parameters (?agt0 - agent ?agt1 - agent ?r1 - room ?r2 - room)
 :precondition
    (mb_connected ?agt0 ?agt0 ?r1 ?r2)
 :effect (and
    (mb_connected ?agt0 ?agt1 ?r1 ?r2)
    (mb_connected ?agt1 ?agt0 ?r1 ?r2)
))

(:action __mb2k_axiom_timeout
 :parameters (?agt0 - agent ?agt1 - agent ?agt - agent)
 :precondition
    (mb_timeout ?agt0 ?agt1 ?agt)
 :effect (and
    (mb_timeout ?agt0 ?agt0 ?agt)
    (mb_timeout ?agt1 ?agt1 ?agt)
))

(:action __mb2k_axiom_succ
 :parameters (?agt0 - agent ?agt1 - agent ?small - number)
 :precondition
    (mb_succ ?agt0 ?agt1 ?small)
 :effect (and
    (mb_succ ?agt0 ?agt0 ?small)
    (mb_succ ?agt1 ?agt1 ?small)
))

(:action __mb2k_axiom_pos
 :parameters (?agt0 - agent ?agt1 - agent ?o - object)
 :precondition
    (mb_pos ?agt0 ?agt1 ?o)
 :effect (and
    (mb_pos ?agt0 ?agt0 ?o)
    (mb_pos ?agt1 ?agt1 ?o)
))

(:action __mb2k_axiom_connected
 :parameters (?agt0 - agent ?agt1 - agent ?r1 - room ?r2 - room)
 :precondition
    (mb_connected ?agt0 ?agt1 ?r1 ?r2)
 :effect (and
    (mb_connected ?agt0 ?agt0 ?r1 ?r2)
    (mb_connected ?agt1 ?agt1 ?r1 ?r2)
))
)
