;; generated by MAPL2PDDL
(define (domain waypoints)
(:requirements :adl)
(:types
   agent movable waypoint - object 
   ball cube block pyramid - movable 
   robot human - agent 
   
)
(:predicates
  (right_of ?wp1 - waypoint ?wp2 - waypoint)
  (i__right_of ?wp1 - waypoint ?wp2 - waypoint)
  (mb_right_of ?agt0 - agent ?agt1 - agent ?wp1 - waypoint ?wp2 - waypoint)
  (left_of ?wp1 - waypoint ?wp2 - waypoint)
  (i__left_of ?wp1 - waypoint ?wp2 - waypoint)
  (mb_left_of ?agt0 - agent ?agt1 - agent ?wp1 - waypoint ?wp2 - waypoint)
  (near ?wp1 - waypoint ?wp2 - waypoint)
  (i__near ?wp1 - waypoint ?wp2 - waypoint)
  (mb_near ?agt0 - agent ?agt1 - agent ?wp1 - waypoint ?wp2 - waypoint)
  (pos ?obj - movable ?wp - (either waypoint agent))
  (i__pos ?obj - movable ?wp - (either waypoint agent))
  (mb_pos ?agt0 - agent ?agt1 - agent ?obj - movable ?wp - (either waypoint agent))
  (red ?obj - movable)
  (i__red ?obj - movable)
  (mb_red ?agt0 - agent ?agt1 - agent ?obj - movable)
  (blue ?obj - movable)
  (i__blue ?obj - movable)
  (mb_blue ?agt0 - agent ?agt1 - agent ?obj - movable)
  (green ?obj - movable)
  (i__green ?obj - movable)
  (mb_green ?agt0 - agent ?agt1 - agent ?obj - movable)
)

(:action put
 :parameters (?a - robot ?obj - movable ?np - waypoint)
 :precondition
    (and
      (pos ?obj ?a)
      (forall (?obj2 - movable)
        (not (pos ?obj2 ?np))
      )
    )
 :effect (and
    (pos ?obj ?np)
    (not (pos ?obj ?a))
))

(:action pickup
 :parameters (?a - robot ?obj - movable ?op - waypoint)
 :precondition
    (and
      (pos ?obj ?op)
      (forall (?obj2 - movable)
        (not (pos ?obj2 ?a))
      )
    )
 :effect (and
    (pos ?obj ?a)
    (not (pos ?obj ?op))
))

(:action ask_val_right_of
 :parameters (?agt0 - self_agent ?agt1 - agent ?wp1 - waypoint ?wp2 - waypoint)
 :precondition
    (mb_right_of ?agt1 ?agt1 ?wp1 ?wp2)
 :effect (and
    (mb_right_of ?agt0 ?agt0 ?wp1 ?wp2)
))

(:action ask_val_left_of
 :parameters (?agt0 - self_agent ?agt1 - agent ?wp1 - waypoint ?wp2 - waypoint)
 :precondition
    (mb_left_of ?agt1 ?agt1 ?wp1 ?wp2)
 :effect (and
    (mb_left_of ?agt0 ?agt0 ?wp1 ?wp2)
))

(:action ask_val_near
 :parameters (?agt0 - self_agent ?agt1 - agent ?wp1 - waypoint ?wp2 - waypoint)
 :precondition
    (mb_near ?agt1 ?agt1 ?wp1 ?wp2)
 :effect (and
    (mb_near ?agt0 ?agt0 ?wp1 ?wp2)
))

(:action ask_val_pos
 :parameters (?agt0 - self_agent ?agt1 - agent ?obj - movable ?wp - (either waypoint agent))
 :precondition
    (mb_pos ?agt1 ?agt1 ?obj ?wp)
 :effect (and
    (mb_pos ?agt0 ?agt0 ?obj ?wp)
))

(:action ask_val_red
 :parameters (?agt0 - self_agent ?agt1 - agent ?obj - movable)
 :precondition
    (mb_red ?agt1 ?agt1 ?obj)
 :effect (and
    (mb_red ?agt0 ?agt0 ?obj)
))

(:action ask_val_blue
 :parameters (?agt0 - self_agent ?agt1 - agent ?obj - movable)
 :precondition
    (mb_blue ?agt1 ?agt1 ?obj)
 :effect (and
    (mb_blue ?agt0 ?agt0 ?obj)
))

(:action ask_val_green
 :parameters (?agt0 - self_agent ?agt1 - agent ?obj - movable)
 :precondition
    (mb_green ?agt1 ?agt1 ?obj)
 :effect (and
    (mb_green ?agt0 ?agt0 ?obj)
))

(:action tell_val_right_of
 :parameters (?agt0 - agent ?agt1 - agent ?wp1 - waypoint ?wp2 - waypoint)
 :precondition
    (mb_right_of ?agt0 ?agt0 ?wp1 ?wp2)
 :effect (and
    (mb_right_of ?agt0 ?agt1 ?wp1 ?wp2)
    (mb_right_of ?agt1 ?agt0 ?wp1 ?wp2)
))

(:action tell_val_left_of
 :parameters (?agt0 - agent ?agt1 - agent ?wp1 - waypoint ?wp2 - waypoint)
 :precondition
    (mb_left_of ?agt0 ?agt0 ?wp1 ?wp2)
 :effect (and
    (mb_left_of ?agt0 ?agt1 ?wp1 ?wp2)
    (mb_left_of ?agt1 ?agt0 ?wp1 ?wp2)
))

(:action tell_val_near
 :parameters (?agt0 - agent ?agt1 - agent ?wp1 - waypoint ?wp2 - waypoint)
 :precondition
    (mb_near ?agt0 ?agt0 ?wp1 ?wp2)
 :effect (and
    (mb_near ?agt0 ?agt1 ?wp1 ?wp2)
    (mb_near ?agt1 ?agt0 ?wp1 ?wp2)
))

(:action tell_val_pos
 :parameters (?agt0 - agent ?agt1 - agent ?obj - movable ?wp - (either waypoint agent))
 :precondition
    (mb_pos ?agt0 ?agt0 ?obj ?wp)
 :effect (and
    (mb_pos ?agt0 ?agt1 ?obj ?wp)
    (mb_pos ?agt1 ?agt0 ?obj ?wp)
))

(:action tell_val_red
 :parameters (?agt0 - agent ?agt1 - agent ?obj - movable)
 :precondition
    (mb_red ?agt0 ?agt0 ?obj)
 :effect (and
    (mb_red ?agt0 ?agt1 ?obj)
    (mb_red ?agt1 ?agt0 ?obj)
))

(:action tell_val_blue
 :parameters (?agt0 - agent ?agt1 - agent ?obj - movable)
 :precondition
    (mb_blue ?agt0 ?agt0 ?obj)
 :effect (and
    (mb_blue ?agt0 ?agt1 ?obj)
    (mb_blue ?agt1 ?agt0 ?obj)
))

(:action tell_val_green
 :parameters (?agt0 - agent ?agt1 - agent ?obj - movable)
 :precondition
    (mb_green ?agt0 ?agt0 ?obj)
 :effect (and
    (mb_green ?agt0 ?agt1 ?obj)
    (mb_green ?agt1 ?agt0 ?obj)
))

(:action __mb2k_axiom_right_of
 :parameters (?agt0 - agent ?agt1 - agent ?wp1 - waypoint ?wp2 - waypoint)
 :precondition
    (mb_right_of ?agt0 ?agt1 ?wp1 ?wp2)
 :effect (and
    (mb_right_of ?agt0 ?agt0 ?wp1 ?wp2)
    (mb_right_of ?agt1 ?agt1 ?wp1 ?wp2)
))

(:action __mb2k_axiom_left_of
 :parameters (?agt0 - agent ?agt1 - agent ?wp1 - waypoint ?wp2 - waypoint)
 :precondition
    (mb_left_of ?agt0 ?agt1 ?wp1 ?wp2)
 :effect (and
    (mb_left_of ?agt0 ?agt0 ?wp1 ?wp2)
    (mb_left_of ?agt1 ?agt1 ?wp1 ?wp2)
))

(:action __mb2k_axiom_near
 :parameters (?agt0 - agent ?agt1 - agent ?wp1 - waypoint ?wp2 - waypoint)
 :precondition
    (mb_near ?agt0 ?agt1 ?wp1 ?wp2)
 :effect (and
    (mb_near ?agt0 ?agt0 ?wp1 ?wp2)
    (mb_near ?agt1 ?agt1 ?wp1 ?wp2)
))

(:action __mb2k_axiom_pos
 :parameters (?agt0 - agent ?agt1 - agent ?obj - movable ?wp - (either waypoint agent))
 :precondition
    (mb_pos ?agt0 ?agt1 ?obj ?wp)
 :effect (and
    (mb_pos ?agt0 ?agt0 ?obj ?wp)
    (mb_pos ?agt1 ?agt1 ?obj ?wp)
))

(:action __mb2k_axiom_red
 :parameters (?agt0 - agent ?agt1 - agent ?obj - movable)
 :precondition
    (mb_red ?agt0 ?agt1 ?obj)
 :effect (and
    (mb_red ?agt0 ?agt0 ?obj)
    (mb_red ?agt1 ?agt1 ?obj)
))

(:action __mb2k_axiom_blue
 :parameters (?agt0 - agent ?agt1 - agent ?obj - movable)
 :precondition
    (mb_blue ?agt0 ?agt1 ?obj)
 :effect (and
    (mb_blue ?agt0 ?agt0 ?obj)
    (mb_blue ?agt1 ?agt1 ?obj)
))

(:action __mb2k_axiom_green
 :parameters (?agt0 - agent ?agt1 - agent ?obj - movable)
 :precondition
    (mb_green ?agt0 ?agt1 ?obj)
 :effect (and
    (mb_green ?agt0 ?agt0 ?obj)
    (mb_green ?agt1 ?agt1 ?obj)
))
)
