;; generated by MAPL2PDDL
(define (problem cosytask)
(:domain playmate)
(:objects
  true - boolean
  false - boolean
  blue - colour
  red - colour
  green - colour
  black - colour
  white - colour
  small - size
  big - size
  MrChips - robot
  MrChips - planning_agent
  User - human
  the_right_side1 - waypoint
  the_right_side0 - waypoint
  dwp_9 - waypoint
  dwp_8 - waypoint
  dwp_7 - waypoint
  dwp_6 - waypoint
  dwp_5 - waypoint
  dwp_4 - waypoint
  dwp_3 - waypoint
  dwp_2 - waypoint
  the_right_side - waypoint
  the_left_side - waypoint
  wp9 - waypoint
  wpa - waypoint
  wpd - waypoint
  the_ball - movable
  the_pyramid - movable
  the_block - movable
)

(:init
  (wp_right_of the_right_side1 wp9)
  (wp_right_of the_right_side0 wp9)
  (wp_right_of dwp_9 wpa)
  (wp_right_of dwp_8 wpa)
  (wp_right_of dwp_7 wpd)
  (wp_right_of dwp_6 wpd)
  (wp_left_of dwp_5 wp9)
  (wp_left_of dwp_4 wp9)
  (wp_left_of dwp_3 wpa)
  (wp_left_of dwp_2 wpa)
  (wp_left_of the_right_side wpd)
  (wp_left_of the_left_side wpd)
  (pos the_ball : wpd)
  (pos the_block : dwp_5)
  (pos the_pyramid : wp9)
  (colour the_ball : red)
  (colour the_pyramid : blue)
  (colour the_block : blue)
  (K user (in-answer-set the_ball))
  (K user (colour the_block))
)

(:goal (and

;; ;; what's to the left of the pyramid?
;;     (forall (?v2 - movable) 
;;        (imply (exists (?wp1 ?wp2 - waypoint) (and 
;; 	   		  		  			   (pos the_pyramid ?wp1) 
;; 	   		  		  			   (pos ?v2 ?wp2) 
;; 								   (wp_left_of ?wp2 ?wp1 : true)))
;;               (in-answer-set ?v2)
;;        ))

;; what do you see?
    (forall (?v2 - movable) (K user (in-answer-set ?v2)))
)))
