#ifndef BINDING_FEATURES_COMMON_IDL_
#define BINDING_FEATURES_COMMON_IDL_

#include <Math.idl>
#include <CAST.idl>

/// module for stuff that different binding features may have in common
module BindingFeaturesCommon {    
  
  enum TruthValue {
    NEGATIVE, ///< For features which are stated exp[licitly to not be true. Like the colour 'red' in "this ball is not red".
    POSITIVE  ///< The default is that a feature is positive, i.e. like 'red' in "the red ball"
  };
  
  /// Contains data common to all features.
  /// \remark could be called \p AbstractFeature, but that name is taken in the C++ implementation of the binder
  struct ParentFeature {
    /// if the concept is actually NOT supposed to match with
    /// another (non-negated) feature of the same typ
    TruthValue m_truthValue;
    /// points to the immediate proxy in which the feature is a
    /// member. If this proxy is a group, then also the individual
    /// proxies will have the same feature. (this is duplicated in
    /// the feature pointers too, for technical reasons, hopefully
    /// we can get rid of this later)
    cast::cdl::WorkingMemoryID m_immediateProxyID;    
  };



  typedef sequence <FrameworkBasics::BALTTime> TimeSeq;
    
  /// \p m_start should have zero or one element. Zero means an
  /// open interval (start time in infinite past)
  struct StartTime {
    TimeSeq m_t;
  };
    
  /// \p m_end should have zero or one element. Zero means an open
  /// interval (end time in infinite future)
  struct EndTime {
    TimeSeq m_t;
  };


  /// Used in \p TemporalFrame
  enum TemporalFrameType {
    PERCEIVED, ///< corresponds to a perceived relation (default of relations)
    ASSERTED,  ///< corresponds to an asserted relation (will be not be mismatched with perceived ones)
    TYPICAL,  ///< corresponds to a relation inferred by "default" conceptual reasoning -- as of now, it only matches with itself
    DESIRED,   ///< corresponds to a desired relation (e.g. "put the ball <near> the box")
    PAST,      ///< corresponds to a relation that is no longer asserted or perceived, since an action changed the relation (we'll see if this will be possible to do in practice)
    NA         ///< N/A, default... there is no specific temporal frame, this is always indeterminately equivalent with all others (this will by default not even be written to WM)
  };
  
//#ifdef EXPERIMENTAL_BINDING_FEATURES

  /// Coordinate system identifier
  struct ReferenceFrame {
    // used by the comparator to make sure the comparison is in the
    // same coordinate frame
    string m_coordinateSystemID;
  };
    
  /// a point or vector in 2 dimensions
  struct Vector2 {
    float m_x;
    float m_y;
  };

  /// a line in 2 dimensions
  struct Line2 {
    Vector2 m_point1;
    Vector2 m_point2;
  };
//#endif // EXPERIMENTAL_BINDING_FEATURES
    
}; // module Feature

#endif // BINDING_FEATURES_IDL_
