// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.

#include "LFEssentials.hh"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_1;



org::cognitivesystems::repr::lf::autogen::LFEssentials::Propositions::Propositions(const ::org::cognitivesystems::repr::lf::autogen::LFEssentials::Propositions& _s)
  : _CORBA_Unbounded_Sequence_Forward< org::cognitivesystems::repr::lf::autogen::LFEssentials::Proposition > (_s.pd_max, 0, 0, 1)
{
  length(_s.pd_len);
  for (_CORBA_ULong _i=0; _i < pd_len; _i++) {
    pd_buf[_i] = _s.pd_buf[_i];
  }
}

void
org::cognitivesystems::repr::lf::autogen::LFEssentials::Propositions::operator<<= (cdrStream& _s)
{
  _CORBA_ULong _l;
  _l <<= _s;
  if (!_s.checkInputOverrun(1,_l)) {
    _CORBA_marshal_sequence_range_check_error(_s);
    // never reach here
  }
  length(_l);
  for( _CORBA_ULong _i = 0; _i < _l; _i++ )
    pd_buf[_i] <<= _s;
}

void
org::cognitivesystems::repr::lf::autogen::LFEssentials::Propositions::operator>>= (cdrStream& _s) const
{
  ::operator>>=(_CORBA_ULong(pd_len), _s);
  for( _CORBA_ULong _i = 0; _i < pd_len; _i++ )
    pd_buf[_i] >>= _s;
}

org::cognitivesystems::repr::lf::autogen::LFEssentials::Propositions&
org::cognitivesystems::repr::lf::autogen::LFEssentials::Propositions::operator=(const ::org::cognitivesystems::repr::lf::autogen::LFEssentials::Propositions& _s)
{
  length(_s.pd_len);
  for (unsigned long _i=0; _i < pd_len; _i++) {
    pd_buf[_i] = _s.pd_buf[_i];
  }
  return *this;
}

org::cognitivesystems::repr::lf::autogen::LFEssentials::Proposition&
org::cognitivesystems::repr::lf::autogen::LFEssentials::Propositions::operator[](_CORBA_ULong _index)
{
  if (_index >= pd_len) _CORBA_bound_check_error();
  return pd_buf[_index];
}

const org::cognitivesystems::repr::lf::autogen::LFEssentials::Proposition&
org::cognitivesystems::repr::lf::autogen::LFEssentials::Propositions::operator[](_CORBA_ULong _index) const
{
  if (_index >= pd_len) _CORBA_bound_check_error();
  return pd_buf[_index];
}

org::cognitivesystems::repr::lf::autogen::LFEssentials::Proposition*
org::cognitivesystems::repr::lf::autogen::LFEssentials::Propositions::allocbuf(_CORBA_ULong _nelems)
{
  ::org::cognitivesystems::repr::lf::autogen::LFEssentials::Proposition* _tmp = 0;
  if (_nelems) {
    _tmp = new ::org::cognitivesystems::repr::lf::autogen::LFEssentials::Proposition[_nelems];
  }
  return _tmp;
}

void
org::cognitivesystems::repr::lf::autogen::LFEssentials::Propositions::freebuf(::org::cognitivesystems::repr::lf::autogen::LFEssentials::Proposition* _b)
{
  if (_b) delete [] _b;
}

void
org::cognitivesystems::repr::lf::autogen::LFEssentials::Propositions::NP_freebuf()
{
  if (pd_buf) delete [] pd_buf;
}

org::cognitivesystems::repr::lf::autogen::LFEssentials::Propositions::~Propositions()
{
  if (pd_rel && pd_buf) delete [] pd_buf;
  pd_buf = 0;
}

void
org::cognitivesystems::repr::lf::autogen::LFEssentials::Propositions::NP_copybuffer(_CORBA_ULong _newmax)
{
  // replace pd_data with a new buffer of size newmax.
  // Invariant:  pd_len <= newmax
  //
  ::org::cognitivesystems::repr::lf::autogen::LFEssentials::Proposition* _newbuf = allocbuf(_newmax);
  if (!_newbuf) {
    _CORBA_new_operator_return_null();
    // never reach here
  }
  for (unsigned long _i=0; _i < pd_len; _i++) {
    _newbuf[_i] = pd_buf[_i];
  }
  if (pd_rel && pd_buf) {
    freebuf(pd_buf);
  }
  else {
    pd_rel = 1;
  }
  pd_buf = _newbuf;
  pd_max = _newmax;
}

void
org::cognitivesystems::repr::lf::autogen::LFEssentials::Proposition::operator>>= (cdrStream &_n) const
{
  _n.marshalString(prop,0);
  connective >>= _n;

}

void
org::cognitivesystems::repr::lf::autogen::LFEssentials::Proposition::operator<<= (cdrStream &_n)
{
  prop = _n.unmarshalString(0);
  (ConnectiveType&)connective <<= _n;

}

void
org::cognitivesystems::repr::lf::autogen::LFEssentials::Feature::operator>>= (cdrStream &_n) const
{
  _n.marshalString(feat,0);
  _n.marshalString(value,0);

}

void
org::cognitivesystems::repr::lf::autogen::LFEssentials::Feature::operator<<= (cdrStream &_n)
{
  feat = _n.unmarshalString(0);
  value = _n.unmarshalString(0);

}

void
org::cognitivesystems::repr::lf::autogen::LFEssentials::LFRelation::operator>>= (cdrStream &_n) const
{
  _n.marshalString(head,0);
  _n.marshalString(mode,0);
  _n.marshalString(dep,0);
  _n.marshalBoolean(coIndexedDep);

}

void
org::cognitivesystems::repr::lf::autogen::LFEssentials::LFRelation::operator<<= (cdrStream &_n)
{
  head = _n.unmarshalString(0);
  mode = _n.unmarshalString(0);
  dep = _n.unmarshalString(0);
  coIndexedDep = _n.unmarshalBoolean();

}

void
org::cognitivesystems::repr::lf::autogen::LFEssentials::LFNominal::operator>>= (cdrStream &_n) const
{
  _n.marshalString(nomVar,0);
  _n.marshalString(sort,0);
  (const Proposition&) prop >>= _n;
  (const Features&) feats >>= _n;
  (const Relations&) rels >>= _n;

}

void
org::cognitivesystems::repr::lf::autogen::LFEssentials::LFNominal::operator<<= (cdrStream &_n)
{
  nomVar = _n.unmarshalString(0);
  sort = _n.unmarshalString(0);
  (Proposition&)prop <<= _n;
  (Features&)feats <<= _n;
  (Relations&)rels <<= _n;

}

void
org::cognitivesystems::repr::lf::autogen::LFEssentials::LogicalForm::operator>>= (cdrStream &_n) const
{
  _n.marshalString(logicalFormId,0);
  (const Nominals&) noms >>= _n;
  preferenceScore >>= _n;
  (const LFNominal&) root >>= _n;
  stringPos >>= _n;

}

void
org::cognitivesystems::repr::lf::autogen::LFEssentials::LogicalForm::operator<<= (cdrStream &_n)
{
  logicalFormId = _n.unmarshalString(0);
  (Nominals&)noms <<= _n;
  (::CORBA::Float&)preferenceScore <<= _n;
  (LFNominal&)root <<= _n;
  (::CORBA::Long&)stringPos <<= _n;

}

void
org::cognitivesystems::repr::lf::autogen::LFEssentials::LFComponent::operator>>= (cdrStream &_n) const
{
  _n.marshalString(componentName,0);
  (const LogicalForm&) lf >>= _n;

}

void
org::cognitivesystems::repr::lf::autogen::LFEssentials::LFComponent::operator<<= (cdrStream &_n)
{
  componentName = _n.unmarshalString(0);
  (LogicalForm&)lf <<= _n;

}

void
org::cognitivesystems::repr::lf::autogen::LFEssentials::MetaTypeCharacterization::operator>>= (cdrStream &_n) const
{
  _n.marshalString(logicalFormId,0);
  mType >>= _n;
  mSort >>= _n;
  (const LFComponents&) components >>= _n;

}

void
org::cognitivesystems::repr::lf::autogen::LFEssentials::MetaTypeCharacterization::operator<<= (cdrStream &_n)
{
  logicalFormId = _n.unmarshalString(0);
  (MetaType&)mType <<= _n;
  (MetaTypeSort&)mSort <<= _n;
  (LFComponents&)components <<= _n;

}

void
org::cognitivesystems::repr::lf::autogen::LFEssentials::MetaLogicalForm::operator>>= (cdrStream &_n) const
{
  (const LogicalForm&) lf >>= _n;
  complexityType >>= _n;
  (const LogicalFormsVector&) lfsVector >>= _n;
  (const MetaTypeCharacterizationsVector&) characterizationsVector >>= _n;
  (const LFComponentsVector&) componentsVector >>= _n;

}

void
org::cognitivesystems::repr::lf::autogen::LFEssentials::MetaLogicalForm::operator<<= (cdrStream &_n)
{
  (LogicalForm&)lf <<= _n;
  (LogicalFormComplexityType&)complexityType <<= _n;
  (LogicalFormsVector&)lfsVector <<= _n;
  (MetaTypeCharacterizationsVector&)characterizationsVector <<= _n;
  (LFComponentsVector&)componentsVector <<= _n;

}

void
org::cognitivesystems::repr::lf::autogen::LFEssentials::DynCompStatus::operator>>= (cdrStream &_n) const
{
  _n.marshalString(referent,0);
  epistemicStatus >>= _n;
  updateStatus >>= _n;
  _n.marshalString(statusSource,0);
  _n.marshalString(statusGround,0);

}

void
org::cognitivesystems::repr::lf::autogen::LFEssentials::DynCompStatus::operator<<= (cdrStream &_n)
{
  referent = _n.unmarshalString(0);
  (EpistemicStatusFeature&)epistemicStatus <<= _n;
  (UpdateStatusFeature&)updateStatus <<= _n;
  statusSource = _n.unmarshalString(0);
  statusGround = _n.unmarshalString(0);

}

