// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.

#include "ComsysEssentials.hh"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_1;



void
org::cognitivesystems::comsys::autogen::ComsysEssentials::PhonString::operator>>= (cdrStream &_n) const
{
  _n.marshalString(id,0);
  _n.marshalString(wordSequence,0);
  length >>= _n;
  confidenceValue >>= _n;
  NLconfidenceValue >>= _n;
  rank >>= _n;

}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::PhonString::operator<<= (cdrStream &_n)
{
  id = _n.unmarshalString(0);
  wordSequence = _n.unmarshalString(0);
  (::CORBA::Long&)length <<= _n;
  (::CORBA::Float&)confidenceValue <<= _n;
  (::CORBA::Float&)NLconfidenceValue <<= _n;
  (::CORBA::Long&)rank <<= _n;

}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::AudioData::operator>>= (cdrStream &_n) const
{
  (const _CORBA_Unbounded_Sequence_Octet&) dataArray >>= _n;

}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::AudioData::operator<<= (cdrStream &_n)
{
  (_CORBA_Unbounded_Sequence_Octet&)dataArray <<= _n;

}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::BoggleWoggle::operator>>= (cdrStream &_n) const
{
  _n.marshalString(m_string,0);

}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::BoggleWoggle::operator<<= (cdrStream &_n)
{
  m_string = _n.unmarshalString(0);

}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::RecogResult::operator>>= (cdrStream &_n) const
{
  _n.marshalBoolean(isRecognized);
  _n.marshalBoolean(isConnectionClosed);
  _n.marshalString(recString,0);
  confidence >>= _n;
  probability >>= _n;
  _n.marshalString(ipAddress,0);

}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::RecogResult::operator<<= (cdrStream &_n)
{
  isRecognized = _n.unmarshalBoolean();
  isConnectionClosed = _n.unmarshalBoolean();
  recString = _n.unmarshalString(0);
  (::CORBA::Long&)confidence <<= _n;
  (::CORBA::Long&)probability <<= _n;
  ipAddress = _n.unmarshalString(0);

}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::NonStandardRule::operator>>= (cdrStream &_n) const
{
  _n.marshalString(rulename,0);
  numberOfApplications >>= _n;

}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::NonStandardRule::operator<<= (cdrStream &_n)
{
  rulename = _n.unmarshalString(0);
  (::CORBA::Long&)numberOfApplications <<= _n;

}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::NonStandardRulesAppliedForLF::operator>>= (cdrStream &_n) const
{
  _n.marshalString(logicalFormId,0);
  (const _CORBA_Unbounded_Sequence< NonStandardRule > &) nonStandardRules >>= _n;

}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::NonStandardRulesAppliedForLF::operator<<= (cdrStream &_n)
{
  logicalFormId = _n.unmarshalString(0);
  (_CORBA_Unbounded_Sequence< NonStandardRule > &)nonStandardRules <<= _n;

}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::PhonStringLFPair::operator>>= (cdrStream &_n) const
{
  _n.marshalString(logicalFormId,0);
  (const PhonString&) phon >>= _n;

}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::PhonStringLFPair::operator<<= (cdrStream &_n)
{
  logicalFormId = _n.unmarshalString(0);
  (PhonString&)phon <<= _n;

}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::PackedLFs::operator>>= (cdrStream &_n) const
{
  _n.marshalString(id,0);
  (const _CORBA_Unbounded_Sequence< PhonStringLFPair > &) phonStringLFPairs >>= _n;
  (const _CORBA_Unbounded_Sequence< PhonString > &) nonParsablePhonStrings >>= _n;
  stringPos >>= _n;
  (const repr::lf::autogen::LFPacking::PackedLogicalForm&) packedLF >>= _n;
  finalized >>= _n;
  _n.marshalString(type,0);
  (const _CORBA_Unbounded_Sequence< NonStandardRulesAppliedForLF > &) nonStandardRulesForLF >>= _n;

}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::PackedLFs::operator<<= (cdrStream &_n)
{
  id = _n.unmarshalString(0);
  (_CORBA_Unbounded_Sequence< PhonStringLFPair > &)phonStringLFPairs <<= _n;
  (_CORBA_Unbounded_Sequence< PhonString > &)nonParsablePhonStrings <<= _n;
  (::CORBA::Long&)stringPos <<= _n;
  (repr::lf::autogen::LFPacking::PackedLogicalForm&)packedLF <<= _n;
  (::CORBA::Long&)finalized <<= _n;
  type = _n.unmarshalString(0);
  (_CORBA_Unbounded_Sequence< NonStandardRulesAppliedForLF > &)nonStandardRulesForLF <<= _n;

}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::InterpretationSupport::operator>>= (cdrStream &_n) const
{
  _n.marshalString(plfId,0);
  _n.marshalString(headNomVar,0);
  _n.marshalString(depNomVar,0);
  _n.marshalString(mode,0);
  _n.marshalBoolean(isSupported);
  (const _CORBA_Unbounded_Sequence_String&) LFids >>= _n;

}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::InterpretationSupport::operator<<= (cdrStream &_n)
{
  plfId = _n.unmarshalString(0);
  headNomVar = _n.unmarshalString(0);
  depNomVar = _n.unmarshalString(0);
  mode = _n.unmarshalString(0);
  isSupported = _n.unmarshalBoolean();
  (_CORBA_Unbounded_Sequence_String&)LFids <<= _n;

}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::ContextInfo::operator>>= (cdrStream &_n) const
{
  _n.marshalString(plfId,0);
  (const _CORBA_Unbounded_Sequence< InterpretationSupport > &) interpretations >>= _n;

}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::ContextInfo::operator<<= (cdrStream &_n)
{
  plfId = _n.unmarshalString(0);
  (_CORBA_Unbounded_Sequence< InterpretationSupport > &)interpretations <<= _n;

}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::SpokenOutputItem::operator>>= (cdrStream &_n) const
{
  _n.marshalString(soiid,0);
  _n.marshalString(phonString,0);
  (const ::CORBA::Any&) inputStream >>= _n;

}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::SpokenOutputItem::operator<<= (cdrStream &_n)
{
  soiid = _n.unmarshalString(0);
  phonString = _n.unmarshalString(0);
  (::CORBA::Any&)inputStream <<= _n;

}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::ContentPlanningGoal::operator>>= (cdrStream &_n) const
{
  _n.marshalString(cpgid,0);
  (const repr::lf::autogen::LFEssentials::LogicalForm&) lf >>= _n;

}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::ContentPlanningGoal::operator<<= (cdrStream &_n)
{
  cpgid = _n.unmarshalString(0);
  (repr::lf::autogen::LFEssentials::LogicalForm&)lf <<= _n;

}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::ProductionLF::operator>>= (cdrStream &_n) const
{
  _n.marshalString(plfid,0);
  (const repr::lf::autogen::LFEssentials::LogicalForm&) lf >>= _n;

}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::ProductionLF::operator<<= (cdrStream &_n)
{
  plfid = _n.unmarshalString(0);
  (repr::lf::autogen::LFEssentials::LogicalForm&)lf <<= _n;

}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::IndexAssociation::operator>>= (cdrStream &_n) const
{
  (const _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Long, 4, 4 > &) id1 >>= _n;
  (const _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Long, 4, 4 > &) id2 >>= _n;
  _n.marshalString(relType,0);

}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::IndexAssociation::operator<<= (cdrStream &_n)
{
  (_CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Long, 4, 4 > &)id1 <<= _n;
  (_CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Long, 4, 4 > &)id2 <<= _n;
  relType = _n.unmarshalString(0);

}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::CacheMapping::operator>>= (cdrStream &_n) const
{
  (const _CORBA_Unbounded_Sequence< IndexAssociation > &) associations >>= _n;

}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::CacheMapping::operator<<= (cdrStream &_n)
{
  (_CORBA_Unbounded_Sequence< IndexAssociation > &)associations <<= _n;

}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::Cache::operator>>= (cdrStream &_n) const
{
  _n.marshalString(CacheId,0);
  _n.marshalString(cacheType,0);
  (const PackedLFs&) plf >>= _n;
  (const _CORBA_Unbounded_Sequence< ::CORBA::Any > &) content1 >>= _n;
  (const _CORBA_Unbounded_Sequence< ::CORBA::Any > &) content2 >>= _n;
  (const CacheMapping&) mapping >>= _n;

}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::Cache::operator<<= (cdrStream &_n)
{
  CacheId = _n.unmarshalString(0);
  cacheType = _n.unmarshalString(0);
  (PackedLFs&)plf <<= _n;
  (_CORBA_Unbounded_Sequence< ::CORBA::Any > &)content1 <<= _n;
  (_CORBA_Unbounded_Sequence< ::CORBA::Any > &)content2 <<= _n;
  (CacheMapping&)mapping <<= _n;

}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::SDRSRelation::operator>>= (cdrStream &_n) const
{
  _n.marshalString(relType,0);
  (const _CORBA_Unbounded_Sequence_String&) args >>= _n;
  _n.marshalBoolean(issubord);

}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::SDRSRelation::operator<<= (cdrStream &_n)
{
  relType = _n.unmarshalString(0);
  (_CORBA_Unbounded_Sequence_String&)args <<= _n;
  issubord = _n.unmarshalBoolean();

}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::SDRSType::operator>>= (cdrStream& _n) const
{
  _pd__d >>= _n;

  if (_pd__default) {
    
  }
  else {
    switch(_pd__d) {
      case 1:
        (const SDRSRelation&) _pd_relation >>= _n;
        break;
      case 2:
        (const PackedLFs&) _pd_plf >>= _n;
        break;
      default: break;

  
    }
  }


}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::SDRSType::operator<<= (cdrStream& _n)
{
  (::CORBA::Short&)_pd__d <<= _n;

  switch(_pd__d) {
    case 1:
      _pd__default = 0;
      (SDRSRelation&)_pd_relation <<= _n;
      break;
    case 2:
      _pd__default = 0;
      (PackedLFs&)_pd_plf <<= _n;
      break;
    default:
      _pd__default = 1;
      break;

  }
  _pd__initialised = 1;
}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::SDRSFormula::operator>>= (cdrStream &_n) const
{
  _n.marshalString(label,0);
  _n.marshalString(tprec,0);
  (const _CORBA_Unbounded_Sequence< Cache > &) caches >>= _n;
  (const SDRSType&) type >>= _n;

}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::SDRSFormula::operator<<= (cdrStream &_n)
{
  label = _n.unmarshalString(0);
  tprec = _n.unmarshalString(0);
  (_CORBA_Unbounded_Sequence< Cache > &)caches <<= _n;
  (SDRSType&)type <<= _n;

}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::LabelFormulaPair::operator>>= (cdrStream &_n) const
{
  _n.marshalString(label,0);
  (const SDRSFormula&) formula >>= _n;

}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::LabelFormulaPair::operator<<= (cdrStream &_n)
{
  label = _n.unmarshalString(0);
  (SDRSFormula&)formula <<= _n;

}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::LabelFormulaMapping::operator>>= (cdrStream &_n) const
{
  (const _CORBA_Unbounded_Sequence< LabelFormulaPair > &) mapping >>= _n;

}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::LabelFormulaMapping::operator<<= (cdrStream &_n)
{
  (_CORBA_Unbounded_Sequence< LabelFormulaPair > &)mapping <<= _n;

}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::SDRS::operator>>= (cdrStream &_n) const
{
  (const _CORBA_Unbounded_Sequence_String&) A >>= _n;
  _n.marshalString(LAST,0);
  (const LabelFormulaMapping&) F >>= _n;

}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::SDRS::operator<<= (cdrStream &_n)
{
  (_CORBA_Unbounded_Sequence_String&)A <<= _n;
  LAST = _n.unmarshalString(0);
  (LabelFormulaMapping&)F <<= _n;

}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::EventDiscRefRelation::operator>>= (cdrStream &_n) const
{
  _n.marshalString(eventId,0);
  _n.marshalString(discRefId,0);
  _n.marshalString(mode,0);

}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::EventDiscRefRelation::operator<<= (cdrStream &_n)
{
  eventId = _n.unmarshalString(0);
  discRefId = _n.unmarshalString(0);
  mode = _n.unmarshalString(0);

}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::Event::operator>>= (cdrStream &_n) const
{
  _n.marshalString(eventId,0);
  _n.marshalString(type,0);
  (const _CORBA_Unbounded_Sequence< EventDiscRefRelation > &) participants >>= _n;

}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::Event::operator<<= (cdrStream &_n)
{
  eventId = _n.unmarshalString(0);
  type = _n.unmarshalString(0);
  (_CORBA_Unbounded_Sequence< EventDiscRefRelation > &)participants <<= _n;

}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::StateDiscRefRelation::operator>>= (cdrStream &_n) const
{
  _n.marshalString(stateId,0);
  _n.marshalString(discRefId,0);
  _n.marshalString(mode,0);

}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::StateDiscRefRelation::operator<<= (cdrStream &_n)
{
  stateId = _n.unmarshalString(0);
  discRefId = _n.unmarshalString(0);
  mode = _n.unmarshalString(0);

}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::State::operator>>= (cdrStream &_n) const
{
  _n.marshalString(stateId,0);
  _n.marshalString(type,0);
  (const _CORBA_Unbounded_Sequence< StateDiscRefRelation > &) participants >>= _n;

}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::State::operator<<= (cdrStream &_n)
{
  stateId = _n.unmarshalString(0);
  type = _n.unmarshalString(0);
  (_CORBA_Unbounded_Sequence< StateDiscRefRelation > &)participants <<= _n;

}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::AspectualRelation::operator>>= (cdrStream &_n) const
{
  _n.marshalString(eventSourceId,0);
  _n.marshalString(stateTargetId,0);
  _n.marshalString(aspect,0);

}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::AspectualRelation::operator<<= (cdrStream &_n)
{
  eventSourceId = _n.unmarshalString(0);
  stateTargetId = _n.unmarshalString(0);
  aspect = _n.unmarshalString(0);

}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::TemporalRelation::operator>>= (cdrStream &_n) const
{
  _n.marshalString(eventSourceId,0);
  _n.marshalString(stateTargetId,0);
  _n.marshalString(tempRelation,0);

}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::TemporalRelation::operator<<= (cdrStream &_n)
{
  eventSourceId = _n.unmarshalString(0);
  stateTargetId = _n.unmarshalString(0);
  tempRelation = _n.unmarshalString(0);

}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::Nucleus::operator>>= (cdrStream &_n) const
{
  _n.marshalString(nucleusId,0);
  _n.marshalString(plfId,0);
  (const Cache&) discRefs >>= _n;
  (const _CORBA_Unbounded_Sequence< Event > &) events >>= _n;
  (const _CORBA_Unbounded_Sequence< State > &) states >>= _n;
  (const _CORBA_Unbounded_Sequence< AspectualRelation > &) aspectualRelations >>= _n;
  (const _CORBA_Unbounded_Sequence< TemporalRelation > &) temporalRelations >>= _n;

}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::Nucleus::operator<<= (cdrStream &_n)
{
  nucleusId = _n.unmarshalString(0);
  plfId = _n.unmarshalString(0);
  (Cache&)discRefs <<= _n;
  (_CORBA_Unbounded_Sequence< Event > &)events <<= _n;
  (_CORBA_Unbounded_Sequence< State > &)states <<= _n;
  (_CORBA_Unbounded_Sequence< AspectualRelation > &)aspectualRelations <<= _n;
  (_CORBA_Unbounded_Sequence< TemporalRelation > &)temporalRelations <<= _n;

}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::InterNucleusRelation::operator>>= (cdrStream &_n) const
{
  _n.marshalString(sourceId,0);
  _n.marshalString(targetId,0);
  _n.marshalString(mode,0);

}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::InterNucleusRelation::operator<<= (cdrStream &_n)
{
  sourceId = _n.unmarshalString(0);
  targetId = _n.unmarshalString(0);
  mode = _n.unmarshalString(0);

}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::SpatioTemporalRepresentation::operator>>= (cdrStream &_n) const
{
  (const _CORBA_Unbounded_Sequence< Nucleus > &) nuclei >>= _n;
  (const _CORBA_Unbounded_Sequence< InterNucleusRelation > &) interNucleusRelations >>= _n;
  _n.marshalString(currentNucleusId,0);

}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::SpatioTemporalRepresentation::operator<<= (cdrStream &_n)
{
  (_CORBA_Unbounded_Sequence< Nucleus > &)nuclei <<= _n;
  (_CORBA_Unbounded_Sequence< InterNucleusRelation > &)interNucleusRelations <<= _n;
  currentNucleusId = _n.unmarshalString(0);

}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::DialogueMove::operator>>= (cdrStream &_n) const
{
  _n.marshalString(dmId,0);
  mType >>= _n;
  _n.marshalString(SDRSFormulaId1,0);
  _n.marshalString(SDRSFormulaId2,0);

}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::DialogueMove::operator<<= (cdrStream &_n)
{
  dmId = _n.unmarshalString(0);
  (MoveType&)mType <<= _n;
  SDRSFormulaId1 = _n.unmarshalString(0);
  SDRSFormulaId2 = _n.unmarshalString(0);

}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::GRETask::operator>>= (cdrStream &_n) const
{
  (const cast::cdl::WorkingMemoryPointer&) m_intendedReferentProxy >>= _n;
  _n.marshalBoolean(m_done);
  _n.marshalString(m_resultLF,0);

}

void
org::cognitivesystems::comsys::autogen::ComsysEssentials::GRETask::operator<<= (cdrStream &_n)
{
  (cast::cdl::WorkingMemoryPointer&)m_intendedReferentProxy <<= _n;
  m_done = _n.unmarshalBoolean();
  m_resultLF = _n.unmarshalString(0);

}

