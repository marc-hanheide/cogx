// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.

#include "LFPacking.hh"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_1;



void
org::cognitivesystems::repr::lf::autogen::LFPacking::PackingNodeTarget::operator>>= (cdrStream &_n) const
{
  _n.marshalString(pnId,0);
  (const LogicalFormIds&) lfIds >>= _n;

}

void
org::cognitivesystems::repr::lf::autogen::LFPacking::PackingNodeTarget::operator<<= (cdrStream &_n)
{
  pnId = _n.unmarshalString(0);
  (LogicalFormIds&)lfIds <<= _n;

}

void
org::cognitivesystems::repr::lf::autogen::LFPacking::PackingEdge::operator>>= (cdrStream &_n) const
{
  _n.marshalString(peId,0);
  _n.marshalString(mode,0);
  _n.marshalString(head,0);
  (const PackingNodeTargets&) targets >>= _n;
  _n.marshalBoolean(coIndexedDep);
  preferenceScore >>= _n;

}

void
org::cognitivesystems::repr::lf::autogen::LFPacking::PackingEdge::operator<<= (cdrStream &_n)
{
  peId = _n.unmarshalString(0);
  mode = _n.unmarshalString(0);
  head = _n.unmarshalString(0);
  (PackingNodeTargets&)targets <<= _n;
  coIndexedDep = _n.unmarshalBoolean();
  (::CORBA::Float&)preferenceScore <<= _n;

}

void
org::cognitivesystems::repr::lf::autogen::LFPacking::PackedFeature::operator>>= (cdrStream &_n) const
{
  _n.marshalString(feat,0);
  _n.marshalString(value,0);
  (const LogicalFormIds&) lfIds >>= _n;

}

void
org::cognitivesystems::repr::lf::autogen::LFPacking::PackedFeature::operator<<= (cdrStream &_n)
{
  feat = _n.unmarshalString(0);
  value = _n.unmarshalString(0);
  (LogicalFormIds&)lfIds <<= _n;

}

void
org::cognitivesystems::repr::lf::autogen::LFPacking::PackedOntologicalSort::operator>>= (cdrStream &_n) const
{
  _n.marshalString(sort,0);
  (const LogicalFormIds&) lfIds >>= _n;

}

void
org::cognitivesystems::repr::lf::autogen::LFPacking::PackedOntologicalSort::operator<<= (cdrStream &_n)
{
  sort = _n.unmarshalString(0);
  (LogicalFormIds&)lfIds <<= _n;

}

void
org::cognitivesystems::repr::lf::autogen::LFPacking::PackedNominal::operator>>= (cdrStream &_n) const
{
  _n.marshalString(nomVar,0);
  (const PackedOntologicalSorts&) packedSorts >>= _n;
  (const Proposition&) prop >>= _n;
  (const Relations&) rels >>= _n;
  (const PackedFeatures&) feats >>= _n;
  (const PackingEdges&) pEdges >>= _n;

}

void
org::cognitivesystems::repr::lf::autogen::LFPacking::PackedNominal::operator<<= (cdrStream &_n)
{
  nomVar = _n.unmarshalString(0);
  (PackedOntologicalSorts&)packedSorts <<= _n;
  (Proposition&)prop <<= _n;
  (Relations&)rels <<= _n;
  (PackedFeatures&)feats <<= _n;
  (PackingEdges&)pEdges <<= _n;

}

void
org::cognitivesystems::repr::lf::autogen::LFPacking::NominalPackingEdgePair::operator>>= (cdrStream &_n) const
{
  _n.marshalString(head,0);
  (const PackingEdge&) pe >>= _n;

}

void
org::cognitivesystems::repr::lf::autogen::LFPacking::NominalPackingEdgePair::operator<<= (cdrStream &_n)
{
  head = _n.unmarshalString(0);
  (PackingEdge&)pe <<= _n;

}

void
org::cognitivesystems::repr::lf::autogen::LFPacking::PackingNode::operator>>= (cdrStream &_n) const
{
  _n.marshalString(pnId,0);
  (const LogicalFormIds&) lfIds >>= _n;
  (const PackedNominals&) packedNoms >>= _n;
  _n.marshalString(root,0);
  (const NominalPackingEdgePairs&) nomsPePairs >>= _n;
  preferenceScore >>= _n;

}

void
org::cognitivesystems::repr::lf::autogen::LFPacking::PackingNode::operator<<= (cdrStream &_n)
{
  pnId = _n.unmarshalString(0);
  (LogicalFormIds&)lfIds <<= _n;
  (PackedNominals&)packedNoms <<= _n;
  root = _n.unmarshalString(0);
  (NominalPackingEdgePairs&)nomsPePairs <<= _n;
  (::CORBA::Float&)preferenceScore <<= _n;

}

void
org::cognitivesystems::repr::lf::autogen::LFPacking::PackedLogicalForm::operator>>= (cdrStream &_n) const
{
  _n.marshalString(packedLFId,0);
  (const PackingNodes&) pNodes >>= _n;
  _n.marshalString(root,0);

}

void
org::cognitivesystems::repr::lf::autogen::LFPacking::PackedLogicalForm::operator<<= (cdrStream &_n)
{
  packedLFId = _n.unmarshalString(0);
  (PackingNodes&)pNodes <<= _n;
  root = _n.unmarshalString(0);

}

