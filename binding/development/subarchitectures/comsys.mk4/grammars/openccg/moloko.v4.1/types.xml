<types name="core" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="../types.xsd"
>


<type name="types"/>


<!-- ======================================================= -->
<!--             SEMANTIC TYPES- VERB MODIFIERS              -->
<!-- ======================================================= -->

<!--these are the syntactic equivalent to modifer below. Unfortunately can't use semantic sort to 'restrict
	the application of unary rules -->

<type name="s-modifier-types" parents="types"/> 

	<type name="s-location"      parents="s-modifier-types"/>
	<type name="s-dynamic"       parents="s-modifier-types"/>
         <type name="s-direction"    parents="s-dynamic"/>
	     <type name="s-wherefrom"    parents="s-dynamic"/>
	     <type name="s-whereto"      parents="s-dynamic"/>
		 <type name="s-through"      parents="s-dynamic"/>
    <type name="s-time"       parents="s-modifier-types"/>
	<type name="s-comparison"       parents="s-modifier-types"/>
	<type name="s-comment"          parents="s-modifier-types"/>
	<type name="s-manner"           parents="s-modifier-types"/>
	<type name="s-probability"      parents="s-modifier-types"/>

<!-- these are attahced to modifiers to specify what kind of complexcat they can become
		ex. n-left means it mods a n to its left (n\n), vp right is (vp/vp)
-->

<type name="complex-cat-types" parents="types"/> 

     <type name="n-left" parents="complex-cat-types"/> 
	 <type name="s-left" parents="complex-cat-types"/> 
     <type name="vp-left" parents="complex-cat-types"/>
	 
	 <type name="n-right" parents="complex-cat-types"/> 
	 <type name="s-right" parents="complex-cat-types"/> 
     <type name="vp-right" parents="complex-cat-types"/>
	   
	  <!-- these are collections of the  cc-types above, these are selected in the dictionary via macros -->
	 <type name="all-left"   parents="n-left s-left vp-left"/>
     <type name="sent-left"   parents="s-left"/>

     <type name="adv-all"   parents="vp-left vp-right s-right s-left"/> 
  
<!-- perhaps can collapse time and duration into single??= -->

<!-- only the "top level of these modifier types serve restrictive functions
	the others are there for "ontological" reasons -->



<type name="modifier" parents="types"/> 
    
	<type name="m-negation"      parents="modifier"/>
	<type name="m-dynamic"    parents="modifier"/>
	     <type name="m-direction"    parents="m-dynamic"/>
	     <type name="m-wherefrom"    parents="m-dynamic"/>
	     <type name="m-whereto"      parents="m-dynamic"/>
		 <type name="m-through"      parents="m-dynamic"/>
	<type name="m-manner"         parents="modifier"/> 
    <type name="m-duration"       parents="modifier"/>  
    <type name="m-time"           parents="modifier"/>   
    <type name="m-location"       parents="modifier"/>	   
	<type name="m-probability"    parents="modifier"/>
    <type name="m-frequency"      parents="modifier"/>
	    <!-- sometimes, often, usually -->
	<type name="m-comment"        parents="modifier"/>
	    <!-- fortunately, please, kindly, you know, I think -->  
	<type name="m-serial"         parents="modifier"/>
        <!-- "go get that" -->  
	<type name="m-accompaniment"  parents="modifier"/>
		<!-- with ... -->
	<type name="m-benefactor"     parents="modifier"/>
		<!-- for ... -->
	<type name="m-comparison"     parents="modifier"/>
		<!-- like the ball -->
	<type name="m-relational"     parents="modifier"/>    
		 <type name="m-cause"        parents="m-relational"/>
	     <type name="m-result"       parents="m-relational"/>	
         <type name="m-condition"    parents="m-relational"/>	
	<type name="m-purpose"        parents="modifier"/> 
		<!-- I went there "to get it" -->
	<type name="m-intensity"        parents="modifier"/> 
		
<!--
<type name="event" parents="types"/> 		 	
     <type name="relational" parents="event"/> 
     <type name="action"      parents="event"/> 		 	 			
 	     <type name="action-motion"     parents="action m-dynamic m-location "/>
		 <type name="action-non-motion" parents="action m-location"/> 
		 
	 <type name="state"       parents="event"/>
		<type name="existence"  parents="state"/>
		<type name="ascription" parents="state"/>

     <type name="internal" parents="event"/>
		<type name="perception" parents="internal"/>
		<type name="cognition" parents="internal"/> 

     <type name="modal" parents= "event"/> 
     <type name="communication" parents= "event"/>  -->

 <!-- these are just useful groups inherited from by event-types below 	-->		
 	      			   
	<type name="m-D"   parents="m-frequency m-probability m-relational m-comment m-time "/>
    <type name="m-D.5" parents="m-D m-duration m-accompaniment m-benefactor m-comparison m-serial "/>   	
	<type name="m-C"   parents="m-D.5 m-location"/>
	<type name="m-B"   parents="m-C m-manner"/>   	
    <type name="m-ALL" parents="m-B m-dynamic"/> 


<type name="event" parents="types"/> 		 	
     <type name="relational" parents="event"/> 
     <type name="action"      parents="event"/> 		 	 			
 	     <type name="action-motion"     parents="action m-purpose m-ALL"/>
		 <type name="action-non-motion" parents="action m-purpose m-B"/> 
		 
	 <type name="state"       parents="event"/>
		<type name="existence"  parents="state m-C m-negation"/>
		<type name="ascription" parents="state m-D.5 m-negation m-purpose"/>
	
     <type name="internal" parents="event"/>
		<type name="perception" parents="internal m-purpose m-ALL"/>
		<type name="cognition" parents="internal m-B"/> 

     <type name="modal" parents= "event m-negation m-D"/> 
     <type name="communication" parents= "event m-purpose m-D"/> 


		 		 	 					    
<!-- ======================================================= -->
<!--             SEMANTIC TYPES- VERBS                       -->
<!--     Where should motion be included, if we want mult inher how do it?-->
<!-- WE WILL NEED TO BE CARFEFUL ABOUT NAMES!! NO DUPLICATES!!! -->
<!-- ======================================================= -->

<!-- relations between configs, like ordering, cause-effect, etc.-->
 

<!--
<type name="grammatical" parents="types"/> 
<type name="configuration" parents="types"/> 

	<type name="doing" parents="configuration"/>
		<type name="motion" parents="doing"/>
		<type name="non-motion" parents="doing"/>
	
	<type name="being-having" parents="configuration"/>
		<type name="existence" parents="being-having"/>
		<type name="ascription" parents="being-having"/>
			
	<type name="internal" parents="configuration"/>
		<type name="perception" parents="internal"/>
		<type name="cognition" parents="internal"/>
		<type name="emotional" parents="internal"/>	
		
	<type name="communication" parents="configuration"/>
-->

<!-- ======================================================= -->
<!--             SEMANTIC TYPES- NOUNS                       -->
<!--             not sure about material, part				 -->
<!--         also, event...in time??						 -->
<!-- ======================================================= -->

<type name="entity" parents="types"/>
	<type name="physical" parents="entity"/> 
		<type name="animate" parents="physical"/> 
			<type name="person" parents="animate"/>			
		<type name="thing" parents="physical"/> 
		<type name="part" parents="physical"/> 
	<type name="e-location" parents="entity"/>
	   <type name="region" parents="e-location"/> 
	<type name="e-material" parents="entity"/>
	<type name="e-measure" parents="entity"/>
	<type name="e-event" parents="entity"/> 
	<type name="e-time" parents="entity"/> 
		<type name="e-time-location" parents="e-time"/> 
		<type name="e-time-unit" parents="e-time"/>


<type name="deictic-pronoun" parents="entity event"/> 	

<!--currently being used for rooms like Room 101, Leibniz room
     UGLY  -->
<type name="e-identifier" parents="entity"/>
      <type name="loc-name" parents="e-identifier"/>
      <type name="number" parents="e-identifier"/>
	  	  
<!-- ======================================================= -->
<!--             SEMANTIC TYPES- ADJECTIVES                  -->
<!-- ======================================================= -->
 
<type name="quality" parents="types"/> 
	<type name="q-physical" parents="quality"/> 
		<type name="q-size" parents="q-physical"/> 
		<type name="q-shape" parents="q-physical"/> 
		<type name="q-age" parents="q-physical"/> 
		<type name="q-color" parents="q-physical"/> 
		<type name="q-state" parents="q-physical"/>  
		<type name="q-material" parents="q-physical"/> 			
	<type name="q-position" parents="quality"/> 
		<type name="q-location" parents="q-position"/> 
		<type name="q-number" parents="q-position"/> 
		<type name="q-temporal" parents="q-position"/>
		<type name="q-discourse" parents="q-position"/>
	<type name="q-attitude" parents="quality"/> 		

<!-- ======================================================= -->
<!--             SEMANTIC TYPES- DISCOURSE UNITS             -->
<!-- ======================================================= -->

<type name="discourse" parents="types"/> 
    <type name="cue" parents="discourse"/> 
    <type name="greeting" parents="discourse"/>
	<type name="reject" parents="discourse"/>
	<type name="acknowledge" parents="discourse"/>
	<type name="evaluate" parents="discourse"/>
			
<!-- ======================================================= -->
<!--             FEATURE TYPES- SYNTACTIC FORMS              -->
<!-- ======================================================= -->

<!-- NOTE: currently, we have a problem with sentences like he go, because
		   we get the reading of non-fin which must be left open to handle
		   things like  He will go
		   Hmmm...... 
		   Must block any Subj adjoing until it is made finite (via modal or whatever) -->
		   

<type name="pers-vals" parents="types"/>
  <type name="3rd" parents="pers-vals"/>
  <type name="non-3rd" parents="pers-vals"/>
      <type name="1st" parents="non-3rd"/>
      <type name="2nd" parents="non-3rd"/>

<type name="num-vals" parents="types"/>   
   <type name="sg" parents="num-vals"/>
   <type name="pl" parents="num-vals"/>

<type name="case-vals" parents="types"/>   
   <type name="nom" parents="case-vals"/>
   <type name="acc" parents="case-vals"/>

<type name="mood-vals" parents="types"/>  
    <type name="imp" parents="mood-vals"/>
	<type name="non-imp" parents="mood-vals"/>
      <type name="ind" parents="non-imp"/>
      <type name="int" parents="non-imp"/>

<type name="vform-vals" parents="types"/>  
    <type name="fin" parents="vform-vals"/>
    <type name="non-fin" parents="vform-vals"/>
    <type name="progr" parents="vform-vals"/>
    <type name="inf" parents="vform-vals"/>
	<type name="fronted" parents="vform-vals"/>
	<type name="vform-deictic" parents="vform-vals"/>
	  	       
<type name="nform" parents="types"/> 
     <type name="basic" parents="nform"/>
     	 <type name="addressable" parents="basic"/>
	 <type name="dummy" parents="nform"/>
	      <type name="dummy-deic" parents="dummy"/>
  	      <type name="dummy-pers" parents="dummy"/>
	 <type name="WHNP" parents="nform"/> 
	      <type name="WHNP-subj" parents="WHNP"/>
			   <type name="who-subj" parents="WHNP-subj"/>
          <type name="WHNP-obj" parents="WHNP"/>
			   <type name="who-obj" parents="WHNP-obj"/>
		   	   <type name="what-obj" parents="WHNP-obj"/> 
		  <type name="WHNP-pp-mod" parents="WHNP"/> 	    		
		      <type name="where-location" parents="WHNP-pp-mod"/>  
		  <type name="WHNP-scomp" parents="WHNP"/> 	

<type name="aform" parents="types"/>   
   <type name="aform-basic" parents="aform"/>
   <type name="comparative" parents="aform"/>
   <type name="superlative" parents="aform"/>


</types>	

