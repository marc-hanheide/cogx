# camera parameter file generated Fri Sep 10 19:21:44 2010

# Intrinsic parameters for pinhole camera model.
# The pinhole camera model is as follows:
# m = A*(R*M + t)
#
# M .. 3x1 world point [mm]
# A .. 3x3 camera intrinsic matrix
#          |f_x  0  c_x|
#      A = | 0  f_y c_y|
#          | 0   0   1 |
#      c_x, c_y .. principal point [pix]
#      f_x, f_y .. focal length in [pix]
#                  f_x = f/s_x, f_y = f/s_y
#                  with f the focal length in [mm] and s_x, s_y the pixel
#                  sizes in [mm/pix]
# R,t .. 3x3 rotation matrix and 3x1 translation vector [mm]
#      pose of camera w.r.t. world (= extrinsic parameters)
# m .. 3x1 image point in homogenous co-ordinates
#      image point in cartesian pixel co-ordinates is given as
#      (x, y) = (m_x/m_z, m_y/m_z)
# Note that only the ratios focal length to pixel size can be determined.
# Given a (known) nominal focal length f (e.g. from camera data sheet) we
# can calculate:
# s_x = f/f_x .. horizontal pixel size [mm/pix]
# s_y = f/f_y .. vertical pixel size [mm/pix]
# r = s_x/s_y .. pixel aspect ratio
#
# Distortion is modelled as follows:
# x_d = x + x*(k1*r^2 + k2*r^4) + 2*p1*x*y + p2*(r^2 + 2*x^2)
# y_d = y + y*(k1*r^2 + k2*r^4) + 2*p1*x*y + p2*(r^2 + 2*y^2)
#
# where (x, y) are ideal, distortion-free image physical co-ordinates,
# (x_d, y_d) are distorted image physical co-ordinates and r^2 = x^2 + y^2
#
# w, h .. image width and height

# focal lengths in [pix]
fx = 1639.192139
fy = 1641.845703
# principal point [pix]
cx = 417.087677
cy = 304.352356

# (nominal) focal length [mm]
f  = 6.000000
# pixel size [mm/pix]
sx = 0.003660
sy = 0.003654
# aspect ratio: pixel size x/y
r  = 1.001619
# image width and height
w =  800
h =  600

# distortion parameters
k1 = -0.083946
k2 = -0.212986
p1 = 0.001708
p2 = 0.000903


# poses of calibration object w.r.t. camera for each image
# 3x1 translation vector t [m] and 3x3 rotation matrix R (in row major order)
nposes = 12
# data/cal1.jpg
pose0 = [-67.319 115.185 779.118]  [0.957 -0.290 -0.015 -0.150 -0.451 -0.880 0.249 0.844 -0.475]
# data/cal3.jpg
pose1 = [-84.552 105.093 752.915]  [0.950 -0.170 0.261 -0.162 -0.985 -0.053 0.266 0.008 -0.964]
# data/cal4.jpg
pose2 = [-112.687 31.451 891.544]  [0.972 -0.131 0.195 -0.126 -0.991 -0.040 0.199 0.015 -0.980]
# data/cal5.jpg
pose3 = [-133.072 8.564 933.684]  [0.980 0.085 -0.179 0.079 -0.996 -0.040 -0.182 0.025 -0.983]
# data/cal6.jpg
pose4 = [-98.951 70.400 817.374]  [0.960 0.126 -0.249 0.118 -0.992 -0.047 -0.253 0.016 -0.967]
# data/cal7.jpg
pose5 = [-59.558 105.234 751.786]  [0.783 -0.328 0.529 -0.307 -0.943 -0.129 0.541 -0.061 -0.839]
# data/cal8.jpg
pose6 = [-71.834 56.219 843.743]  [0.742 -0.351 0.571 -0.329 -0.933 -0.145 0.583 -0.080 -0.808]
# data/cal9.jpg
pose7 = [-118.118 31.489 887.034]  [0.974 -0.040 0.223 -0.122 -0.923 0.366 0.191 -0.384 -0.903]
# data/cal10.jpg
pose8 = [-96.586 91.563 774.342]  [0.974 -0.041 0.224 -0.123 -0.923 0.364 0.192 -0.382 -0.904]
# data/cal11.jpg
pose9 = [-84.346 11.703 922.998]  [0.882 0.033 -0.471 0.210 -0.920 0.329 -0.422 -0.389 -0.819]
# data/cal12.jpg
pose10 = [-78.596 82.899 790.263]  [0.743 -0.091 0.663 -0.330 -0.912 0.245 0.582 -0.401 -0.708]
# data/cal13.jpg
pose11 = [-140.089 -116.031 904.556]  [0.308 0.935 0.175 0.843 -0.183 -0.506 -0.441 0.304 -0.845]
