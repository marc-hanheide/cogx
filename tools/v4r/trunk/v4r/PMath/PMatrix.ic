/**
 * $Id$
 */


namespace PMat
{

/**
 * Multiplication of a 2x2 matrix with a scalar
 */
template<typename T1,typename T2, typename T3>
inline void Mul22(const T1 m[4], T2 s, T3 r[4])
{
  r[0] = m[0]*s, r[1] = m[1]*s;
  r[2] = m[2]*s, r[3] = m[3]*s;
}

template<typename T1,typename T2, typename T3>
inline void Mul2(const T1 R[4], const T2 v[2], T3 r[2])
{
  r[0] = R[0]*v[0] + R[1]*v[1];
  r[1] = R[2]*v[0] + R[3]*v[1];
}

template<typename T1,typename T2, typename T3, typename T4>
inline void MulAdd2( const T1 R[4], const T2 v[2], const T3 t[2], T4 r[2])
{
  Mul2(R,v,r);
  PVec::Add2(r,t,r);
}

/**
 * Matrix multiplication 3x3
 */
template<typename T1>
inline void Mul33(const T1 m1[9], const T1 m2[9], T1 r[9])
{
  r[0] = m1[0]*m2[0] + m1[1]*m2[3] + m1[2]*m2[6];
  r[1] = m1[0]*m2[1] + m1[1]*m2[4] + m1[2]*m2[7];
  r[2] = m1[0]*m2[2] + m1[1]*m2[5] + m1[2]*m2[8];

  r[3] = m1[3]*m2[0] + m1[4]*m2[3] + m1[5]*m2[6];
  r[4] = m1[3]*m2[1] + m1[4]*m2[4] + m1[5]*m2[7];
  r[5] = m1[3]*m2[2] + m1[4]*m2[5] + m1[5]*m2[8];

  r[6] = m1[6]*m2[0] + m1[7]*m2[3] + m1[8]*m2[6];
  r[7] = m1[6]*m2[1] + m1[7]*m2[4] + m1[8]*m2[7];
  r[8] = m1[6]*m2[2] + m1[7]*m2[5] + m1[8]*m2[8];
}

/**
 * Multiplication of a 3x3 matrix with a scalar
 */
template<typename T1>
inline void Mul33(const T1 m[9], T1 s, T1 r[9])
{
  r[0] = m[0]*s; r[1] = m[1]*s; r[2] = m[2]*s;
  r[3] = m[3]*s; r[4] = m[4]*s; r[5] = m[5]*s;
  r[6] = m[6]*s; r[7] = m[7]*s; r[8] = m[8]*s;
}

/**
 * Determinant of a 3x3 matrix
 */
template<typename T1>
inline T1 Det33(const T1 m[9])
{
  return m[0]*m[4]*m[8] + m[1]*m[5]*m[6] + m[2]*m[3]*m[7]
        -m[0]*m[5]*m[7] - m[1]*m[3]*m[8] - m[2]*m[4]*m[6];
}

template<typename T1,typename T2>
inline bool Inv33(const T1 m[9], T2 r[9])
{
  r[0] = m[4]*m[8] - m[5]*m[7];
  r[1] = m[2]*m[7] - m[1]*m[8];
  r[2] = m[1]*m[5] - m[2]*m[4];

  r[3] = m[5]*m[6] - m[3]*m[8];
  r[4] = m[0]*m[8] - m[2]*m[6];
  r[5] = m[2]*m[3] - m[0]*m[5];

  r[6] = m[3]*m[7] - m[4]*m[6];
  r[7] = m[1]*m[6] - m[0]*m[7];
  r[8] = m[0]*m[4] - m[1]*m[3];

  double det = Det33(r);

  if (PVec::IsZero(det)) return false;

  Mul33(r, 1./det, r);

  return true;
}

/** 
 * Transpose of a 3x3 matrix
 */
template<typename T1,typename T2>
inline void Transpose33(const T1 m[9], T2 r[9])
{
  r[0] = m[0]; r[1] = m[3]; r[2] = m[6];
  r[3] = m[1]; r[4] = m[4]; r[5] = m[7];
  r[6] = m[2]; r[7] = m[5]; r[8] = m[8];
}

template<typename T1,typename T2, typename T3>
inline void Mul3(const T1 R[9], const T2 v[3], T3 r[3])
{
  r[0] = R[0]*v[0] + R[1]*v[1] + R[2]*v[2];
  r[1] = R[3]*v[0] + R[4]*v[1] + R[5]*v[2];
  r[2] = R[6]*v[0] + R[7]*v[1] + R[8]*v[2];
}

template<typename T1,typename T2, typename T3, typename T4>
inline void MulAdd3( const T1 R[9], const T2 v[3], const T3 t[3], T4 r[3])
{
  Mul3(R,v,r);
  PVec::Add3(r,t,r);
}



}

