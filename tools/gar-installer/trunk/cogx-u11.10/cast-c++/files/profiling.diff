diff --speed-large-files --minimal -ru cast-2.1.0.orig/bin/run-cast-server.sh cast-2.1.0/bin/run-cast-server.sh
--- cast-2.1.0.orig/bin/run-cast-server.sh	2010-12-03 13:35:08.000000000 +0000
+++ cast-2.1.0/bin/run-cast-server.sh	2011-09-21 16:47:02.000000000 +0100
@@ -63,7 +63,7 @@
 
 
 # if we're killed, take down everyone else with us
-trap "kill -9 ${CPP_SERVER_JOB} ${JAVA_SERVER_JOB} ${PY_SERVER_JOB}" INT TERM EXIT
+trap "kill ${CPP_SERVER_JOB} ${JAVA_SERVER_JOB} ${PY_SERVER_JOB}; sleep 2; kill -q -9 ${CPP_SERVER_JOB} ${JAVA_SERVER_JOB} ${PY_SERVER_JOB} 2>/dev/null" INT TERM EXIT
 
 wait
 
@@ -74,4 +74,4 @@
 
 if (( $WE_SET_ICE_CONFIG )) ; then
     unset ICE_CONFIG
-fi
\ No newline at end of file
+fi
diff --speed-large-files --minimal -ru cast-2.1.0.orig/src/c++/cast/core/CMakeLists.txt cast-2.1.0/src/c++/cast/core/CMakeLists.txt
--- cast-2.1.0.orig/src/c++/cast/core/CMakeLists.txt	2010-12-03 13:35:08.000000000 +0000
+++ cast-2.1.0/src/c++/cast/core/CMakeLists.txt	2011-09-21 16:42:40.000000000 +0100
@@ -15,6 +15,10 @@
 add_library(CASTCore SHARED ${sources} ${headers})
 
 target_link_libraries(CASTCore CDL)
+if(GOOGLE_PROFILER)
+add_definitions(-DGOOGLE_PROFILER)
+target_link_libraries(CASTCore profiler)
+endif(GOOGLE_PROFILER)
 
 install(TARGETS CASTCore LIBRARY DESTINATION lib/cast ARCHIVE DESTINATION lib/cast)
 install(FILES ${headers} DESTINATION include/cast/core)
diff --speed-large-files --minimal -ru cast-2.1.0.orig/src/c++/cast/server/CMakeLists.txt cast-2.1.0/src/c++/cast/server/CMakeLists.txt
--- cast-2.1.0.orig/src/c++/cast/server/CMakeLists.txt	2010-12-03 13:35:08.000000000 +0000
+++ cast-2.1.0/src/c++/cast/server/CMakeLists.txt	2011-09-21 16:41:20.000000000 +0100
@@ -1,3 +1,7 @@
+
+
+
+
 set(sources ComponentServer.cpp ComponentCreator.cpp CASTComponentFactory.cpp CASTTimeServer.cpp)
 
 set(headers ComponentCreator.hpp CASTComponentFactory.hpp CASTTimeServer.hpp)
@@ -8,6 +12,12 @@
 target_link_libraries(cast-server-c++ ${ICE_LIBS})
 target_link_libraries(cast-server-c++ CDL CASTCore CASTArchitecture)
 
+if(GOOGLE_PROFILER)
+add_definitions(-DGOOGLE_PROFILER)
+target_link_libraries(cast-server-c++ profiler)
+endif(GOOGLE_PROFILER)
+
+
 IF (APPLE)
    FIND_LIBRARY(COREFOUNDATION_LIBRARY CoreFoundation )
    target_link_libraries(cast-server-c++ ${COREFOUNDATION_LIBRARY})
@@ -15,3 +25,4 @@
 
 install(TARGETS cast-server-c++ RUNTIME DESTINATION bin)
 install(FILES ${headers} DESTINATION include/cast/server)
+
diff --speed-large-files --minimal -ru cast-2.1.0.orig/src/c++/cast/server/ComponentServer.cpp cast-2.1.0/src/c++/cast/server/ComponentServer.cpp
--- cast-2.1.0.orig/src/c++/cast/server/ComponentServer.cpp	2010-12-03 13:35:08.000000000 +0000
+++ cast-2.1.0/src/c++/cast/server/ComponentServer.cpp	2011-09-21 16:51:47.000000000 +0100
@@ -17,6 +17,10 @@
 #include <log4cxx/helpers/properties.h>
 #include <log4cxx/stream.h>
 
+#ifdef GOOGLE_PROFILER
+#include <google/profiler.h>
+#endif 
+
 using namespace Ice;
 using namespace std;
 using namespace log4cxx;
@@ -31,11 +35,18 @@
 
 
   class ComponentServer : virtual public Ice::Application { 
+  private:
+    bool isProfiling;
   public: 
 
-
+#ifdef GOOGLE_PROFILER
+    virtual void interruptCallback(int i) {
+      if (isProfiling)
+        ProfilerStop();
+      communicator()->destroy();
+    }
+#endif
     virtual int run(int _argc, char* _argv[]) { 
-
       //
       cast::core::logging::initLogging();
 
@@ -46,6 +57,21 @@
       //log4cxx::logstream logstream(logger, Level::getInfo());
       //logstream<<"CPP server version: \""<<cdl::CASTRELEASESTRING<<"\""<<LOG4CXX_ENDMSG;
      
+#ifdef GOOGLE_PROFILER
+      char* profileFName=getenv("CAST_PROFILER");
+      if (profileFName!=NULL) {
+        ProfilerStart(profileFName);
+	isProfiling=true;
+        callbackOnInterrupt();
+        CAST_INFO(logger, "profiling enabled. profile file to be written: \""<<profileFName<<"\"", LogAdditions("cast.server.c++.ComponentServer","","")); 
+      } else {
+        isProfiling = false;
+        CAST_INFO(logger, "profiling disabled. set env variable 'CAST_PROFILER=filename.prof' to enable it.", LogAdditions("cast.server.c++.ComponentServer","","")); 
+      }
+#else
+      isProfiling= = false;
+      CAST_INFO(logger, "profiling disabled at compile time. recompile CAST with GOOGLE_PROFILER turned on.", LogAdditions("cast.server.c++.ComponentServer","","")); 
+#endif
 
       CommunicatorPtr ic = communicator();
       
@@ -70,9 +96,18 @@
       
       
       adapter->activate();
-      
+#ifdef GOOGLE_PROFILER
+      if (isProfiling) {
+        while(!ic->isShutdown()) {
+		ProfilerFlush();
+	  sleep(5);
+        }
+      } else {
+        ic->waitForShutdown();
+      }
+#else
       ic->waitForShutdown();
-      
+#endif
       return 0; 
     }
 
diff --speed-large-files --minimal -ru cast-2.1.0.orig/src/c++/CMakeLists.txt cast-2.1.0/src/c++/CMakeLists.txt
--- cast-2.1.0.orig/src/c++/CMakeLists.txt	2010-12-03 13:35:08.000000000 +0000
+++ cast-2.1.0/src/c++/CMakeLists.txt	2011-09-21 16:41:33.000000000 +0100
@@ -1,5 +1,7 @@
 include_directories(.)
 
+option(GOOGLE_PROFILER "use google profiler" NO)
+
 # auto generated code
 add_and_include_subdirectory (cast/slice)
 
