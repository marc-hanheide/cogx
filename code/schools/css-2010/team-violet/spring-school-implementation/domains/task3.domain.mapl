(define (domain cogx)

  (:requirements :mapl :adl :object-fluents)
  
  (:types 
   place - object
   room - object
   robot - agent
   person - object
   locatable - object
   visualobject robot - locatable
   recordlabel - object
   ackvalue - object
   name - object
   )
  
  (:predicates
   (connected ?n1 - place ?n2 - place)
   (visited ?loc - place)
   (searched ?loc - place)
   (asked-about-name ?pp - person)
   (asked-about-record ?pp - person)
   (asked-about-label ?pp - person ?l - recordlabel)
   (known-label-room ?l - recordlabel)
   )
  
  (:functions
   (is-in ?l - locatable) - place
   (is-in-room ?l - locatable) - room
   (in-room ?p - place) - room
   (label ?l - locatable) - recordlabel
   (object-acknowledged ?l - locatable) - ackvalue
   (person-name ?pp - person) - name
   (person-record ?pp - person) - recordlabel
   )

;;; objects ;;;
  (:constants
   chakakhan heartbreakers james jesusjones - recordlabel
   one two three - ackvalue
  )

  (:derived (known-label-room ?l - recordlabel) 
   (exists (?r - room ?v - visualobject) 
    (and 
     (= (is-in-room ?v) ?r)
     (= (label ?v) ?l))))
  
;;; actions ;;;

  (:action look-for-all
	   :agent (?a - robot)
	   :variables (?loc - place)
	   :precondition (and
			  (= (is-in ?a) ?loc)
			  (not (searched ?loc))
			  (or 
			   (exists (?v - visualobject)
			    (or
			     (not (kval ?a (is-in-room ?v)))
			     (= (is-in-room ?v) (in-room ?loc))))
			   (not 
			    (exists (?pp - person)
			     (= (person-asked ?pp) four)))))
	   :effect (and
		    (searched ?loc)
		    (update (searched ?loc) true)
		    ))
  
  (:action ask-for-your-name
   	   :agent (?a - robot)
	   :parameter (?pp - person)
	   :variables (?loc - place)
	   :precondition (
	     		  (= (is-in ?a) ?loc)
			  (= (is-in ?pp) ?loc)
			  (not (kval ?a (person-name ?pp))))
	   :effects (and
	     (kval ?a (person-name ?pp))
	     (asked-about-name ?pp)
	     (update (asked-about-name ?pp)))
  )

  (:action ask-for-your-record
   	   :agent (?a - robot)
	   :variables (?loc - place)
	   :parameters (?pp - person)
	   :precondition (
	     		  (= (is-in ?a) ?loc)
			  (= (is-in ?pp) ?loc)
			  (kval ?a (person-name ?pp))
			  (not (kval ?a (person-record ?pp))))
	   :effects (and
	     (kval ?a (person-record ?pp))
	     (asked-about-record ?pp)
	     (update (asked-about-record ?pp)))
  )

  (:action ask-for-record-room
   	   :agent (?a - robot)
	   :parameters (?loc - place ?v - visualobject ?l - recordlabel)
	   :variables (?pp - person)
	   :precondition (
	     		  (= (label ?v) ?l)
	     		  (= (is-in ?a) ?loc)
			  (= (is-in ?pp) ?loc)
			  (kval ?a (person-name ?pp))
			  (not (known-label-room ?l)))
	   :effects (and 
	     (asked-about-label ?pp ?l)
	     (update (asked-about-label ?pp ?l)))
  )


  (:action acknowledge-asked-one
   	   :agent (?a - robot)
	   :parameters (?pp - person)
	   :variables (?loc - place)
	   :precondition (and
	     		  (asked-about-name ?pp)
			  (asked-about-record ?pp)
			  (forall (?l - recordlabel) 
			   (asked-about-label ?pp ?l))
			  (not (kval ?a (person-asked ?pp))))
	   :effect (and
	     	    (assign (person-asked ?pp) one)
		    (update (person-asked ?pp) one))
  )
	   
  (:action acknowledge-asked-two
   	   :agent (?a - robot)
	   :parameters (?pp - person)
	   :variables (?loc - place)
	   :precondition (and
	     		  (asked-about-name ?pp)
			  (asked-about-record ?pp)
			  (forall (?l - recordlabel) 
			   (asked-about-label ?pp ?l))
			  (exists (?pp2 - person)
			   (= (person-asked ?pp2) one))
			  (not (exists (?pp3 - person)
			   (= (person-asked ?pp3) two)))
			  (not (kval ?a (person-asked ?pp))))
	   :effect (and
	     	    (assign (person-asked ?pp) two)
		    (update (person-asked ?pp) two))
  )

  (:action acknowledge-asked-three
   	   :agent (?a - robot)
	   :parameters (?pp - person)
	   :variables (?loc - place)
	   :precondition (and
	     		  (asked-about-name ?pp)
			  (asked-about-record ?pp)
			  (forall (?l - recordlabel) 
			   (asked-about-label ?pp ?l))
			  (exists (?pp2 - person)
			   (= (person-asked ?pp2) two))
			  (not (exists (?pp3 - person)
			   (= (person-asked ?pp3) three)))
			  (not (kval ?a (person-asked ?pp))))
	   :effect (and
	     	    (assign (person-asked ?pp) three)
		    (update (person-asked ?pp) three))
  )

  (:action acknowledge-asked-four
   	   :agent (?a - robot)
	   :parameters (?pp - person)
	   :variables (?loc - place)
	   :precondition (and
	     		  (asked-about-name ?pp)
			  (asked-about-record ?pp)
			  (forall (?l - recordlabel) 
			   (asked-about-label ?pp ?l))
			  (exists (?pp2 - person)
			   (= (person-asked ?pp2) three))
			  (not (exists (?pp3 - person)
			   (= (person-asked ?pp3) four)))
			  (not (kval ?a (person-asked ?pp))))
	   :effect (and
	     	    (assign (person-asked ?pp) four)
		    (update (person-asked ?pp) four))
  )

  (:action move
	   :agent (?a - robot)
	   :parameters (?to - place)
	   :variables (?from - place)
	   :precondition (and
			  (= (is-in ?a) ?from)
			  (or (connected ?from ?to)
			      (connected ?to ?from))
			  (not (exists (?pp - person))
			   (and
			    (= (is-in ?pp) ?from)
			    (not (kval ?a (person-asked ?pp))))))
	   :effect (and
		    (assign (is-in ?a) ?to)
		    (visited ?to)
		    (update (visited ?to) true))
  )
)
