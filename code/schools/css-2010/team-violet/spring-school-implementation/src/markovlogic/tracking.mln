///////////////////////////////
// CONSTANTS
///////////////////////////////

// beliefs
existingunion = {UF_P,UB_P}
percept = {P}
belief = {UF_P,UB_P,P}

// possible outcomes of the grouping process
outcome = {UF_P,UB_P,UI_P}

// feature values
is-inval = {None,U1_p,U3_p,Unknown}
labelval = {None,Unknown,Vrecord1,Vrecord2,Vrecord3}
objectidval = {None,Unknown,V6_f,Va_f,Vz_f}
typeval = {None,Unknown}

///////////////////////////////
// PREDICATES
///////////////////////////////

Is-in(belief,is-inval)
Label(belief,labelval)
Objectid(belief,objectidval)
Type(belief,typeval)

Outcome(outcome)
UnifyWith(existingunion)
Existence(belief)

///////////////////////////////
// EXISTING UNIONS
///////////////////////////////

100.0 Existence(UF_P)
0.0 Existence(UF_P) ^ Is-in(UF_P,U1_p)
Existence(UF_P) => !Is-in(UF_P,U3_p).
Existence(UF_P) => !Is-in(UF_P,Unknown).
Existence(UF_P) => !Is-in(UF_P,None).
0.0 Existence(UF_P) ^ Label(UF_P,Vrecord1)
Existence(UF_P) => !Label(UF_P,Unknown).
Existence(UF_P) => !Label(UF_P,Vrecord2).
Existence(UF_P) => !Label(UF_P,Vrecord3).
Existence(UF_P) => !Label(UF_P,None).
0.0 Existence(UF_P) ^ Objectid(UF_P,Va_f)
Existence(UF_P) => !Objectid(UF_P,Unknown).
Existence(UF_P) => !Objectid(UF_P,V6_f).
Existence(UF_P) => !Objectid(UF_P,Vz_f).
Existence(UF_P) => !Objectid(UF_P,None).
Existence(UF_P) => !Type(Uf_p,Unknown).
Existence(UF_P) => Type(Uf_p,None).

100.0 Existence(UB_P)
0.0 Existence(UB_P) ^ Is-in(UB_P,U3_p)
Existence(UB_P) => !Is-in(UB_P,U1_p).
Existence(UB_P) => !Is-in(UB_P,Unknown).
Existence(UB_P) => !Is-in(UB_P,None).
0.0 Existence(UB_P) ^ Label(UB_P,Vrecord3)
Existence(UB_P) => !Label(UB_P,Unknown).
Existence(UB_P) => !Label(UB_P,Vrecord1).
Existence(UB_P) => !Label(UB_P,Vrecord2).
Existence(UB_P) => !Label(UB_P,None).
0.0 Existence(UB_P) ^ Objectid(UB_P,V6_f)
Existence(UB_P) => !Objectid(UB_P,Unknown).
Existence(UB_P) => !Objectid(UB_P,Va_f).
Existence(UB_P) => !Objectid(UB_P,Vz_f).
Existence(UB_P) => !Objectid(UB_P,None).
Existence(UB_P) => !Type(Ub_p,Unknown).
Existence(UB_P) => Type(Ub_p,None).

///////////////////////////////
// NEW PERCEPT
///////////////////////////////

100.0 Existence(P)
0.0 Existence(P) ^ Is-in(P,U1_p)
Existence(P) => !Is-in(P,U3_p).
Existence(P) => !Is-in(P,Unknown).
Existence(P) => !Is-in(P,None).
0.0 Existence(P) ^ Label(P,Vrecord2)
Existence(P) => !Label(P,Unknown).
Existence(P) => !Label(P,Vrecord1).
Existence(P) => !Label(P,Vrecord3).
Existence(P) => !Label(P,None).
0.0 Existence(P) ^ Objectid(P,Vz_f)
Existence(P) => !Objectid(P,Unknown).
Existence(P) => !Objectid(P,V6_f).
Existence(P) => !Objectid(P,Va_f).
Existence(P) => !Objectid(P,None).
Existence(P) => !Type(P,Unknown).
Existence(P) => Type(P,None).

///////////////////////////////
// FEATURE VALUE CONSTRAINTS
///////////////////////////////

// rules for existence dependency
!Existence(x) => y=None v !Is-in(x,y).
!Existence(x) => Is-in(x,None).
!Existence(x) => y=None v !Label(x,y).
!Existence(x) => Label(x,None).
!Existence(x) => y=None v !Objectid(x,y).
!Existence(x) => Objectid(x,None).
!Existence(x) => y=None v !Type(x,y).
!Existence(x) => Type(x,None).

// mutual exclusivity and unicity constraints
Is-in(x,y) ^ Is-in(x,z) => y=z.
EXIST y Is-in(x,y).
Label(x,y) ^ Label(x,z) => y=z.
EXIST y Label(x,y).
Objectid(x,y) ^ Objectid(x,z) => y=z.
EXIST y Objectid(x,y).
Type(x,y) ^ Type(x,z) => y=z.
EXIST y Type(x,y).


///////////////////////////////
// SIMILARITIES
///////////////////////////////

// general correlations

100 Existence(x) ^ Existence(P) ^ Is-in(x,y) ^ Is-in(P,y) ^ y!=Unknown ^ y!=None => UnifyWith(x)
100 UnifyWith(x) ^ Is-in(x,y) ^ Is-in(P,z) => y=z
UnifyWith(x) ^ Is-in(x,y) => y!=Unknown. 
UnifyWith(x) ^ Is-in(x,y) => y!=None. 

UnifyWith(x) => Existence(x) ^ Existence(P).


// ADD YOUR ADDITIONAL FORMULAE FOR OBJECT TRACKING HERE
///////////////////////////////
// FINAL OUTCOME
///////////////////////////////

-3.5 Existence(P) => Outcome(UI_P)
UnifyWith(UB_P) <=> Outcome(UB_P).
UnifyWith(UF_P) <=> Outcome(UF_P).
-1.0 Outcome(x)
Outcome(x) ^ Outcome(y) => x=y.
Exist x Outcome(x).

