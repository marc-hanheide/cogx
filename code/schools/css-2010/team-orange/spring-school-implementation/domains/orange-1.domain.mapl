;;; ======================================================================================
;;; DOMAIN for the ORANGE team (gj@dfki.de) (version 1)
;;;
;;;
;;; The domain defines a robot "orange" and visual objects "james jesusjones chakakahn heartbreaker"
;;; The robot initializes all objects as NOT being found. 
;;;
;;; This domain can be tested with the following goals, using [ move1.problem.mapl ] 
;;; 
;;; * move to place p4 -- (:goal (= (is-in dora) p4))
;;; * visit all places -- (:goal (forall (?p - place) (= (visited ?p) true) ))
;;; * look for objects in all places -- (:goal (forall (?p - place) (= (searched ?p) true) ))
;;; * look for humans in all places -- 

;;; ======================================================================================


(define (domain cogx)

(:requirements :mapl :adl :object-fluents)
	
(:types 
	place - object
	robot - agent
	robot - movable
	visualobject - movable
)
	
(:objects
	orange	- robot
	james jesusjones chakakahn heartbreaker - visualobject
)

(:init
	(= (found james) false)
	(= (found jesusjones) false)
	(= (found chakakahn) false)
	(= (found heartbreaker) false)
)


;;; ======================================================================================
;;; PREDICATES
;;; ----------
;;; connected:	asserts that there is a directed connected from place ?n1 to place ?n2
;;; ======================================================================================

(:predicates
	(connected ?n1 - place ?n2 - place)
)	

;;; ======================================================================================
;;; FUNCTIONS
;;; functions can be updated, and as such yield a belief in the belief model on the binder
;;; ------------
;;; is-in:	records a movable object's (robot or visualobject) current position (place)
;;; visited: 	records whether a place has been visited (boolean)
;;; searched:	records whether a place has been searched for objects (boolean)
;;; searched-human: records whether a place has been search for people (boolean)
;;; found:      records whether a movable object has been found
;;; located: 	records the place where a movable object has been found
;;; ======================================================================================

(:functions
	(is-in ?r - movable) - place
	(visited ?p - place) - boolean 	
	(searched ?p - place) - boolean
	(searched-human ?p - place) - boolean
	(found ?p - movable) - boolean
	(located ?p - movable) - place
)

;;; ======================================================================================	
;;; ACTIONS
;;; ------------
;;; move:	takes the robot from a place (?from) to a given goal place (?to), marking 
;;; 		the goal place as visited. visited is assigned true, and updated to true.
;;; look-for-object: given that the robot is in a place, the action performs a look-for-objects
;;; 		action in that place, and marks and updates the place as searched.  	
;;; look-for-people: given that the robot is in a place, the action performs a look-for-people
;;; 		action in that place, and marks and updates the place as searched-human  
;;; 
;;; ======================================================================================	


(:action move
	 :agent		(?a - robot)
	 :parameters 	(?to - place)
	 :variables 	(?from - place)
	 :precondition 	(and
			(= (is-in ?a) ?from)
			(or (connected ?from ?to)
			(connected ?to ?from))
			)
	 :effect 	(and
			(assign (is-in ?a) ?to)
			(assign (visited ?to) true)
			(update (visited ?to) true)
			)
) ;;; end move

(:action look-for-object
	 :agent		(?a - robot)
	 :variables	(?p - place)
	 :precondition	(and 
	 		(= (is-in ?a) ?p)
			)
	 :effect	(and
	 	 	(assign (searched ?p) true)
	 	 	(update (searched ?p) true)			
			)
) ;;; look-for-object

(:action look-for-people
	 :agent		(?a - robot)
	 :variables	(?p - place)
	 :precondition	(and 
	 		(= (is-in ?a) ?p)
			)
	 :effect	(and
	 	 	(assign (searched-human ?p) true)
	 	 	(update (searched-human ?p) true)			
			)
) ;;; look-for-people

) ;;; end domain
