///////////////////////////////
// CONSTANTS
///////////////////////////////

// beliefs
existingunion = {UF1_P,UD1_P,UI1_P}
percept = {P}
belief = {UF1_P,UD1_P,UI1_P,P}

// possible outcomes of the grouping process
outcome = {UF1_P,UD1_P,UI1_P,UM1_P}

// feature values
detectedval = {False,None,Unknown}
is-inval = {None,U0_p,Unknown}
labelval = {None,Unknown,Vchaka,Vheart,Vjames,Vjesus}
typeval = {None,Unknown}
visualobjectidval = {None,Unknown,V0_f,V1_f,V2_f,V3_f}

///////////////////////////////
// PREDICATES
///////////////////////////////

Detected(belief,detectedval)
Is-in(belief,is-inval)
Label(belief,labelval)
Type(belief,typeval)
Visualobjectid(belief,visualobjectidval)

Outcome(outcome)
UnifyWith(existingunion)
Existence(belief)

///////////////////////////////
// EXISTING UNIONS
///////////////////////////////

100.0 Existence(UF1_P)
0.0 Existence(UF1_P) ^ Visualobjectid(UF1_P,V1_f)
Existence(UF1_P) => !Visualobjectid(UF1_P,Unknown).
Existence(UF1_P) => !Visualobjectid(UF1_P,V0_f).
Existence(UF1_P) => !Visualobjectid(UF1_P,V2_f).
Existence(UF1_P) => !Visualobjectid(UF1_P,V3_f).
Existence(UF1_P) => !Visualobjectid(UF1_P,None).
0.0 Existence(UF1_P) ^ Is-in(UF1_P,U0_p)
Existence(UF1_P) => !Is-in(UF1_P,Unknown).
Existence(UF1_P) => !Is-in(UF1_P,None).
0.0 Existence(UF1_P) ^ Label(UF1_P,Vjesus)
Existence(UF1_P) => !Label(UF1_P,Unknown).
Existence(UF1_P) => !Label(UF1_P,Vchaka).
Existence(UF1_P) => !Label(UF1_P,Vheart).
Existence(UF1_P) => !Label(UF1_P,Vjames).
Existence(UF1_P) => !Label(UF1_P,None).
0.0 Existence(UF1_P) ^ Detected(UF1_P,False)
Existence(UF1_P) => !Detected(UF1_P,Unknown).
Existence(UF1_P) => !Detected(UF1_P,None).
Existence(UF1_P) => !Type(Uf1_p,Unknown).
Existence(UF1_P) => Type(Uf1_p,None).

100.0 Existence(UD1_P)
0.0 Existence(UD1_P) ^ Visualobjectid(UD1_P,V0_f)
Existence(UD1_P) => !Visualobjectid(UD1_P,Unknown).
Existence(UD1_P) => !Visualobjectid(UD1_P,V1_f).
Existence(UD1_P) => !Visualobjectid(UD1_P,V2_f).
Existence(UD1_P) => !Visualobjectid(UD1_P,V3_f).
Existence(UD1_P) => !Visualobjectid(UD1_P,None).
0.0 Existence(UD1_P) ^ Is-in(UD1_P,U0_p)
Existence(UD1_P) => !Is-in(UD1_P,Unknown).
Existence(UD1_P) => !Is-in(UD1_P,None).
0.0 Existence(UD1_P) ^ Label(UD1_P,Vjames)
Existence(UD1_P) => !Label(UD1_P,Unknown).
Existence(UD1_P) => !Label(UD1_P,Vchaka).
Existence(UD1_P) => !Label(UD1_P,Vheart).
Existence(UD1_P) => !Label(UD1_P,Vjesus).
Existence(UD1_P) => !Label(UD1_P,None).
0.0 Existence(UD1_P) ^ Detected(UD1_P,False)
Existence(UD1_P) => !Detected(UD1_P,Unknown).
Existence(UD1_P) => !Detected(UD1_P,None).
Existence(UD1_P) => !Type(Ud1_p,Unknown).
Existence(UD1_P) => Type(Ud1_p,None).

100.0 Existence(UI1_P)
0.0 Existence(UI1_P) ^ Visualobjectid(UI1_P,V2_f)
Existence(UI1_P) => !Visualobjectid(UI1_P,Unknown).
Existence(UI1_P) => !Visualobjectid(UI1_P,V0_f).
Existence(UI1_P) => !Visualobjectid(UI1_P,V1_f).
Existence(UI1_P) => !Visualobjectid(UI1_P,V3_f).
Existence(UI1_P) => !Visualobjectid(UI1_P,None).
0.0 Existence(UI1_P) ^ Is-in(UI1_P,U0_p)
Existence(UI1_P) => !Is-in(UI1_P,Unknown).
Existence(UI1_P) => !Is-in(UI1_P,None).
0.0 Existence(UI1_P) ^ Label(UI1_P,Vheart)
Existence(UI1_P) => !Label(UI1_P,Unknown).
Existence(UI1_P) => !Label(UI1_P,Vchaka).
Existence(UI1_P) => !Label(UI1_P,Vjames).
Existence(UI1_P) => !Label(UI1_P,Vjesus).
Existence(UI1_P) => !Label(UI1_P,None).
0.0 Existence(UI1_P) ^ Detected(UI1_P,False)
Existence(UI1_P) => !Detected(UI1_P,Unknown).
Existence(UI1_P) => !Detected(UI1_P,None).
Existence(UI1_P) => !Type(Ui1_p,Unknown).
Existence(UI1_P) => Type(Ui1_p,None).

///////////////////////////////
// NEW PERCEPT
///////////////////////////////

100.0 Existence(P)
0.0 Existence(P) ^ Is-in(P,U0_p)
Existence(P) => !Is-in(P,Unknown).
Existence(P) => !Is-in(P,None).
0.0 Existence(P) ^ Visualobjectid(P,V3_f)
Existence(P) => !Visualobjectid(P,Unknown).
Existence(P) => !Visualobjectid(P,V0_f).
Existence(P) => !Visualobjectid(P,V1_f).
Existence(P) => !Visualobjectid(P,V2_f).
Existence(P) => !Visualobjectid(P,None).
0.0 Existence(P) ^ Label(P,Vchaka)
Existence(P) => !Label(P,Unknown).
Existence(P) => !Label(P,Vheart).
Existence(P) => !Label(P,Vjames).
Existence(P) => !Label(P,Vjesus).
Existence(P) => !Label(P,None).
0.0 Existence(P) ^ Detected(P,False)
Existence(P) => !Detected(P,Unknown).
Existence(P) => !Detected(P,None).
Existence(P) => !Type(P,Unknown).
Existence(P) => Type(P,None).

///////////////////////////////
// FEATURE VALUE CONSTRAINTS
///////////////////////////////

// rules for existence dependency
!Existence(x) => y=None v !Detected(x,y).
!Existence(x) => Detected(x,None).
!Existence(x) => y=None v !Is-in(x,y).
!Existence(x) => Is-in(x,None).
!Existence(x) => y=None v !Label(x,y).
!Existence(x) => Label(x,None).
!Existence(x) => y=None v !Type(x,y).
!Existence(x) => Type(x,None).
!Existence(x) => y=None v !Visualobjectid(x,y).
!Existence(x) => Visualobjectid(x,None).

// mutual exclusivity and unicity constraints
Detected(x,y) ^ Detected(x,z) => y=z.
EXIST y Detected(x,y).
Is-in(x,y) ^ Is-in(x,z) => y=z.
EXIST y Is-in(x,y).
Label(x,y) ^ Label(x,z) => y=z.
EXIST y Label(x,y).
Type(x,y) ^ Type(x,z) => y=z.
EXIST y Type(x,y).
Visualobjectid(x,y) ^ Visualobjectid(x,z) => y=z.
EXIST y Visualobjectid(x,y).


///////////////////////////////
// SIMILARITIES
///////////////////////////////

// general correlations

100 Existence(x) ^ Existence(P) ^ Is-in(x,y) ^ Is-in(P,y) ^ y!=Unknown ^ y!=None => UnifyWith(x)
100 UnifyWith(x) ^ Is-in(x,y) ^ Is-in(P,z) => y=z
UnifyWith(x) ^ Is-in(x,y) => y!=Unknown. 
UnifyWith(x) ^ Is-in(x,y) => y!=None. 

100 Existence(x) ^ Existence(P) ^ Label(x,y) ^ Label(P,y) ^ y!=Unknown ^ y!=None => UnifyWith(x)
100 UnifyWith(x) ^ Label(x,y) ^ Label(P,z) => y=z
UnifyWith(x) ^ Label(x,y) => y!=Unknown. 
UnifyWith(x) ^ Label(x,y) => y!=None. 

UnifyWith(x) => Existence(x) ^ Existence(P).

///////////////////////////////
// FINAL OUTCOME
///////////////////////////////

-3.5 Existence(P) => Outcome(UM1_P)
UnifyWith(UD1_P) <=> Outcome(UD1_P).
UnifyWith(UF1_P) <=> Outcome(UF1_P).
UnifyWith(UI1_P) <=> Outcome(UI1_P).
-1.0 Outcome(x)
Outcome(x) ^ Outcome(y) => x=y.
Exist x Outcome(x).

