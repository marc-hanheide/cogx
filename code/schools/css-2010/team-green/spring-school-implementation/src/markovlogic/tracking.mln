///////////////////////////////
// CONSTANTS
///////////////////////////////

// beliefs
existingunion = {Uk_O}
percept = {P}
belief = {Uk_O,P}

// possible outcomes of the grouping process
outcome = {Uk_O,Uq_O}

// feature values
is-inval = {None,U0_o,Unknown}
typeval = {None,Unknown}
visualobjectidval = {None,Unknown,V0_e,V3_e}
visualobjectnameval = {None,Unknown,Vrecord1,Vrecord4}

///////////////////////////////
// PREDICATES
///////////////////////////////

Is-in(belief,is-inval)
Type(belief,typeval)
Visualobjectid(belief,visualobjectidval)
Visualobjectname(belief,visualobjectnameval)

Outcome(outcome)
UnifyWith(existingunion)
Existence(belief)

///////////////////////////////
// EXISTING UNIONS
///////////////////////////////

100.0 Existence(Uk_O)
0.0 Existence(Uk_O) ^ Visualobjectid(Uk_O,V0_e)
Existence(Uk_O) => !Visualobjectid(Uk_O,Unknown).
Existence(Uk_O) => !Visualobjectid(Uk_O,V3_e).
Existence(Uk_O) => !Visualobjectid(Uk_O,None).
0.0 Existence(Uk_O) ^ Is-in(Uk_O,U0_o)
Existence(Uk_O) => !Is-in(Uk_O,Unknown).
Existence(Uk_O) => !Is-in(Uk_O,None).
0.0 Existence(Uk_O) ^ Visualobjectname(Uk_O,Vrecord1)
Existence(Uk_O) => !Visualobjectname(Uk_O,Unknown).
Existence(Uk_O) => !Visualobjectname(Uk_O,Vrecord4).
Existence(Uk_O) => !Visualobjectname(Uk_O,None).
Existence(Uk_O) => !Type(Uk_o,Unknown).
Existence(Uk_O) => Type(Uk_o,None).

///////////////////////////////
// NEW PERCEPT
///////////////////////////////

100.0 Existence(P)
0.0 Existence(P) ^ Is-in(P,U0_o)
Existence(P) => !Is-in(P,Unknown).
Existence(P) => !Is-in(P,None).
0.0 Existence(P) ^ Visualobjectid(P,V3_e)
Existence(P) => !Visualobjectid(P,Unknown).
Existence(P) => !Visualobjectid(P,V0_e).
Existence(P) => !Visualobjectid(P,None).
0.0 Existence(P) ^ Visualobjectname(P,Vrecord4)
Existence(P) => !Visualobjectname(P,Unknown).
Existence(P) => !Visualobjectname(P,Vrecord1).
Existence(P) => !Visualobjectname(P,None).
Existence(P) => !Type(P,Unknown).
Existence(P) => Type(P,None).

///////////////////////////////
// FEATURE VALUE CONSTRAINTS
///////////////////////////////

// rules for existence dependency
!Existence(x) => y=None v !Is-in(x,y).
!Existence(x) => Is-in(x,None).
!Existence(x) => y=None v !Type(x,y).
!Existence(x) => Type(x,None).
!Existence(x) => y=None v !Visualobjectid(x,y).
!Existence(x) => Visualobjectid(x,None).
!Existence(x) => y=None v !Visualobjectname(x,y).
!Existence(x) => Visualobjectname(x,None).

// mutual exclusivity and unicity constraints
Is-in(x,y) ^ Is-in(x,z) => y=z.
EXIST y Is-in(x,y).
Type(x,y) ^ Type(x,z) => y=z.
EXIST y Type(x,y).
Visualobjectid(x,y) ^ Visualobjectid(x,z) => y=z.
EXIST y Visualobjectid(x,y).
Visualobjectname(x,y) ^ Visualobjectname(x,z) => y=z.
EXIST y Visualobjectname(x,y).


///////////////////////////////
// SIMILARITIES
///////////////////////////////

// general correlations

100 Existence(x) ^ Existence(P) ^ Is-in(x,y) ^ Is-in(P,y) ^ y!=Unknown ^ y!=None => UnifyWith(x)
100 UnifyWith(x) ^ Is-in(x,y) ^ Is-in(P,z) => y=z
UnifyWith(x) ^ Is-in(x,y) => y!=Unknown. 
UnifyWith(x) ^ Is-in(x,y) => y!=None. 

UnifyWith(x) => Existence(x) ^ Existence(P).


// ADD YOUR ADDITIONAL FORMULAE FOR OBJECT TRACKING HERE
///////////////////////////////
// FINAL OUTCOME
///////////////////////////////

-3.5 Existence(P) => Outcome(Uq_O)
UnifyWith(Uk_O) <=> Outcome(Uk_O).
-1.0 Outcome(x)
Outcome(x) ^ Outcome(y) => x=y.
Exist x Outcome(x).

