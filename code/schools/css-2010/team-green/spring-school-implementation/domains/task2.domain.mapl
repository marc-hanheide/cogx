(define (domain task2)

        (:requirements :mapl :adl :object-fluents)

        (:types
                location record - object
        )

        (:constants
                robot - agent
                james jesus_jones heartbreakers chaka_khan - record
        )

	(:predicates
                (neighbored ?loc1 - location ?loc2 - location)
                (visited ?loc - location)
                (finished)
                (finished_looking)
                (is_start_node ?loc - location)
	)

        (:functions
                (robot_pos) - location
                (record_pos ?rec - record) - location
                (started) - boolean
                (start_node) - location
        )  

        (:action start
                 :agent(?a - agent)
	         :parameters (?loc - location)
                 :precondition (and (= (started) false) (= (robot_pos) ?loc))
                 :effect(and (assign (started) true) (assign (start_node) ?loc))
        )

        (:action move
	         :agent (?a - agent)
	         :parameters (?to - location)
                 :precondition(and (not (visited ?to)) (= (started) true))
                 :effect (and 
                              (assign (robot_pos) ?to)
                              (visited ?to)
 ;                             (forall (?loc - location) (when (neighbored ?loc ?to) (visited ?loc)))
                              (update (visited ?to) true)
                         )
        )

        (:action look-for-object
                 :agent (?a - agent)
	         :parameters (?rec - record)
                 :precondition(and (not (kval ?a (record_pos ?rec))) (= (started) true))
                 :effect (and
                                (kval ?a (record_pos ?rec))
                         )
        )

        (:action move_to_report_pos
                 :agent (?a - agent)
                 :parameters (?to - location)
                 :precondition (and 
;                                (forall (?loc - location) (visited ?loc))
                                 (= (start_node) ?to)
                                 (forall (?rec - record) (kval ?a (record_pos ?rec)))
                               )
                 :effect       (and (finished_looking) (assign (robot_pos) ?to))
        )

        (:action report
                 :agent (?a - agent)
                 :parameters ()
                 :precondition (finished_looking)
                 :effect       (finished)
        )
)