///////////////////////////////
// CONSTANTS
///////////////////////////////

// beliefs
existingunion = {UJ1_P,UW1_P,UD1_P}
percept = {P}
belief = {UJ1_P,UW1_P,UD1_P,P}

// possible outcomes of the grouping process
outcome = {UJ1_P,UW1_P,UD1_P,Ua1_P}

// feature values
is-inval = {None,U0_p,U1_p,Unknown,Uq1_p}
object-labelval = {None,Unknown,Vrecord2,Vrecord3}
typeval = {None,Unknown}
visualobjectidval = {None,Unknown,V0_f,V3_f,V4_f,V5_f}

///////////////////////////////
// PREDICATES
///////////////////////////////

Is-in(belief,is-inval)
Object-label(belief,object-labelval)
Type(belief,typeval)
Visualobjectid(belief,visualobjectidval)

Outcome(outcome)
UnifyWith(existingunion)
Existence(belief)

///////////////////////////////
// EXISTING UNIONS
///////////////////////////////

100.0 Existence(UJ1_P)
0.0 Existence(UJ1_P) ^ Visualobjectid(UJ1_P,V3_f)
Existence(UJ1_P) => !Visualobjectid(UJ1_P,Unknown).
Existence(UJ1_P) => !Visualobjectid(UJ1_P,V0_f).
Existence(UJ1_P) => !Visualobjectid(UJ1_P,V4_f).
Existence(UJ1_P) => !Visualobjectid(UJ1_P,V5_f).
Existence(UJ1_P) => !Visualobjectid(UJ1_P,None).
0.0 Existence(UJ1_P) ^ Is-in(UJ1_P,U1_p)
Existence(UJ1_P) => !Is-in(UJ1_P,U0_p).
Existence(UJ1_P) => !Is-in(UJ1_P,Unknown).
Existence(UJ1_P) => !Is-in(UJ1_P,Uq1_p).
Existence(UJ1_P) => !Is-in(UJ1_P,None).
0.0 Existence(UJ1_P) ^ Object-label(UJ1_P,Vrecord3)
Existence(UJ1_P) => !Object-label(UJ1_P,Unknown).
Existence(UJ1_P) => !Object-label(UJ1_P,Vrecord2).
Existence(UJ1_P) => !Object-label(UJ1_P,None).
Existence(UJ1_P) => !Type(Uj1_p,Unknown).
Existence(UJ1_P) => Type(Uj1_p,None).

100.0 Existence(UW1_P)
0.0 Existence(UW1_P) ^ Visualobjectid(UW1_P,V4_f)
Existence(UW1_P) => !Visualobjectid(UW1_P,Unknown).
Existence(UW1_P) => !Visualobjectid(UW1_P,V0_f).
Existence(UW1_P) => !Visualobjectid(UW1_P,V3_f).
Existence(UW1_P) => !Visualobjectid(UW1_P,V5_f).
Existence(UW1_P) => !Visualobjectid(UW1_P,None).
0.0 Existence(UW1_P) ^ Is-in(UW1_P,Uq1_p)
Existence(UW1_P) => !Is-in(UW1_P,U0_p).
Existence(UW1_P) => !Is-in(UW1_P,U1_p).
Existence(UW1_P) => !Is-in(UW1_P,Unknown).
Existence(UW1_P) => !Is-in(UW1_P,None).
0.0 Existence(UW1_P) ^ Object-label(UW1_P,Vrecord2)
Existence(UW1_P) => !Object-label(UW1_P,Unknown).
Existence(UW1_P) => !Object-label(UW1_P,Vrecord3).
Existence(UW1_P) => !Object-label(UW1_P,None).
Existence(UW1_P) => !Type(Uw1_p,Unknown).
Existence(UW1_P) => Type(Uw1_p,None).

100.0 Existence(UD1_P)
0.0 Existence(UD1_P) ^ Visualobjectid(UD1_P,V0_f)
Existence(UD1_P) => !Visualobjectid(UD1_P,Unknown).
Existence(UD1_P) => !Visualobjectid(UD1_P,V3_f).
Existence(UD1_P) => !Visualobjectid(UD1_P,V4_f).
Existence(UD1_P) => !Visualobjectid(UD1_P,V5_f).
Existence(UD1_P) => !Visualobjectid(UD1_P,None).
0.0 Existence(UD1_P) ^ Is-in(UD1_P,U0_p)
Existence(UD1_P) => !Is-in(UD1_P,U1_p).
Existence(UD1_P) => !Is-in(UD1_P,Unknown).
Existence(UD1_P) => !Is-in(UD1_P,Uq1_p).
Existence(UD1_P) => !Is-in(UD1_P,None).
0.0 Existence(UD1_P) ^ Object-label(UD1_P,Vrecord2)
Existence(UD1_P) => !Object-label(UD1_P,Unknown).
Existence(UD1_P) => !Object-label(UD1_P,Vrecord3).
Existence(UD1_P) => !Object-label(UD1_P,None).
Existence(UD1_P) => !Type(Ud1_p,Unknown).
Existence(UD1_P) => Type(Ud1_p,None).

///////////////////////////////
// NEW PERCEPT
///////////////////////////////

100.0 Existence(P)
0.0 Existence(P) ^ Is-in(P,Uq1_p)
Existence(P) => !Is-in(P,U0_p).
Existence(P) => !Is-in(P,U1_p).
Existence(P) => !Is-in(P,Unknown).
Existence(P) => !Is-in(P,None).
0.0 Existence(P) ^ Visualobjectid(P,V5_f)
Existence(P) => !Visualobjectid(P,Unknown).
Existence(P) => !Visualobjectid(P,V0_f).
Existence(P) => !Visualobjectid(P,V3_f).
Existence(P) => !Visualobjectid(P,V4_f).
Existence(P) => !Visualobjectid(P,None).
0.0 Existence(P) ^ Object-label(P,Vrecord3)
Existence(P) => !Object-label(P,Unknown).
Existence(P) => !Object-label(P,Vrecord2).
Existence(P) => !Object-label(P,None).
Existence(P) => !Type(P,Unknown).
Existence(P) => Type(P,None).

///////////////////////////////
// FEATURE VALUE CONSTRAINTS
///////////////////////////////

// rules for existence dependency
!Existence(x) => y=None v !Is-in(x,y).
!Existence(x) => Is-in(x,None).
!Existence(x) => y=None v !Object-label(x,y).
!Existence(x) => Object-label(x,None).
!Existence(x) => y=None v !Type(x,y).
!Existence(x) => Type(x,None).
!Existence(x) => y=None v !Visualobjectid(x,y).
!Existence(x) => Visualobjectid(x,None).

// mutual exclusivity and unicity constraints
Is-in(x,y) ^ Is-in(x,z) => y=z.
EXIST y Is-in(x,y).
Object-label(x,y) ^ Object-label(x,z) => y=z.
EXIST y Object-label(x,y).
Type(x,y) ^ Type(x,z) => y=z.
EXIST y Type(x,y).
Visualobjectid(x,y) ^ Visualobjectid(x,z) => y=z.
EXIST y Visualobjectid(x,y).


///////////////////////////////
// SIMILARITIES
///////////////////////////////

// general correlations

100 Existence(x) ^ Existence(P) ^ Is-in(x,y) ^ Is-in(P,y) ^ y!=Unknown ^ y!=None => UnifyWith(x)
100 UnifyWith(x) ^ Is-in(x,y) ^ Is-in(P,z) => y=z
UnifyWith(x) ^ Is-in(x,y) => y!=Unknown. 
UnifyWith(x) ^ Is-in(x,y) => y!=None. 

UnifyWith(x) => Existence(x) ^ Existence(P).


// ADD YOUR ADDITIONAL FORMULAE FOR OBJECT TRACKING HERE
///////////////////////////////
// FINAL OUTCOME
///////////////////////////////

-3.5 Existence(P) => Outcome(Ua1_P)
UnifyWith(UD1_P) <=> Outcome(UD1_P).
UnifyWith(UJ1_P) <=> Outcome(UJ1_P).
UnifyWith(UW1_P) <=> Outcome(UW1_P).
-1.0 Outcome(x)
Outcome(x) ^ Outcome(y) => x=y.
Exist x Outcome(x).

