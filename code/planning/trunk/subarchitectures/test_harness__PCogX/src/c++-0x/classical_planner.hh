#ifndef CLASSICAL_PLANNER_HH
#define CLASSICAL_PLANNER_HH

#include "CAST_SCAT/cast_scat.hh"

/* Header is automatically generated by ICE (Internet Communications
 * Engine -- ZeroC, Inc.) package \program{slice2cpp}.*/
#include "PCogX.hpp"

#ifndef CLASSICAL_PLANNER_DESIGNATION
#define CLASSICAL_PLANNER_DESIGNATION ""
#endif

using CAST_SCAT::Designator;
using CAST_SCAT::Designators;

// \module{ayPlan} headers. These provide satisficing and
// cost-optimal planning functionality.
#include "Problem.hh"
#include "Planner.hh"
#include "Planner_templates.hh"
#include "CostPlanner.hh"

class Classical_Planner :
    public CAST_SCAT::procedure_implementation<Classical_Planner>,
    public CAST_SCAT::procedure_call<>
{
public:
    typedef CAST_SCAT::procedure_implementation<Classical_Planner> Implement;
    typedef CAST_SCAT::procedure_call<> Call;    
    
    explicit Classical_Planner(Designator&& name = Designator(CLASSICAL_PLANNER_DESIGNATION));
    
    void implement__postFileNameForProblemDescription(PCogX::postFileNameForProblemDescriptionPtr&);
    void implement__postFileNameForDomainDescription(PCogX::postFileNameForDomainDescriptionPtr&);

    void implement__actionParseProblemDescription(PCogX::actionParseProblemDescriptionPtr&);
    void implement__actionParseDomainDescription(PCogX::actionParseDomainDescriptionPtr&);
    
    void implement__actionPreprocessProblemAndDomain(PCogX::actionPreprocessProblemAndDomainPtr&);

    void implement__actionPlan(PCogX::actionPlanPtr&);
    
    /* template for implementation of a procedure. REMEMBER to
     * register the implementation with CAST in
     * \method{runComponent}.*/
    //void implement__(PCogX::Ptr&);
    
    void implement__distinctPlanner(PCogX::distinctPlannerPtr&);
    void implement__readPropositionIdentifiers(PCogX::readPropositionIdentifiersPtr&);
    void implement__postSTRIPSAction(PCogX::postSTRIPSActionPtr&);
    void implement__postActionDefinition(PCogX::postActionDefinitionPtr&);
    void implement__postTypes(PCogX::postTypesPtr&);
    void implement__postXXsubtypeofYY(PCogX::postXXsubtypeofYYPtr&);
    
    void runComponent();
protected:
    void start();

    
    map<Designator, std::string> domain_file_names;
    map<Designator, std::string> problem_file_names;
    
    /* Problems associated with each designated classical planner.*/
    map<Designator, Planning::Problem> planning_problems;

    /* The plan last computed by a given designator. */
    map<Designator, std::string> plans;
};

#endif
