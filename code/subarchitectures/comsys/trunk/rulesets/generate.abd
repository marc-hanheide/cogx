% hi
generate : intention : greeting(h, r) <-
	dummy_nom1(Nom),
	i : sort(Nom, dvp) / 1.0,
	i : prop(Nom, 'c-goal') / 1.0,
	i : feat_SpeechAct(Nom, greeting) / 1.0,
	event : produce(r, Nom) / 1.0.

% @d1:dvp(c-goal  ^ /SpeechAct\assertion  ^ /Relation\accept ^ /AcknoModality\vision)
% what do i have here
%generate : intention : new_object_visible(Entity) <-
%	dummy_nom1(Nom),
%	i : sort(Nom, dvp) / 1.0,
%	i : prop(Nom, 'c-goal') / 1.0,
%	i : feat_SpeechAct(Nom, assertion) / 1.0,
%	i : feat_Relation(Nom, accept) / 1.0,
%	i : feat_AcknoModality(Nom, vision) / 1.0,
%	event : produce(r, Nom) / 1.0.

% no I do not know what this is
generate : intention : ask_yn(h, Object, Prop, PropValue) <-
	query_belief(Object, Prop, PropValue, AnswerType),
	dummy_nom1(Nom),
	i : sort(Nom, dvp) / 1.0,
	i : prop(Nom, 'c-goal') / 1.0,
	i : feat_SpeechAct(Nom, assertion) / 1.0,
	i : feat_Relation(Nom, answer) / 1.0,
	i : feat_AnswerType(Nom, AnswerType) / 1.0,
	event : produce(r, Nom) / 1.0.

generate : it(Nom) <-
	i : sort(Nom, entity) / 1.0,
	i : feat_Salient(Nom, true) / 1.0.

% what Prop is the Object
generate : intention : ask_property(h, Object, Prop) <-
	dummy_nom1(Nom),
	i : feat_CannedText(Nom, 'You_asked_me_about_a_property') / 1.0,
%	query_belief(Object, Prop, yes(PropValue), AnswerType).
	event : produce(r, Nom) / 1.0.

utt_head(Nom) <-
	dummy_nom1(Nom),
	i : sort(Nom, dvp) / 1.0,
	i : prop(Nom, 'c-goal') / 1.0.

% "ok", "i see" etc
%generate : intention : grounding(Modality, assertionVerified) <-
%	utt_head(Nom),
%	i : feat_SpeechAct(Nom, assertion) / 1.0,
%	grounding_result_to_relation(assertionVerified, Relation),
%	i : feat_Relation(Nom, Relation) / 1.0,
%	i : feat_Modality(Nom, Modality) / 1.0,
%	event : produce(r, Nom) / 1.0.

generate : intention : grounding(vision, assertionVerified) <-
	utt_head(Nom),
	i : feat_CannedText(Nom, 'Yes_I_can_see_that') / 1.0,
	event : produce(r, Nom) / 1.0.

generate : intention : grounding(discourse, assertionVerified) <-
	utt_head(Nom),
	i : feat_CannedText(Nom, 'Thank_you') / 1.0,
	event : produce(r, Nom) / 1.0.

generate : intention : grounding(discourse, assertionFalsified) <-
	utt_head(Nom),
	i : feat_CannedText(Nom, 'Too_bad') / 1.0,
	event : produce(r, Nom) / 1.0.

generate : intention : grounding(vision, assertionFalsified) <-
	dummy_nom1(Nom),
	i : sort(Nom, dvp) / 1.0,
	i : prop(Nom, 'c-goal') / 1.0,
	i : feat_CannedText(Nom, 'I_do_not_see_that') / 1.0,
	event : produce(r, Nom) / 1.0.

grounding_result_to_relation(assertionVerified, accept).
grounding_result_to_relation(assertionFalsified, reject).

opposite_answertype(positive, negative).
opposite_answertype(negative, positive).

% a positive query
% max cost = 3.5
query_belief(Object, Prop, yes(PropValue), AnswerType) <-
	query_belief0(Object, Prop, PropValue, AnswerType),
	dummy_assumption(x) / 1.0.  % XXX don't remember why?

% negative query
% max cost = 3.5
query_belief(Object, Prop, no(PropValue), AnswerType) <-
	query_belief0(Object, Prop, PropValue, OppAnswerType),
	opposite_answertype(OppAnswerType, AnswerType).

% positive/negative query about something unknown
query_belief(Object, Prop, Value, negative) <-
	feature_value_unknown(Object, Prop, Value) / 6.0.


	% query atomic value

% max cost = 2.5
query_belief0(Object, objecttype, Value, Polarity) <-
	k(now, private(r)) : objecttype(Object, FeatValue),
	equality_to_polarity(Value, FeatValue, Polarity).

query_belief0(Object, color, Value, Polarity) <-
	k(now, private(r)) : color(Object, FeatValue),
	equality_to_polarity(Value, FeatValue, Polarity).

equality_to_polarity(X, Y, positive) <-
	X = Y.

equality_to_polarity(X, Y, negative) <-
	X \= Y.

% we know the value
%query_belief0(Object, objecttype, PropValue, positive) <-
%	k(now, private(r)) : objecttype(Object, PropValue),
%	dummy_assumption(x) / 2.0.  % to make it more costly in case of "not"

% we can assume that the value is unknown, but for a huge cost
%query_belief0(Object, Prop, PropValue, negative) <-
%	feat_not_equal_to(Object, Prop, PropValue) / 20.0.

generate : intention : assert_prop(h, Object, Property) <-
	dummy_nom1(Nom),
	dummy_nom2(ContentNom),
	i : sort(Nom, dvp) / 1.0,
	i : prop(Nom, 'c-goal') / 1.0,
	i : feat_Relation(Nom, filler) / 1.0,
	event : produce(r, Nom) / 1.0.

%what color does the box have
generate : intention : need_get_value(Modality, Entity, color) <-
	dummy_nom1(Nom),
	dummy_nom2(ContentNom),
	dummy_nom3(TargetNom),
	dummy_nom4(QualityNom),
	%k(now, private(r)) : objecttype(Object, box),
	%k(now, private(r)) : color(Object, unknownColor),
	k(now, private(r)) : objecttype(Entity, Type) / 1.0,
%	k(now, attrib(r, h)) : objecttype(Entity, Type) / 1.0,
	%k(now, attrib(r, h)) : objecttype(Entity, Type),
	i : sort(Nom, dvp) / 1.0,
	i : prop(Nom, 'c-goal') / 1.0,
	i : feat_SpeechAct(Nom, question) / 1.0,
	i : rel_Content(Nom, ContentNom) / 1.0,
		i : sort(ContentNom, ascription) / 1.0,
		i : rel_Target(ContentNom, TargetNom) / 1.0,
			i : sort(TargetNom, entity) / 1.0,
			i : feat_InfoStatus(TargetNom, familiar) / 1.0,
			i : prop(TargetNom, Type) / 1.0,
		i : rel_Color(ContentNom, QualityNom) / 1.0,
			i : sort(QualityNom, quality) / 1.0,
			i : prop(QualityNom, color) / 1.0,
			i : feat_Questioned(QualityNom, true) / 1.0,
	event : produce(r, Nom) / 1.0.

% is the object blue
%d1:dvp(c-goal  ^ <SpeechAct>question  ^  <Content>(e1:ascription ^ <Target>(b2:entity ^ <InfoStatus>familiar ^ object)  ^ <Color>(b3:quality ^ blue)))
generate : intention : need_verify_hypothesis(Modality, Entity, Prop, Hypothesis) <-
	dummy_nom1(Nom),
	dummy_nom2(ContentNom),
	dummy_nom3(TargetNom),
	dummy_nom4(QualityNom),
	k(now, private(r)) : objecttype(Entity, Type),
	i : sort(Nom, dvp) / 1.0,
	i : prop(Nom, 'c-goal') / 1.0,
	i : feat_SpeechAct(Nom, question) / 1.0,
	i : rel_Content(Nom, ContentNom) / 1.0,
		i : sort(ContentNom, ascription) / 1.0,
		i : rel_Target(ContentNom, TargetNom) / 1.0,
			i : sort(TargetNom, entity) / 1.0,
			i : feat_InfoStatus(TargetNom, familiar) / 1.0,
			i : prop(TargetNom, Type) / 1.0,
		i : rel_Color(ContentNom, QualityNom) / 1.0,
			i : sort(QualityNom, quality) / 1.0,
			i : prop(QualityNom, Hypothesis) / 1.0,
			i : feat_Questioned(QualityNom, true) / 1.0,
	event : produce(r, Nom) / 1.0.

generate : intention : not_understood(Ag) <-
	dummy_nom1(Nom),
	i : sort(Nom, dvp) / 1.0,
	i : prop(Nom, 'c-goal') / 1.0,
	i : feat_CannedText(Nom, 'Sorry_I_did_not_understand') / 1.0,
	%i : feat_SpeechAct(Nom, assertion) / 1.0,
	%i : feat_Relation(Nom, reject) / 1.0,
	%i : feat_AcknoModality(Nom, action) / 1.0,
	event : produce(r, Nom) / 1.0.

% NOT THE FIRST is the box red or orange?” / “what color does the box have
%what color does the box have
%intention : produce(r, Nom) <-
%	dummy_nom1(Nom),
%	dummy_nom2(ContentNom),
%	dummy_nom3(TargetNom),
%	dummy_nom4(QualityNom),
%	k(now, private(r)) : objecttype(Object, box),
%	k(now, private(r)) : color(Object, unknownColor),
%	i : sort(Nom, dvp) / 1.0,
%	i : prop(Nom, 'c-goal') / 1.0,
%	i : feat_SpeechAct(Nom, question) / 1.0,
%	i : rel_Content(Nom, ContentNom) / 1.0,
%		i : sort(ContentNom, ascription) / 1.0,
%		i : rel_Target(ContentNom, TargetNom) / 1.0,
%			i : feat_InfoStatus(TargetNom, familiar) / 1.0,
%			i : prop(TargetNom, box) / 1.0,
%		i : rel_Color(ContentNom, QualityNom) / 1.0,
%			i : sort(QualityNom, quality) / 1.0,
%			i : prop(QualityNom, color) / 1.0,
%			i : feat_Questioned(QualityNom, true) / 1.0.
