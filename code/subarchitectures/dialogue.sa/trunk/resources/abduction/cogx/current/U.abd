%-------------------------------------------------------------------------
% GENERAL INTERPRETATION
%-------------------------------------------------------------------------

understand : event : utter(S, H, Nom) <-
	? understand : event : from_logical_form(S, H, Nom).

%-------------------------------------------------------------------------
% PERSONS
%-------------------------------------------------------------------------

	% the speaker
person(Speaker, _Hearer, Nom, Speaker) <-
	i : sort(Nom, person),
	i : prop(Nom, 'I'),
	i : feat_Num(Nom, sg).

	% the hearer
person(_Speaker, Hearer, Nom, Hearer) <-
	i : sort(Nom, person),
	i : prop(Nom, you).

%-------------------------------------------------------------------------
% REFERRING
%-------------------------------------------------------------------------

understand : is_reference(RefNom, ReferentAddr, EpSt) <-
	epst_variant(EpSt, RefEpSt),
	understand : referent_of(RefNom, ReferentAddr, RefEpSt) / reference_resolution.

understand : is_reference(Nom, Referent, _EpSt) <-
	understand : unknown_reference(Nom, Referent) / p(0.55),
	? understand : ungroundable(Nom, Referent).

%- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

%understand : about(RefNom, BeliefId, EpSt) <-
%	is_epst_variant(EpSt, RefEpSt),
%	understand : referent_of(RefNom, BeliefId, RefEpSt) / reference_resolution.

epst_variant(private(A), private(A)).
epst_variant(attrib(A, B), attrib(A, B)).
epst_variant(shared(A, B), shared(A, B)).
epst_variant(shared(A, B), shared(B, A)).

%-------------------------------------------------------------------------
% TOPIC
%-------------------------------------------------------------------------

understand : topic(_S, _H, EpSt, Int, RefNom, _Nom) <-
	? understand : is_reference(RefNom, ReferentAddr, EpSt),
	mark(referent, ReferentAddr) / p(1.0),
	int : address_content(Int, about, ReferentAddr) / p(1.0).

%-------------------------------------------------------------------------

get_topic_referent(S, H, attrib(H, S), _Int, Ref, _Nom, 'pointer-to'('topic-referent')) <-
	is_not_reference(Ref) / p(0.5).

%get_topic_referent(attrib(S, H), Int, Ref, Nom, 'pointer-to'('topic-referent')) <-
%	is_not_reference(Ref) / p(1.0).

get_topic_referent(_S, _H, EpSt, Int, Ref, _Nom, BId) <-
%	EpSt = shared(S, H),
	understand : about(Ref, BId, EpSt),
%	understand : about(Ref, BId),
	int : pre(Int, belief(Ref, EpSt, fv(mark, 'referring-expression'))) / p(1.0).
%	int : pre(Int, belief(Ref, EpSt, fv(about, BId))) / p(1.0),
%	int : pre(Int, belief(Ref, EpSt, mark(refexp))) / p(1.0).

%-------------------------------------------------------------------------
% ASSERTION EFFECT
%-------------------------------------------------------------------------

beliefs_for_assertion(Speaker, Hearer, Int, AssertedBelief) <-

	? understand : new_belief(Int, AssertedBelief, attrib(Hearer, Speaker)),
	int : address_content(Int, asserted, AssertedBelief) / p(1.0),

	% retrieve the referent
	mark(referent, ReferentAddr) / p(1.0),
	int : belief_content(AssertedBelief, about, ReferentAddr) / p(1.0).

%-------------------------------------------------------------------------

understand : assertion_effect(Speaker, Hearer, Int, _Ref, Polarity, Nom) <-
	i : sort(Nom, 'q-color'),
	i : prop(Nom, Prop),
	polarprop(Prop, Polarity, PolarPropFormula),

	beliefs_for_assertion(Speaker, Hearer, Int, AssertedBelief),
	int : belief_content(AssertedBelief, color, PolarPropFormula) / p(1.0).

understand : assertion_effect(Speaker, Hearer, Int, _Ref, Polarity, Nom) <-
	i : sort(Nom, 'q-shape'),
	i : prop(Nom, Prop),
	polarprop(Prop, Polarity, PolarPropFormula),

	beliefs_for_assertion(Speaker, Hearer, Int, AssertedBelief),
	int : belief_content(AssertedBelief, shape, PolarPropFormula) / p(1.0).

understand : assertion_effect(Speaker, Hearer, Int, _Ref, Polarity, Nom) <-
	i : sort(Nom, 'q-size'),
	i : prop(Nom, Prop),
	polarprop(Prop, Polarity, PolarPropFormula),

	beliefs_for_assertion(Speaker, Hearer, Int, AssertedBelief),
	int : belief_content(AssertedBelief, size, PolarPropFormula) / p(1.0).

understand : assertion_effect(Speaker, Hearer, Int, Ref, Polarity, Nom) <-
	i : sort(Nom, thing),
	i : prop(Nom, Prop),
	i : feat_Delimitation(Nom, existential),
	i : feat_Num(Nom, sg),
	i : feat_Quantification(Nom, specific),
	try_scope_modifier(Speaker, Hearer, Int, Ref, Polarity, Nom),
	try_scope_compound(Speaker, Hearer, Int, Ref, Polarity, Nom),
	polarprop(Prop, Polarity, PolarPropFormula),

	beliefs_for_assertion(Speaker, Hearer, Int, AssertedBelief),
	int : belief_content(AssertedBelief, type, PolarPropFormula) / p(1.0).

understand : assertion_effect(Speaker, Hearer, Int, _Ref, Polarity, Nom) <-
	i : sort(Nom, 'e-place'),
	i : prop(Nom, Prop),
	polarprop(Prop, Polarity, PolarPropFormula),

	beliefs_for_assertion(Speaker, Hearer, Int, AssertedBelief),
	int : belief_content(AssertedBelief, identity, PolarPropFormula) / p(1.0).

%-------------------------------------------------------------------------
% Old implementation.

%understand : assertion_effect(S, H, Int, Ref, Polarity, Nom) <-
%	i : sort(Nom, 'q-color'),
%	i : prop(Nom, Prop),
%	polarprop(Prop, Polarity, PolarProp),
%	int : pre(Int, belief(Ref, attrib(H, S), fv(mark, assertion))) / p(1.0),
%	int : pointer(given, assertion, 'referring-expression') / p(1.0),
%	int : pre(Int, belief(Ref, attrib(H, S), fv(color, PolarProp))) / p(1.0),
%	int : post(Int, belief(Ref, shared(S, H), fv(color, PolarProp))) / p(1.0).
%%	int : post(Int, state(Ref, [grounded, about(X), color])) / p(1.0).
%
%understand : assertion_effect(S, H, Int, Ref, Polarity, Nom) <-
%	i : sort(Nom, 'q-shape'),
%	i : prop(Nom, Prop),
%	polarprop(Prop, Polarity, PolarProp),
%	int : pre(Int, belief(Ref, attrib(H, S), fv(mark, assertion))) / p(1.0),
%	int : pointer(given, assertion, 'referring-expression') / p(1.0),
%	int : pre(Int, belief(Ref, attrib(H, S), fv(shape, PolarProp))) / p(1.0),
%	int : post(Int, belief(Ref, shared(S, H), fv(shape, PolarProp))) / p(1.0).
%
%understand : assertion_effect(S, H, Int, Ref, Polarity, Nom) <-
%	i : sort(Nom, 'q-size'),
%	i : prop(Nom, Prop),
%	polarprop(Prop, Polarity, PolarProp),
%	int : pre(Int, belief(Ref, attrib(H, S), fv(mark, assertion))) / p(1.0),
%	int : pointer(given, assertion, 'referring-expression') / p(1.0),
%	int : pre(Int, belief(Ref, attrib(H, S), fv(size, PolarProp))) / p(1.0),
%	int : post(Int, belief(Ref, shared(S, H), fv(size, PolarProp))) / p(1.0).
%
%understand : assertion_effect(S, H, Int, Ref, Polarity, Nom) <-
%	i : sort(Nom, thing),
%	i : prop(Nom, Prop),
%	i : feat_Delimitation(Nom, unique),
%	i : feat_Num(Nom, sg),
%	i : feat_Quantification(Nom, specific),
%	try_scope_modifier(S, H, Int, Ref, Polarity, Nom),
%	try_scope_compound(S, H, Int, Ref, Polarity, Nom),
%	polarprop(Prop, Polarity, PolarProp),
%	int : pre(Int, belief(Ref, attrib(H, S), fv(mark, assertion))) / p(1.0),
%	int : pointer(given, assertion, 'referring-expression') / p(1.0),
%	int : pre(Int, belief(Ref, shared(S, H), fv(objecttype, PolarProp))) / p(1.0).
%
%understand : assertion_effect(S, H, Int, Ref, Polarity, Nom) <-
%	i : sort(Nom, thing),
%	i : prop(Nom, Prop),
%	i : feat_Delimitation(Nom, existential),
%	i : feat_Num(Nom, sg),
%	i : feat_Quantification(Nom, specific),
%	try_scope_modifier(S, H, Int, Ref, Polarity, Nom),
%	try_scope_compound(S, H, Int, Ref, Polarity, Nom),
%	polarprop(Prop, Polarity, PolarProp),
%	int : pre(Int, belief(Ref, attrib(H, S), fv(mark, assertion))) / p(1.0),
%	int : pointer(given, assertion, 'referring-expression') / p(1.0),
%	int : pre(Int, belief(Ref, attrib(H, S), fv(objecttype, PolarProp))) / p(1.0),
%	int : post(Int, belief(Ref, shared(S, H), fv(objecttype, PolarProp))) / p(1.0).
%
%understand : assertion_effect(S, H, Int, Ref, Polarity, Nom) <-
%	i : sort(Nom, 'e-place'),
%	i : prop(Nom, Prop),
%	polarprop(Prop, Polarity, PolarProp),
%	int : pre(Int, belief(Ref, attrib(H, S), fv(mark, assertion))) / p(1.0),
%	int : pointer(given, assertion, 'referring-expression') / p(1.0),
%	int : pre(Int, belief(Ref, attrib(H, S), fv(identity, PolarProp))) / p(1.0),
%	int : post(Int, belief(Ref, shared(S, H), fv(identity, PolarProp))) / p(1.0).
%
%%understand : assertion_effect(S, H, Int, Ref, Polarity, Nom) <-
%%	i : sort(Nom, 'm-location'),
%%	i : prop(Nom, Prop),
%%	polarprop(Prop, Polarity, PolarProp),
%%	int : pre(Int, belief(Ref, attrib(H, S), fv(location, PolarProp))) / p(1.0),
%%	int : post(Int, belief(Ref, shared(S, H), fv(location, PolarProp))) / p(1.0).
%
%%mod_location_sort('m-location').
%%mod_location_sort('m-whereto').
%%
%%understand : assertion_effect(S, H, Int, Ref, Polarity, Nom) <-
%%	i : sort(Nom, Sort),
%%		mod_location_sort(Sort),
%%	i : prop(Nom, context),
%%		i : feat_Proximity(Nom, 'm-proximal'),
%%	Prop = here,
%%	polarprop(Prop, Polarity, PolarProp),
%%	int : pre(Int, belief(Ref, attrib(H, S), fv(location, PolarProp))) / p(1.0),
%%	int : post(Int, belief(Ref, shared(S, H), fv(location, PolarProp))) / p(1.0).
%
%% cornflakes
%understand : assertion_effect(S, H, Int, Ref, Polarity, Nom) <-
%	i : sort(Nom, _Sort),
%	i : prop(Nom, Prop),
%	Prop = cornflakes,
%	polarprop(Prop, Polarity, PolarProp),
%	int : pre(Int, belief(Ref, attrib(H, S), fv(material, PolarProp))) / p(1.0),
%	int : post(Int, belief(Ref, shared(S, H), fv(material, PolarProp))) / p(1.0).

%- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

try_scope_modifier(_S, _H, _Int, _Ref, _Polarity, Nom) <-
	has_no_scope_modifier(Nom) / p(0.5).

try_scope_modifier(S, H, Int, Ref, Polarity, Nom) <-
	i : rel_Modifier(Nom, ModNom),
	understand : assertion_effect(S, H, Int, Ref, Polarity, ModNom).

%- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

try_scope_compound(_S, _H, _Int, _Ref, _Polarity, Nom) <-
	has_no_scope_compound(Nom) / p(0.5).

try_scope_compound(S, H, Int, Ref, Polarity, Nom) <-
	i : rel_Compound(Nom, ModNom),
	understand : assertion_effect(S, H, Int, Ref, Polarity, ModNom).

%-------------------------------------------------------------------------
% QUESTIONS
%-------------------------------------------------------------------------

polar_query_prop(Nom, color, PropValue) <-
	i : sort(Nom, 'q-color'),
	i : prop(Nom, PropValue).

polar_query_prop(Nom, shape, PropValue) <-
	i : sort(Nom, 'q-shape'),
	i : prop(Nom, PropValue).

polar_query_prop(Nom, size, PropValue) <-
	i : sort(Nom, 'q-size'),
	i : prop(Nom, PropValue).

polar_query_prop(Nom, objecttype, PropValue) <-
	i : sort(Nom, thing),
	i : prop(Nom, PropValue),
	i : feat_Delimitation(Nom, existential),
	i : feat_Num(Nom, sg),
	i : feat_Quantification(Nom, specific).

polar_query_prop(Nom, identity, PropValue) <-
	i : sort(Nom, 'e-place'),
	i : prop(Nom, PropValue).

%-------------------------------------------------------------------------

wh_query_prop(Nom, color) <-
	i : sort(Nom, 'q-color').

wh_query_prop(Nom, color) <-
%	i : sort(Nom, quality),
	i : prop(Nom, color).

wh_query_prop(Nom, shape) <-
	i : sort(Nom, 'q-shape').

wh_query_prop(Nom, shape) <-
%	i : sort(Nom, quality),
	i : prop(Nom, shape).

wh_query_prop(Nom, size) <-
	i : sort(Nom, 'q-size').

wh_query_prop(Nom, size) <-
%	i : sort(Nom, quality),
	i : prop(Nom, size).

wh_query_prop(Nom, objecttype) <-
	i : sort(Nom, thing),
%	i : prop(Nom, PropValue),
%	i : feat_Delimitation(Nom, existential),
	i : feat_Num(Nom, sg),
	i : feat_Quantification(Nom, specific).

%-------------------------------------------------------------------------

polarity(Nom, Polarity) <-
	i : feat_Polarity(Nom, Polarity).

polarity(Nom, pos) <-
	polarity_positive(Nom) / p(0.5).

%-------------------------------------------------------------------------

polarprop(Prop, pos, Prop).
polarprop(Prop, neg, not(Prop)).

%-------------------------------------------------------------------------
