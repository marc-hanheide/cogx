README -- Dialogue API v6.0 (June 2010)

== INTRODUCTION == 

The Dialogue API v6.0 provides functionality for situated dialogue processing. The API is based 
on previous versions of the "comsys" API. The current API makes a strict separation between 
API-functionality, and CAST- and domain-specific functionality. 

For CAST components we have defined a separate API, [ de.dfki.lt.tr.cast.dialogue.* ]. This API defines 
components for ASR (language- and salience-models, speech recognition), parsing (incremental parsers, 
parse-selection), 

For domain-specific functionality, we have defined a collection of resources in a separate package 
[ de.dfki.lt.tr.cogx ]. These resources contain e.g. a sub-package "dialogue" for dialogue-specific 
resources like referential reading factories. 


== JAVA API PACKAGES ==

The Java API includes the following packages: 
 
* asr: 	word lattice construction, data handling, word activation networks for context-sensitive ASR  

* parse: interfaces and classes for defining (typically incremental) parsing processes 
> parseselection: sub of parse, for training and using models for parse selection
> examplegeneration: sub of parse, for generating examples to train statistical models on

* ref: classes for the construction of readings, references, and saliency models, saliency scorers

* slice: classes autogenerated from the SLICE data structure specifications

* util: exceptions, utilities for constructing and querying LFs, packed LFs, weighted CFGs  


== SLICE DEFINITIONS == 

A significant number of data structures used in the API are defined using Slice: 

* lf.ice: defines the data structures for logical forms, and packed logical forms

* dialogue.ice: defines the data structures that (typically) appear on a working memory


== INSTALLATION == 

The Dialogue API is typically part of a larger distribution.  

The entire distribution can be compiled by issuing [ ant ] or [ ant
compile ] in the root directory of the distribution. 

Documentation for the distribution can be generated (JavaDoc) by
issuing [ ant doc ] in the root directory of the distribution. The
generated documentation is stored in the [ doc ] subdirectory of the
root of each API.

Several APIs included in this distribution define unit tests. These
unit tests can all be run by issuing [ ant test ] in the root
directory of the distribution. Alternatively, the unit tests for a
specific API can be run by issuing [ ant test ] in the root directory
of that particular API. Documentation of the unit test results is
always generated, and stored in the [ reports/html ] subdirectory
under the root directory of each API.

== DOCUMENTATION == 

API code documentation generated with [ ant doc ] is stored in the [
doc ] subdirectory of each API.

Unit test documentation is automatically generated when running [ ant
test ] and is stored in the [ reports/html ] subdirectory of each API.

== PLATFORMS ==

The APIs have been compiled and tested with Java 1.6 on OS.X 10.5.8. 

== DEPENDENCIES == 

* OpenCCG: a complete, slightly altered version of CCG is provided as source 
* JUnit 4: provided as JAR under lib/
* JDOM: provided as JAR under lib/ (required for OpenCCG)
* Jline: provided as JAR under lib/ (required for OpenCCG) 
* Trove: provided as JAR under lib/ (required for OpenCCG)

== CONTRIBUTORS == 

Geert-Jan M. Kruijff / gj@dfki.de
Pierre Lison / pierre.lison@dfki.de

(and many others, over the years)
