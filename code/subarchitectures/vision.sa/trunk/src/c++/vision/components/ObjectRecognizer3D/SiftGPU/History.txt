0.5.320
	Fixed a bug (Wrong texture size may be assigned when image size changes)
	Fixed a bug (Descriptor storage size may be not updated when image size changes)
0.5.319
	Fixed a bug (Setkeypoint before specifying image was not working in previous versoins)
0.5.318
	Changed interface to process keypoints WITHOUT known orientations
	Added interface to specifiy float image data
	Overloaded new operator of SiftGPU and SiftMatchGPU to fix a possible heap corruption on deallocation
0.5.317
	Fixed a bug in processing user-specified keypoints
	Updated the .def file for the released package
0.5.316
	Fixed a bug of insufficient buffer allocation in very rare cases. (Thanks to Zheng)
	Added guided SIFT putative matching using homography or/and fundamental matrix
	Added function to change the feature number limitation for sift matching
0.5.315
	Added a cg-based sift matching implementation (Thanks to Zach)(see SimpleSIFT.cpp for example).
	Added optional output of the extremum type (maximum or minimum) of feature
	Added function to compute descriptors for user-specified keypoints
	Included xcode project and makefile(Thanks to Perfanov and Wittenhagen)
0.5.313
	Finished the GLSL implementation of SIFT (use -glsl to turn it on).
	Fixed a bug of crashing after many iterations on newer graphic card like GTX 280. (Thanks to Zheng)
0.5.312
	Fixed a bug introduced in V311(One texture size not updated for image size chaning with -pack)
	Fixed a bug introduced in V311(feature readback function is empty for -pack). (Thanks to Palomo)
0.5.311
	Fixed a bug in descriptor computation (it may cause error in descriptors of 10% of features)
	Implemented a packed SIFT implementation (use -pack to use it. 3x pyramid construction speed)
	Used GPU/CPU mixed list generation (2X compared with old method)
	Used only CPU for multi-orientation list generation (much faster than GPU)
	Changed parameter to avoid using dyamic array indexing by default.
	Implemented a new descriptor computation method(30% faster than the old one
	Evaluated the speed on GTX 280. (obtained 1.5x the speed of 8800 GTX)
	Dropped many unreferenced functions and also some old shaders.
	Changed some definition for better compiliation on Mac (Thanks to Wittenhagen)
	Changed SaveSIFT function to keep a little bit less fractional digits
	Combined the horizontal gradient and vertical gradient visualization to one.
0.5.302
	Updated cg, glew and glut libraries
	Added speed evaluation code 
	Added some debug code to write out floating point tiff images 
	Refactorized code a little bit, now it is having much less warnings 
0.5.293
	Changed gaussian weighting factor in orientation computation, now closer to Lowe's
	Minor bug fix on texture reallocation for too many features
	Added new feature to automatically down-sample images that are larger than user-defined size. 
0.5.288
	Added comparision with Lowe's SIFT on box.pgm(check /doc/evaluation for results)
	Fixed two bugs related to feature scale 
	Fixed a bug related to up-sampling
	Added a missing dog threshold test after subpixel localization. 
	Added new parameter for fixing the feature orientations
	Added export function to check how SiftGPU is supported by  current OpenGL context
	Changed some default parameter ( now it downloades result, and use verbose level 2 by default)
0.5.280
	Added an example of dyanmic loading of siftgpu library
	Fixed a serious bug of GetFeatureVector (orientation and scale are misordered previously)
	Fixed a bug in def file
	Fixed a bug in calling RunSIFT with pixel data. 
	Fixed some GLSL shader bugs
0.5.276
	Removed file "gs_types.h" and put the export definition in "siftgpu.h"
	Added high resolution timing for windows by using funciton timeGetTime
	Fixed some problems on arbfp1. Now it can run a limited demo again.
	Added parameter for changing the maximum allowed feature number of a level
0.5.267
	Corrected a neglected stricmp to _stricmp for linux compiliation
	Fixed a bug in function ResizePyramid which happens when image size changes in some way
	Added key input function to change verbose level for GUI mode
	
0.5.265
	Added display of fps information in console for sequential processing
	Added an optional step that converts RGB to Luminance before uploading to GPU
	Added a parameter "-p WxH" to specify the size for initializing the pyramids 
0.5.261
	Added a new feature for using existing memories for processing smaller images
	Added new functions to let user control the allocation pyramid momory
	Fixed a bug with sub-pixel localization 

0.5.256
	Added linux makefile 
	Added a new feature for allocating seperate processing memories for multiple images.
0.5.250 
	New keypoint detection code capable of sub-pixel/sub-scale localization
	Changed code for easy Linux porting. Thank Martin Schneider for his help on this 
	Changed some default values of the parameters. 
	Improved SIFT visualization. 
0.5.236 
	Fixed an important bug in orientation computation 
	Successfully tested on many image matching experiments 
	Changed the command line -m to default 2 orientations 
0.5.232 
	Fixed a sift output bug 
	Fixed a NaN bug in descriptor generation
	Fixed a bug that some images are flipped 
0.5.224          
	Fixed a memory leak bug on FBO 
	Added one more demo for processing 640*480 image sequence 
	Smalled change to interface, so that image data can be specified like OpenGL textures
0.5.220 
	Added more examples to manual. 
	Added more comments about the siftgpu interface 
	Added one more input interface 
	Fixed bug of crash on image size change 
0.5.208 
	First release