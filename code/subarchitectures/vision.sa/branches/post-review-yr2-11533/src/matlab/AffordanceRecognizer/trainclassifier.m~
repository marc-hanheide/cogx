loadtrainingdata;

TrainingIndices = [];
for iTrainingClass = 1:length(Data.AllowedTrainingClassIndices)
    TrainingIndices = [TrainingIndices find(Data.ClassLabels(Data.AllowedTrainingClassIndices(iTrainingClass),:))];
end

Classifier = BiModalLearner('name', 'SOM to HeurFORLVQ, Hellinger Distance',...    
                            'type', 'bimodal',...
                            'data', Data,...
                            'trainingindices', TrainingIndices,...
                            'epochs', 4,...
                            'normalization', 'training',...
                            'normalization_method', 'range',... % var, range, log, logistic, histD, histC, eval
                            'modality_types', {'codebook', 'codebook'},...
                            'codebook_sizes', {[4 4], [4 4]},...
                            'codebook_neighs', {'bubble', 'bubble'},...
                            'codebook_lattices', {'rect', 'rect'},...
                            'codebook_init_method', {'mean', 'mean'},... % rand, sample, mean
                            'phase_shifts', {{0.5}, {NaN}},...
                            'updaters', {{'SOM', 'HeurFORLVQ'}, {'SOM'}},...
                            'alpha_types', {{'linear', 'constant'}, {'linear'}},...
                            'alpha_inits', {{1, 0.1}, {1}},...
                            'radius_types', {{'linear', 'linear'}, {'linear'}},...
                            'radius_inits', {{5, 1}, {5, 1}},...
                            'radius_fins', {{1, 1}, {1}},...
                            'window_sizes', {{NaN, 0.1}, {NaN}},...
                            'alpha_feature_types', {{NaN, 'constant'}, {NaN}},...
                            'alpha_feature_inits', {{NaN, 0.3}, {NaN}},...
                            'auxdist_type', 'hellinger',...
                            'feature_selection', 'lda_hard',...
                            'feature_selection_max', 1,...
                            'feature_selection_feedback', true,...
                            'metric', {'sumsquared', 'sumsquared'},...
                            'classification_method', 'node');
                        
Classifier.TrainingData = Classifier.randomize(Classifier.TrainingData);

Classifier = Classifier.train();