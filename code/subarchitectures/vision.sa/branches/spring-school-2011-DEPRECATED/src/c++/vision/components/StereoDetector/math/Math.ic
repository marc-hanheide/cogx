/**
 * @file Math.ic
 * @author Richtsfeld Andreas, Michael Zillich
 * @date 2004, 2010, 2011
 * @version 0.2
 * @brief Math functions for vs3, CEdge, stereo calculations, ...
 * 
 * TODO Doxygen description
 **/

#include <stdlib.h>
#include <math.h>
#include <cstdio>

// namespace Z
// {

// using namespace std;

static const double eps = 1e-12;
static const double pi = M_PI;
static const double two_pi = 2*M_PI;

/*
  unsigned int grayencode(unsigned int g)
  {
    return(g^g>>1);
  }
  unsigned int graydecode(unsigned int b)
  {
    b^=b>>1; b^=b>>2; b^=b>>4; b^=b>>8; return(b^(b>>16));
  }
*/
// gray code conversion table for 4 bit numbers
static const unsigned gray[16] = {
  0x0,  // 0000
  0x1,  // 0001
  0x3,  // 0011
  0x2,  // 0010
  0x6,  // 0110
  0x7,  // 0111
  0x5,  // 0101
  0x4,  // 0100
  0xc,  // 1100
  0xd,  // 1101
  0xf,  // 1111
  0xe,  // 1110
  0xa,  // 1010
  0xb,  // 1011
  0x9,  // 1001
  0x8   // 1000
};


// table of log factorial
static const int FACT_TABSIZE = 10000;
static double log_fact_t[FACT_TABSIZE];
static double fact_t[FACT_TABSIZE];


/**
 * Init factorial and log factorial table.
 */
inline void InitLogFactTab()
{
  log_fact_t[0] = 0;  // 0! = 1
  for(int i = 1; i < FACT_TABSIZE; i++)
    log_fact_t[i] = log_fact_t[i-1] + log((double)i);
  fact_t[0] = 1;  // 0! = 1
  for(int i = 1; i < FACT_TABSIZE; i++)
    fact_t[i] = fact_t[i-1]*(double)i;
}

inline void InitMath()
{
  InitLogFactTab();
  srand(2407771);
}

inline unsigned HammingDistance(unsigned a, unsigned b)
{
  a = a^b;
  b = 0;
  for(unsigned i = 0; i < 32; i++)
    b += (a >> i) & 0x1;
  return b;
}

/**
 * Clip line to rectangle (0,0)-(xmin, xmax) (including xmin and xmax).
 * Returns true if at least part of the line is inside, false if line is
 * completely outside.
 */
inline bool ClipLine(int xmax, int ymax, int *x1, int *y1, int *x2, int *y2)
{
  int xmin = 0, ymin = 0;
  // left
  if(*x1 >= xmin)    // don't clip point 1
  {
    if(*x2 < xmin)   // clip point 2
    {
      *y2 = *y2 + ((xmin - *x2)*(*y1 - *y2))/(*x1 - *x2);
      *x2 = xmin;
    }
  }
  else   // clip point 1
  {
    if(*x2 >= xmin)
    {
      *y1 = *y1 + ((xmin - *x1)*(*y2 - *y1))/(*x2 - *x1);
      *x1 = xmin;
    }
    else // both points are out of region
    {
      return false;
    }
  }
  // right
  if(*x1 <= xmax)    // don't clip point 1
  {
    if(*x2 > xmax)   // clip point 2
    {
      *y2 = *y2 - ((*x2 - xmax)*(*y2 - *y1))/(*x2 - *x1);
      *x2 = xmax;
    }
  }
  else   // clip point 1
  {
    if(*x2 <= xmax)
    {
      *y1 = *y1 - ((*x1 - xmax)*(*y1 - *y2))/(*x1 - *x2);
      *x1 = xmax;
    }
    else // both points are out of region
    {
      return false;
    }
  }
  // top
  if(*y1 >= ymin)    // don't clip point 1
  {
    if(*y2 < ymin)   // clip point 2
    {
      *x2 = *x2 + ((ymin - *y2)*(*x1 - *x2))/(*y1 - *y2);
      *y2 = ymin;
    }
  }
  else   // clip point 1
  {
    if(*y2 >= ymin)
    {
      *x1 = *x1 + ((ymin - *y1)*(*x2 - *x1))/(*y2 - *y1);
      *y1 = ymin;
    }
    else // both points are out of region
    {
      return false;
    }
  }
  // bottom
  if(*y1 <= ymax)    // don't clip point 1
  {
    if(*y2 > ymax)   // clip point 2
    {
      *x2 = *x2 - ((*y2 - ymax)*(*x2 - *x1))/(*y2 - *y1);
      *y2 = ymax;
    }
  }
  else   // clip point 1
  {
    if(*y2 <= ymax)
    {
      *x1 = *x1 - ((*y1 - ymax)*(*x1 - *x2))/(*y1 - *y2);
      *y1 = ymax;
    }
    else // both points are out of region
    {
      return false;
    }
  }
  return true;
}

/**
 * Clip line to rectangle (xmin,ymin)-(xmax, xmax) (including xmin and xmax).
 * Returns true if at least part of the line is inside, false if line is
 * completely outside.
 */
inline bool ClipLine(int xmin, int ymin, int xmax, int ymax, double *x1, double *y1, double *x2, double *y2)
{
  // left
  if(*x1 >= xmin)    // don't clip point 1
  {
    if(*x2 < xmin)   // clip point 2
    {
      *y2 = *y2 + ((xmin - *x2)*(*y1 - *y2))/(*x1 - *x2);
      *x2 = xmin;
    }
  }
  else   // clip point 1
  {
    if(*x2 >= xmin)
    {
      *y1 = *y1 + ((xmin - *x1)*(*y2 - *y1))/(*x2 - *x1);
      *x1 = xmin;
    }
    else // both points are out of region
    {
      return false;
    }
  }
  // right
  if(*x1 <= xmax)    // don't clip point 1
  {
    if(*x2 > xmax)   // clip point 2
    {
      *y2 = *y2 - ((*x2 - xmax)*(*y2 - *y1))/(*x2 - *x1);
      *x2 = xmax;
    }
  }
  else   // clip point 1
  {
    if(*x2 <= xmax)
    {
      *y1 = *y1 - ((*x1 - xmax)*(*y1 - *y2))/(*x1 - *x2);
      *x1 = xmax;
    }
    else // both points are out of region
    {
      return false;
    }
  }
  // top
  if(*y1 >= ymin)    // don't clip point 1
  {
    if(*y2 < ymin)   // clip point 2
    {
      *x2 = *x2 + ((ymin - *y2)*(*x1 - *x2))/(*y1 - *y2);
      *y2 = ymin;
    }
  }
  else   // clip point 1
  {
    if(*y2 >= ymin)
    {
      *x1 = *x1 + ((ymin - *y1)*(*x2 - *x1))/(*y2 - *y1);
      *y1 = ymin;
    }
    else // both points are out of region
    {
      return false;
    }
  }
  // bottom
  if(*y1 <= ymax)    // don't clip point 1
  {
    if(*y2 > ymax)   // clip point 2
    {
      *x2 = *x2 - ((*y2 - ymax)*(*x2 - *x1))/(*y2 - *y1);
      *y2 = ymax;
    }
  }
  else   // clip point 1
  {
    if(*y2 <= ymax)
    {
      *x1 = *x1 - ((*y1 - ymax)*(*x1 - *x2))/(*y1 - *y2);
      *y1 = ymax;
    }
    else // both points are out of region
    {
      return false;
    }
  }
  return true;
}


/**
 * Factorial of n (n!).
 */
inline double Fact(int n)
{
  if(n < 0 || n >= FACT_TABSIZE)
	{
		char buffer [100];
		sprintf(buffer, "Math: Fact: Invalid argument %d, valid range is 0..%d\n", n, FACT_TABSIZE-1);
    throw std::runtime_error(buffer);
	}
  return fact_t[n];
}

/**
 * Natural logarithm of factorial of n.
 *  log(n!)
 */
inline double LogFact(int n)
{
  if(n < 0 || n >= FACT_TABSIZE)
	{
		char buffer [100];
		sprintf(buffer, "Math: LogFact: Invalid argument %d, valid range is 0..%d\n", n, FACT_TABSIZE-1);
    throw std::runtime_error(buffer);
	}
  return log_fact_t[n];
}

/**
 * Natural logarithm of the binomial coefficient of n and k.
 *       n
 *  log( k )
 */
inline double LogBinCoef(int n, int k) throw(std::runtime_error)
{
  if(k < 0 || k > n)
	{
		char buffer [100];
		sprintf(buffer, "Math: LogBinCoef: k < 0 or k > n: n = %d, k = %d", n, k);
    throw std::runtime_error(buffer);
	}
  return LogFact(n) - LogFact(k) - LogFact(n - k);
}

/**
 * Natural logarithm of binomial distribution density function.
 *        l    
 * log[ ( k )*p^k*(1-p)^(l-k) ]
 * TODO: deprecated
 */
inline double LogBinDist(int l, int k, double p)
{
  return LogBinCoef(l, k) + (double)k*log(p) + (double)(l - k)*log(1. - p);
}

/**
 * Natural logarithm of binomial distribution density function.
 *        l    
 * log[ ( k )*p^k*(1-p)^(l-k) ]
 */
inline double LogBinomialPDF(int l, int k, double p)
{
  return LogBinCoef(l, k) + (double)k*log(p) + (double)(l - k)*log(1. - p);
}

inline double BinomialPDF(int l, int k, double p)
{
  return exp(LogBinomialPDF(l, k, p));
}

/**
 * Natural logarithm of binomial cumulative distribution function.
 *    k        l    
 * Sum  log[ ( k )*p^k*(1-p)^(l-k) ]
 *   i=0
 */
inline double LogBinomialCDF(int l, int k, double p)
{
  return log(BinomialCDF(l, k, p));
}

inline double BinomialCDF(int l, int k, double p)
{
  double res = 0.;
  for(; k >= 0; k--)
    res += BinomialPDF(l, k, p);
  return res;
}

inline double LogBinomialCDF_tail(int l, int k, double p)
{
  return log(BinomialCDF_tail(l, k, p));
}


extern "C" {							/// TODO TODO TODO 
extern float betai(float a, float b, float x);
}


inline double BinomialCDF_tail(int l, int k, double p)
{
  return betai(k, l - k + 1, (float)p);
}

/**
 * Significance that exactly k points support an m-parametric model of size l,
 * where an arbitrary point has probability p of lying on the model.
 */
inline double Significance(int m, int k, int l, double p)
{
  try
  {
    // note: actually the correct probability (that at least k points support)
    // would be
    // P(k>=l) = Sum(BinDist(l,i,p)) for i = k..l
    // but for small p BinDist() falls off so quickly, that the later parts
    // do barely matter.
    return LogBinCoef(k, m) - LogBinDist(l, k, p);
  }
  catch(...)
  {
    return 0.;
  }
}

/**
 * Subtract the `struct timeval' values x - y.
 * Return 1 if the difference is negative, otherwise 0.
 * see http://www.delorie.com/gnu/docs/glibc/libc_428.html
 */
inline int timeval_subtract(struct timeval *result, struct timeval *x,
  struct timeval *y)
{
  // Perform the carry for the later subtraction by updating y.
  if(x->tv_usec < y->tv_usec)
  {
    int nsec = (y->tv_usec - x->tv_usec) / 1000000 + 1;
    y->tv_usec -= 1000000 * nsec;
    y->tv_sec += nsec;
  }
  if(x->tv_usec - y->tv_usec > 1000000)
  {
    int nsec = (x->tv_usec - y->tv_usec) / 1000000;
    y->tv_usec += 1000000 * nsec;
    y->tv_sec -= nsec;
  }
  // now tv_usec is certainly positive
  result->tv_sec = x->tv_sec - y->tv_sec;
  result->tv_usec = x->tv_usec - y->tv_usec;
  return x->tv_sec < y->tv_sec;
}

/**
 * Returns timespecs x - y as double.
 */
inline double timespec_diff(struct timespec *x, struct timespec *y)
{
  /*timespec res = {x->tv_sec - y->tv_sec, x->tv_nsec - y->tv_nsec};
  if(res.tv_nsec >= 1000000000)
  {
    res.tv_nsec -= 1000000000;
    res.tv_sec++;
  }
  if(res.tv_nsec < 0)
  {
    res.tv_nsec += 1000000000;
    res.tv_sec--;
  }
  return (double)res.tv_sec + 1e-9*(double)res.tv_nsec;*/
  /* TODO: make the above clearer version handle nsec overflows of more than one
   * sec, see below*/
  if(x->tv_nsec < y->tv_nsec)
  {
    int nsec = (y->tv_nsec - x->tv_nsec) / 1000000000 + 1;
    y->tv_nsec -= 1000000000 * nsec;
    y->tv_sec += nsec;
  }
  if(x->tv_nsec - y->tv_nsec > 1000000000)
  {
    int nsec = (x->tv_nsec - y->tv_nsec) / 1000000000;
    y->tv_nsec += 1000000000 * nsec;
    y->tv_sec -= nsec;
  }
  return (double)(x->tv_sec - y->tv_sec) +
    (double)(x->tv_nsec - y->tv_nsec)/1000000000.;
}

/**
 * Poisson probability distribution function.
 * f: i -> exp^-alpha * alpha^i / i!
 */
inline double PoissonPDF(int i, double alpha)
{
  if(i < 0)
    return 0.;
  else
    return exp(-alpha)*pow(alpha, (double)i)/Fact(i);
}

/**
 * Poisson cumulative distribution function.
 * f: k -> Sum( exp^-alpha * alpha^i / i! )  i=0..k
 */
inline double PoissonCDF(int k, double alpha)
{
  if(k < 0)
    return 0.;
  else
  {
    int i;
    double p = 0., pa = 1., fi = 1;
    for(i = 0; i <= k; i++)
    {
      p += pa/fi;
      pa *= alpha;
      fi *= (double)(i+1);
    }
    return exp(-alpha)*p;
  }
}


inline int RandInt()
{
  return rand();
}

/**
 * @brief Returns true if the value is near zero (+/- epsilon)
 * Our epsion is 1e-12
 */
inline bool IsZero(double d)
{
  return fabs(d) < eps;
}

/**
 * @brief Returns true if the values are equal (+/- epsilon)
 * Our epsion is 1e-12
 */
inline bool IsEqual(double a, double b)
{
  return fabs(a - b) < eps;
}

/**												/// TODO HACK ARI: islessequal funktioniert nicht mehr!
 * @brief Return whether value is a 'reasonable' number
 */
inline bool IsReasonable(double d)
{
  if(d > -1e9 && d < 1e9) return true;
  else return false;

//   return islessequal(-1e9, d) && islessequal(d, 1e9);
}

template <class Num>
inline Num Sqr(Num x)
{
  return x*x;
}

template <class Num>
inline Num Max(Num a, Num b)
{
  return (a >= b ? a : b);
}

template <class Num>
inline Num Min(Num a, Num b)
{
  return (a <= b ? a : b);
}

template <class Num>
inline int Sign(Num x)
{
  if(x < (Num)0)
    return -1;
  else if(x > (Num)0)
    return 1;
  else
    return 0;
}

template <class T>
inline void Swap(T &a, T &b)
{
  T t = a;
  a = b;
  b = t;
}

template <class Num>
inline bool Between(Num x, Num l, Num u)
{
  return l < x && x < u;
}

template <class Num>
inline bool BetweenEq(Num x, Num l, Num u)
{
  return l <= x && x <= u;
}

/**
 * @brief Scale angle to [0..2pi[
 */
inline double ScaleAngle_0_2pi(double a)
{
  while(a >= two_pi) a -= two_pi;
  while(a < 0.) a += two_pi;
  return a;
}

/**
 * @brief Scale angle to [-pi..pi[
 */
inline double ScaleAngle_mpi_pi(double a)
{
  while(a >= pi) a -= two_pi;
  while(a < -pi) a += two_pi;
  return a;
}

/**
 * @brief Scale angle to [0..pi[
 */
inline double ScaleAngle_0_pi(double a)
{
  while(a >= pi) a -= pi;
  while(a < 0.) a += pi;
  return a;
}

/**
 * @brief Difference of two angles b - a. The resulting angle is scaled to [-pi..pi[
 */
inline double DiffAngle_mpi_pi(double b, double a)
{
  return ScaleAngle_mpi_pi(b - a);
}

/**
 * @brief Difference of two angles b - a. The resulting angle is scaled to [0..2pi[
 */
inline double DiffAngle_0_2pi(double b, double a)
{
  return ScaleAngle_0_2pi(b - a);
}

/**
 * @brief Angles between (undirected) lines. The result is scaled to [0..pi/2[
 * The difference is always positive and the smaller of the two possible
 * differences is returned, i.e. diff is [0..pi/2[
 * Note that we never return a difference of 0 but rather the angular
 * resolution.
 */
inline double AngleBetweenLines(double b, double a)
{
  // note: lines are undirected, i.e. their orientation is [0..pi[
  double c = ScaleAngle_0_pi(b) - ScaleAngle_0_pi(a);
  if(c < 0)
    c = -c;
  if(c >=  M_PI_2)
     c = M_PI - c;
  if(IsZero(c))
     // HACK: atan(1/image_width) with image width = 640
     c = 0.0015625;
  return c;
}

/**
 * @brief Scale an integer angle to [0..8[
 */
inline int ScaleIntAngle_0_8(int a)
{
  while(a >= 8) a -= 8;
  while(a < 0) a += 8;
  return a;
}

/**
 * @brief Return the given binary number in gray code.
 * Note: only converts 4 bit numbers, i.e. 0 - 15
 */
inline unsigned BinaryToGray(unsigned b) throw(std::runtime_error)
{
  if(b > 15)
    throw std::runtime_error("Math.ic::BinaryToGray: accept only numbers 0 - 15");
  return gray[b];
}

inline int CityblockDistance(int x1, int y1, int x2, int y2)
{
  return abs(x2 - x1) + abs(y2 - y1);
}

/**
 * @brief V = 4 pi r^3 / 3
 */
inline double SphereVolume(double r)
{
  static double f = 4.*M_PI/3.;
  return f*pow(r, 3.);
}

/**
 * @brief A = pi r^2
 */
inline double CircleArea(double r)
{
  return M_PI*r*r;
}

/**
 * @brief Return squared distance between two keypoint descriptors.
 */
inline float DistSqr(float *desc1, float *desc2, unsigned size)
{
    register unsigned i;
    float dif;
    float distsq = 0;

    for (i = 0; i < size; i++) {
      dif = *desc1++ - *desc2++;
      distsq += dif * dif;
    }
    return distsq;
}

/**
 * @brief Bivariate Gaussian (Normal) probability density function.
 * Note that: sigma_x = sigma_y = s, rho = 0
 */
inline double BivariateGaussianPDF(double mx, double my, double s,
 double x, double y)
{
  x -= mx;
  y -= my;
  s *= s;
  return exp(-(x*x/s + y*y/s)/2.)/(2.*M_PI*s);
}

/**
 * @brief Returns a pseudo random number in [0.0, 1.0]
 */
inline float FRand()
{
  return RandInt()/((float)RAND_MAX + 1.);
}

inline float ExpPdf(float lambda)
{
  float dum;
  do
    dum = FRand();
  while (dum == 0.);
  return -log(dum)/lambda;
}


inline int ExpSelect(int max)
{
  int i;
  /* we want 99% probability of getting with expdev() a number smaller max
   * this requires a lambda of the exponential distribution:
   * lambda = -log(0.01)/max;    (-log(0.01) = 4.6) */
  float lambda = 4.6/(float)max;
  do
    i = (int)(ExpPdf(lambda));
  while(i > max);
  return i;
}

// }

