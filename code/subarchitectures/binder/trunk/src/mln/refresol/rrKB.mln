//predicate declarations
color(perc,col)
// resolved(perc)
percept(perc)
attribute(attr)
resolution(perc)

// temporary solution for the 'openworldness' of number of percepts
// the predicate percept makes sure that only the (non-unit) rules of perceived
// objects are grounded
// this keeps the size of the network managable even if the number of possible
// percepts (|perc|) is significantly larger than 3
perc={PH1,PH2,PH3,PH4,PH5,PH6}

// -1.87115  color(p,V_red)
-1.87115  color(a1,V_red) v !percept(a1)

// -1.87115  color(p,V_blue)
-1.87115  color(a1,V_blue) v !percept(a1)

// -1.87115  color(p,V_green)
-1.87115  color(a1,V_green) v !percept(a1)

// -1.87115  attribute(LRed)
-1.87115  attribute(LRed)

// -1.87115  attribute(LBlue)
-1.87115  attribute(LBlue)

// -1.87115  attribute(LGreen)
-1.87115  attribute(LGreen)

// 0       percept(p) ^ color(p,V_red) ^ attribute(LRed) => resolution(p)
1       !color(a1,V_red) v !attribute(LRed) v resolution(a1) v !percept(a1)

// 0       percept(p) ^ color(p,V_blue) ^ attribute(LRed) => resolution(p)
-2       !color(a1,V_blue) v !attribute(LRed) v resolution(a1) v !percept(a1)

// 0       percept(p) ^ color(p,V_green) ^ attribute(LRed) => resolution(p)
-2       !color(a1,V_green) v !attribute(LRed) v resolution(a1) v !percept(a1)

// 0       percept(p) ^ color(p,V_red) ^ attribute(LBlue) => resolution(p)
-2       !color(a1,V_red) v !attribute(LBlue) v resolution(a1) v !percept(a1)

// 0       percept(p) ^ color(p,V_blue) ^ attribute(LBlue) => resolution(p)
1       !color(a1,V_blue) v !attribute(LBlue) v resolution(a1) v !percept(a1)

// 0       percept(p) ^ color(p,V_green) ^ attribute(LBlue) => resolution(p)
-2       !color(a1,V_green) v !attribute(LBlue) v resolution(a1) v !percept(a1)

// 0       percept(p) ^ color(p,V_red) ^ attribute(LGreen) => resolution(p)
-2       !color(a1,V_red) v !attribute(LGreen) v resolution(a1) v !percept(a1)

// 0       percept(p) ^ color(p,V_blue) ^ attribute(LGreen) => resolution(p)
-2       !color(a1,V_blue) v !attribute(LGreen) v resolution(a1) v !percept(a1)

// 0       percept(p) ^ color(p,V_green) ^ attribute(LGreen) => resolution(p)
1       !color(a1,V_green) v !attribute(LGreen) v resolution(a1) v !percept(a1)

// 0       percept(p) ^ color(p,V_red) ^ attribute(LRed) => !resolution(p)
-1       !color(a1,V_red) v !attribute(LRed) v !resolution(a1) v !percept(a1)

// 0       percept(p) ^ color(p,V_blue) ^ attribute(LRed) => !resolution(p)
2       !color(a1,V_blue) v !attribute(LRed) v !resolution(a1) v !percept(a1)

// 0       percept(p) ^ color(p,V_green) ^ attribute(LRed) => !resolution(p)
2       !color(a1,V_green) v !attribute(LRed) v !resolution(a1) v !percept(a1)

// 0       percept(p) ^ color(p,V_red) ^ attribute(LBlue) => !resolution(p)
2       !color(a1,V_red) v !attribute(LBlue) v !resolution(a1) v !percept(a1)

// 0       percept(p) ^ color(p,V_blue) ^ attribute(LBlue) => !resolution(p)
-1       !color(a1,V_blue) v !attribute(LBlue) v !resolution(a1) v !percept(a1)

// 0       percept(p) ^ color(p,V_green) ^ attribute(LBlue) => !resolution(p)
2       !color(a1,V_green) v !attribute(LBlue) v !resolution(a1) v !percept(a1)

// 0       percept(p) ^ color(p,V_red) ^ attribute(LGreen) => !resolution(p)
2       !color(a1,V_red) v !attribute(LGreen) v !resolution(a1) v !percept(a1)

// 0       percept(p) ^ color(p,V_blue) ^ attribute(LGreen) => !resolution(p)
2       !color(a1,V_blue) v !attribute(LGreen) v !resolution(a1) v !percept(a1)

// 0       percept(p) ^ color(p,V_green) ^ attribute(LGreen) => !resolution(p)
-1       !color(a1,V_green) v !attribute(LGreen) v !resolution(a1) v !percept(a1)

// -5.61346  color(a1,a2)
-5.61346  color(a1,a2)

// -5.61346  attribute(a1)
-5.61346  attribute(a1)

// -7.23121  resolution(a1)
//-7.23121  resolution(a1)

// -7.23121  percept(a1)
-7.23121  percept(a1)

// -7.23121  resolved(a1)
//-7.23121  resolved(a1)

