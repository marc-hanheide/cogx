// =================================================================                                                        
// Copyright (C) 2010-2012 Pierre Lison (plison@dfki.de)                                                                
//                                                                                                                          
// This library is free software; you can redistribute it and/or                                                            
// modify it under the terms of the GNU Lesser General Public License                                                       
// as published by the Free Software Foundation; either version 2.1 of                                                      
// the License, or (at your option) any later version.                                                                      
//                                                                                                                          
// This library is distributed in the hope that it will be useful, but                                                      
// WITHOUT ANY WARRANTY; without even the implied warranty of                                                               
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU                                                         
// Lesser General Public License for more details.                                                                          
//                                                                                                                          
// You should have received a copy of the GNU Lesser General Public                                                         
// License along with this program; if not, write to the Free Software                                                      
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA                                                                
// 02111-1307, USA.                                                                                                         
// =================================================================                                                        
 
 
/**
 *
 * Markov Logic Network for temporal tracking
 *
 * @author Pierre Lison (plison@dfki.de)
 * @version 11/04/2010
 * @started 06/04/2010
 */


///////////////////////////////
// CONSTANTS 
///////////////////////////////

// beliefs
pastbelief = {P1,P2}
currentbelief = {C}
belief = {P1,P2,C}

// possible outcomes of the tracking process
outcome = {M1,M2,Single}

// feature values
positionval = {Kitchen,Office1,Office2,Corridor,Unknown,None}


///////////////////////////////
// PREDICATES  
///////////////////////////////

Existence(belief)
Position(belief,positionval)

Outcome(outcome)
Match(pastbelief)


///////////////////////////////
// PAST BELIEFS
///////////////////////////////

2.1972245773362196 Existence(P1)
-0.39304258810960718 Existence(P1) ^ Position(P1,Kitchen)
-2.0024805005437076 Existence(P1) ^ Position(P1,Office1)
-2.4079456086518722 Existence(P1) ^ Position(P1,Unknown)
Existence(P1) => !Position(P1,Office2).
Existence(P1) => !Position(P1,Corridor).
Existence(P1) => !Position(P1,None).


1.3862943611198906 Existence(P2)
-0.38566248081198462 Existence(P2) ^ Position(P2,Corridor)
-2.120263536200091 Existence(P2) ^ Position(P2,Unknown)
Existence(P2) => !Position(P2,Kitchen).
Existence(P2) => !Position(P2,Office1).
Existence(P2) => !Position(P2,Office2).
Existence(P2) => !Position(P2,None).


///////////////////////////////
// CURRENT BELIEF
///////////////////////////////


1.7346010553881064 Existence(C)
-0.26787944515560119 Existence(C) ^ Position(C,Kitchen)
-3.158251203051766 Existence(C) ^ Position(C,Corridor)
-3.158251203051766 Existence(C) ^ Position(C,Unknown)
Existence(C) => !Position(C,Office1).
Existence(C) => !Position(C,Office2).
Existence(C) => !Position(C,None).



///////////////////////////////
// FEATURE VALUE CONSTRAINTS
///////////////////////////////

// rules for existence dependency
!Existence(x) => y=None v !Position(x,y).
!Existence(x) => Position(x,None).

// mutual exclusivity and unicity constraints
Position(x,y) ^ Position(x,z) => y=z.
EXIST y Position(x,y).

///////////////////////////////
// CORRELATIONS
///////////////////////////////

// general correlations
1 Existence(x) ^ Existence(C) ^ (EXIST y Position(x,y) ^ Position(C,y)) => Match(x)


// at least one correlation must hold
Match(x) => EXIST y Position(x,y) ^ Position(C,y).
Match(x) => Existence(x) ^ Existence(C).


///////////////////////////////
// FINAL OUTCOME
///////////////////////////////


// specification of the different outcomes
-2 Existence(C) => Outcome(Single)
Match(P1) <=> Outcome(M1).
Match(P2) <=> Outcome(M2).


// mutual exclusivity and unicity
-1 Outcome(x)
Outcome(x) ^ Outcome(y) => x=y.
Exist x Outcome(x). 
