// Generated from displist.lua
const char luacode_displist_lua[] =
   "\n"
   "DispList = { context={}, dirty={} }\n"
   "\n"
   "function DispList:_getDispListTab(create)\n"
   "   create = create or false\n"
   "   local ctx = v11nGetOpenGlContext()\n"
   "   assert(ctx, \"No OpenGL context is active\")\n"
   "   local displist = self.context[ctx]\n"
   "   if displist==nil and create then\n"
   "      displist = {}\n"
   "      self.context[ctx] = displist\n"
   "   end\n"
   "   return displist\n"
   "end\n"
   "\n"
   "\n"
   "\n"
   "\n"
   "\n"
   "\n"
   "\n"
   "\n"
   "\n"
   "\n"
   "\n"
   "\n"
   "function DispList:newList(name)\n"
   "   local displist = self:_getDispListTab(true)\n"
   "   local id = displist[name]\n"
   "   if not id then\n"
   "      id = glGenLists(1)\n"
   "      assert(id~=0, \"glGenLists failed\")\n"
   "      displist[name] = id\n"
   "   end\n"
   "\n"
   "\n"
   "   glNewList(id, GL_COMPILE)\n"
   "   assert(glIsList(id)==GL_TRUE, \"glNewList failed\")\n"
   "end\n"
   "\n"
   "function DispList:endList()\n"
   "  glEndList()\n"
   "end\n"
   "\n"
   "function DispList:delete(name)\n"
   "   local displist = self:_getDispListTab(false)\n"
   "   if not displist then return end\n"
   "   local id = displist[name]\n"
   "   if not id then return end\n"
   "   displist[id] = nil\n"
   "   if not glIsList(id) then return end\n"
   "   glDeleteLists(id, 1)\n"
   "end\n"
   "\n"
   "function DispList:exists(name)\n"
   "   local displist = self:_getDispListTab(false)\n"
   "   if not displist then return false end\n"
   "   local id = displist[name]\n"
   "   if not id then return false end\n"
   "   if not glIsList(id) then return false end\n"
   "   return true\n"
   "end\n"
   "\n"
   "function DispList:draw(name)\n"
   "   local displist = self:_getDispListTab(false)\n"
   "   assert(displist, \"No lists have been defined in this context\")\n"
   "   local id = displist[name]\n"
   "   assert(id, \"DispList named '\" .. name .. \"' not found\")\n"
   "   glCallList(id)\n"
   "end\n"
   "\n"
   "function DispList:setDirty(name)\n"
   "   self.dirty[name] = true\n"
   "end\n"
   "\n"
   "function DispList:getDirty(names)\n"
   "   local displist = self:_getDispListTab(false)\n"
   "   local dirt = self.dirty\n"
   "   if next(dirt) ~= nil then -- not empty, clear for next round\n"
   "      self.dirty = {}\n"
   "   end\n"
   "   if displist == nil then\n"
   "      for _,n in pairs(names) do\n"
   "         dirt[n] = true\n"
   "      end\n"
   "   else\n"
   "      for _,n in pairs(names) do\n"
   "         if not displist[n] then\n"
   "            dirt[n] = true\n"
   "         end\n"
   "      end\n"
   "   end\n"
   "   return dirt\n"
   "end\n"
   ; // luacode_displist_lua

// Generated from models.lua
const char luacode_models_lua[] =
   "\n"
   "StdModel = {}\n"
   "\n"
   "function StdModel:box(sx, sy, sz)\n"
   "   sx = sx*0.5\n"
   "   sy = sy*0.5\n"
   "   sz = sz*0.5\n"
   "\n"
   "   for i=1,2 do\n"
   "      if i == 1 then a = 1.0\n"
   "      else a = -1.0 end\n"
   "\n"
   "\n"
   "      glBegin(GL_QUADS)\n"
   "      glNormal(0.0, 0.0,     a)\n"
   "      glVertex(-sx, -sy,  sz*a)\n"
   "      glVertex( sx, -sy,  sz*a)\n"
   "      glVertex( sx,  sy,  sz*a)\n"
   "      glVertex(-sx,  sy,  sz*a)\n"
   "      glEnd()\n"
   "\n"
   "\n"
   "      glBegin(GL_QUADS)\n"
   "      glNormal(0.0,    a, 0.0)\n"
   "      glVertex(-sx, sy*a,  sz)\n"
   "      glVertex(-sx, sy*a, -sz)\n"
   "      glVertex( sx, sy*a, -sz)\n"
   "      glVertex( sx, sy*a,  sz)\n"
   "      glEnd()\n"
   "\n"
   "\n"
   "      glBegin(GL_QUADS)\n"
   "      glNormal(   a, 0.0, 0.0)\n"
   "      glVertex(sx*a, -sy,  sz)\n"
   "      glVertex(sx*a, -sy, -sz)\n"
   "      glVertex(sx*a,  sy, -sz)\n"
   "      glVertex(sx*a,  sy,  sz)\n"
   "      glEnd()\n"
   "   end\n"
   "end\n"
   "\n"
   "function StdModel:sincos(np)\n"
   "   local tsin = {}\n"
   "   local tcos = {}\n"
   "   local dan = 2*math.pi / np\n"
   "   local an = 0.5*dan\n"
   "   for i=1,np do\n"
   "      tsin[i] = math.sin(an+dan*(i-1))\n"
   "      tcos[i] = math.cos(an+dan*(i-1))\n"
   "   end\n"
   "   return tsin, tcos\n"
   "end\n"
   "\n"
   "function StdModel:ellipse(rx, ry, np)\n"
   "   if np < 3 then np = 3 end\n"
   "   local dan = 2*math.pi / np\n"
   "   local an = 0.5*dan\n"
   "   glBegin(GL_TRIANGLES)\n"
   "   for i=1,np do\n"
   "      glVertex(0.0, 0.0, 0.0)\n"
   "      glVertex(math.cos(an+dan*(i-1)), math.sin(an+dan*(i-1)), 0.0)\n"
   "      glVertex(math.cos(an+dan*(i)), math.sin(an+dan*(i)), 0.0)\n"
   "   end\n"
   "   glEnd()\n"
   "end\n"
   "\n"
   "function StdModel:cylinder(rx, ry, sz, np)\n"
   "   if np < 3 then np = 3 end\n"
   "   local tsin, tcos\n"
   "   local k, i, ni\n"
   "   tsin, tcos = self:sincos(np)\n"
   "   for i=1,#tcos do tcos[i] = rx*tcos[i] end\n"
   "   for i=1,#tsin do tsin[i] = ry*tsin[i] end\n"
   "   sz = sz*0.5\n"
   "   glNormal(0.0, 0.0, 1.0)\n"
   "   glBegin(GL_TRIANGLES)\n"
   "   for i=1,np do\n"
   "      glVertex(0.0, 0.0, sz)\n"
   "      glVertex(tcos[i], tsin[i], sz)\n"
   "      ni = i % np + 1\n"
   "      glVertex(tcos[ni], tsin[ni], sz)\n"
   "   end\n"
   "   glEnd()\n"
   "   glNormal(0.0, 0.0, -1.0)\n"
   "   glBegin(GL_TRIANGLES)\n"
   "   for i=1,np do\n"
   "      glVertex(0.0, 0.0, -sz)\n"
   "      glVertex(tcos[i], tsin[i], -sz)\n"
   "      ni = i % np + 1\n"
   "      glVertex(tcos[ni], tsin[ni], -sz)\n"
   "   end\n"
   "   glEnd()\n"
   "   glBegin(GL_QUADS)\n"
   "   for i=1,np do\n"
   "      ni = i % np + 1\n"
   "      glNormal(tcos[i], tsin[i], 0.0)\n"
   "      glVertex(tcos[i], tsin[i], sz)\n"
   "      glVertex(tcos[i], tsin[i], -sz)\n"
   "      glVertex(tcos[ni], tsin[ni], -sz)\n"
   "      glVertex(tcos[ni], tsin[ni], sz)\n"
   "   end\n"
   "   glEnd()\n"
   "end\n"
   "\n"
   "\n"
   "function StdModel:xfloor(x)\n"
   "   size = 5\n"
   "   sy = size\n"
   "   sz = size\n"
   "   glBegin(GL_QUADS)\n"
   "   glColor(0.7, 0.7, 0.7)\n"
   "   glNormal(1.0, 0.0, 0.0)\n"
   "   glVertex(x, -sy,  sz)\n"
   "   glVertex(x, -sy, -sz)\n"
   "   glVertex(x,  sy, -sz)\n"
   "   glVertex(x,  sy,  sz)\n"
   "   glEnd()\n"
   "   glBegin(GL_LINES)\n"
   "   glLineWidth(4.0)\n"
   "   glColor(1.0, 1.0, 1.0)\n"
   "   for i=-size,size do\n"
   "      glVertex(x, i,  size)\n"
   "      glVertex(x, i, -size)\n"
   "      glVertex(x,  size, i)\n"
   "      glVertex(x, -size, i)\n"
   "   end\n"
   "   glLineWidth(1.0)\n"
   "   glEnd()\n"
   "end\n"
   "function StdModel:zfloor(z)\n"
   "   size = 5\n"
   "   sx = size\n"
   "   sy = size\n"
   "   glBegin(GL_QUADS)\n"
   "   glColor(0.7, 0.7, 0.7)\n"
   "   glNormal(0.0, 0.0, 1.0)\n"
   "   glVertex(-sx, sy,  z)\n"
   "   glVertex(-sx, -sy, z)\n"
   "   glVertex( sx, -sy, z)\n"
   "   glVertex( sx, sy,  z)\n"
   "   glEnd()\n"
   "   glBegin(GL_LINES)\n"
   "   glLineWidth(4.0)\n"
   "   glColor(1.0, 1.0, 1.0)\n"
   "   for i=-size,size do\n"
   "      glVertex(i,  size, z)\n"
   "      glVertex(i, -size, z)\n"
   "      glVertex( size, i, z)\n"
   "      glVertex(-size, i, z)\n"
   "   end\n"
   "   glLineWidth(1.0)\n"
   "   glEnd()\n"
   "end\n"
   ; // luacode_models_lua

// Generated from camera.lua
const char luacode_camera_lua[] =
   "\n"
   "\n"
   "\n"
   "\n"
   "function setCamera(name, xEye, yEye, zEye, xView, yView, zView, xUp, yUp, zUp)\n"
   "   v11nCamera_SetPosition(_v11n_script_object_, name, xEye, yEye, zEye, xView, yView, zView, xUp, yUp, zUp)\n"
   "end\n"
   ; // luacode_camera_lua

// Generated from glwriter.lua
const char luacode_glwriter_lua[] =
   "\n"
   "\n"
   "\n"
   "function showLabel(x, y, z, text, size)\n"
   "   v11nGlw_RenderText(_v11n_glw_interface_, x, y, z, text, size)\n"
   "end\n"
   ; // luacode_glwriter_lua

