<!-- Top level make file for CogX system -->
<project name="cogx" default="all">
	<property name="projectroot.dir" value="${basedir}" />
	<property file="build.properties" />

	<!-- =================================================================== -->
	<!-- Init build system                                                   -->
	<!-- =================================================================== -->
	<target name="init" description="compiles the source code">
	</target>

	<!-- =================================================================== -->
	<!-- Calls compile                                                       -->
	<!-- =================================================================== -->
	<target name="all" depends="compile" description="compiles the source code">
	</target>

	<!-- =================================================================== -->
	<!-- conditions taken from build.properties (cmake generated)            -->
	<!-- =================================================================== -->
	<condition property="build.binding_sa">
		<equals arg1="${build_sa_binding}" arg2="ON" />
	</condition>
	<condition property="build.motivation_sa">
		<equals arg1="${build_sa_motivation}" arg2="ON" />
	</condition>
	<condition property="build.spatial_sa">
		<equals arg1="${build_sa_spatial}" arg2="ON" />
	</condition>
	<condition property="build.planner_sa">
		<equals arg1="${build_sa_planner}" arg2="ON" />
	</condition>
	<condition property="build.vision_sa">
		<equals arg1="${build_sa_vision}" arg2="ON" />
	</condition>
	<condition property="build.coma_sa">
		<equals arg1="${build_sa_coma}" arg2="ON" />
	</condition>

	<!-- =================================================================== -->
	<!-- the dirset of all sub directories (conditionally)                   -->
	<!-- =================================================================== -->
	<dirset id="subdirs" dir="${basedir}">
		<include name="tools/castutils" />
		<include name="tools/beliefs" />
		<include name="tools/cogxutils" />
		<include name="tools/hardware/video" />
		<include name="tools/hardware/blobfinder" />
		<include name="subarchitectures/binder" if="build.binding_sa" />
		<include name="subarchitectures/spatial.sa" if="build.spatial_sa" />
		<include name="subarchitectures/vision.sa" if="build.vision_sa" />
		<include name="subarchitectures/motivation.sa" if="build.motivation_sa" />
		<include name="subarchitectures/planner.sa" if="build.planner_sa" />
		<include name="subarchitectures/coma.sa" if="build.coma_sa" />
	</dirset>


	<!-- =========================================
	     Template target.  Never called explicitly, 
	     only used to pass calls to underlying 
	     children modules. 
	     ========================================= -->
	<target name="template" depends="init">
		<echo>Executing &quot;${target}&quot; target for tools/cast module...</echo>
		<subant target="${target}">
			<dirset refid="subdirs" />
		</subant>
	</target>


	<!-- =================================================================== -->
	<!-- Cleans all subdirs                                                  -->
	<!-- =================================================================== -->
	<target name="clean" depends="init">
		<echo>Cleaning all builds"</echo>
		<delete dir="output/classes" />
		<antcall target="template">
			<param name="target" value="clean" />
		</antcall>
	</target>

	<!-- =================================================================== -->
	<!-- Generates source from slice in all subdirs                          -->
	<!-- =================================================================== -->
	<target name="slice" depends="init">
		<echo>doing slice2java for all builds"</echo>
		<antcall target="template">
			<param name="target" value="slice" />
		</antcall>
	</target>

	<!-- =================================================================== -->
	<!-- Compiles all autogenerated classes                                  -->
	<!-- =================================================================== -->
	<target name="compile-slice" depends="slice">
		<echo>compiling all builds"</echo>
		<antcall target="template">
			<param name="target" value="compile-slice" />
		</antcall>
	</target>

	<!-- =================================================================== -->
	<!-- Compiles all subdirs                                                -->
	<!-- =================================================================== -->
	<target name="compile" depends="compile-slice">
		<echo>compiling all builds"</echo>
		<antcall target="template">
			<param name="target" value="compile" />
		</antcall>
	</target>

</project>
