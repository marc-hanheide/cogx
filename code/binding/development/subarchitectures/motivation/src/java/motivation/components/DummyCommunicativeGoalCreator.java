/**
 * 
 */
package motivation.components;

import java.util.Arrays;
import java.util.Properties;

import motivation.components.abstr.AbstractActionResponder;
import motivation.idl.AcknowledgeMotive;
import motivation.idl.GainAttentionMotive;
import motivation.idl.MotiveAcknowledgement;
import motivation.idl.AnswerSet;
import motivation.util.CompetenceRegistration;
import motivation.util.MotivationUtils;
import BindingData.BindingProxy;
import BindingFeatures.AreaID;
import BindingFeatures.Colour;
import BindingFeatures.Concept;
import BindingFeatures.RelationLabel;
import BindingFeatures.Shape;
import BindingFeaturesCommon.TemporalFrameType;
import cast.architecture.subarchitecture.AlreadyExistsOnWMException;
import cast.architecture.subarchitecture.ConsistencyException;
import cast.architecture.subarchitecture.DoesNotExistOnWMException;
import cast.architecture.subarchitecture.SubarchitectureProcessException;
import cast.cdl.TriBool;
import cast.cdl.WorkingMemoryPointer;
import cast.core.CASTUtils;

/**
 * 
 * A dummy component to show how to handle actions generated by the planner that
 * could be used for things.
 * 
 * @author nah
 * 
 */
public class DummyCommunicativeGoalCreator extends AbstractActionResponder {

	private boolean m_offerColour = false;
	private boolean m_offerAreaID = false;
	private boolean m_offerAssertedPosition = false;

	/**
	 * @param _id
	 */
	public DummyCommunicativeGoalCreator(String _id) {
		super(_id);
	}

	@Override
	public void configure(Properties _config) {
		super.configure(_config);

		if (_config.containsKey("--colour")) {
			m_offerColour = true;
		}
		if (_config.containsKey("--area-id")) {
			m_offerAreaID = true;
		}
		if (_config.containsKey("--asserted-position")) {
			m_offerAssertedPosition = true;
		}

	}

	@Override
	protected void runComponent() {
		// let the world know we're capable dealing with these things
		try {
			if (m_offerColour) {
				CompetenceRegistration.registerFeatureGenerationCompetence(
						this, Colour.class);
			}
			if (m_offerAreaID) {
				CompetenceRegistration.registerFeatureGenerationCompetence(
						this, AreaID.class);
			}
			if (m_offerAssertedPosition) {
				CompetenceRegistration.registerFeatureGenerationCompetence(
						this, "position", TemporalFrameType.ASSERTED);
			}
		}
		catch (AlreadyExistsOnWMException e) {
			e.printStackTrace();
		}
		catch (SubarchitectureProcessException e) {
			e.printStackTrace();
		}
	}

	@Override
	protected void acknowledgeMotive(String _actionID, AcknowledgeMotive _ack)
			throws SubarchitectureProcessException {
		if (_ack.m_ack == MotiveAcknowledgement.MOTIVE_ACK_ACCEPTED) {
			println("The last motive from " + getSubarchitectureID()
					+ " was accepted.");
		}
		else if (_ack.m_ack == MotiveAcknowledgement.MOTIVE_ACK_REJECTED) {
			println("The last motive from " + getSubarchitectureID()
					+ " was rejected.");
		}
		else if (_ack.m_ack == MotiveAcknowledgement.MOTIVE_ACK_ALREADY_HOLDS) {
			println("The last motive from " + getSubarchitectureID()
					+ " was already the case.");
		}

		String causes = "The motive involved these motive.sa proxies: ";
		for (WorkingMemoryPointer _source : _ack.m_motiveCause) {
			// these are all proxies
			assert (_source.m_type.equals(CASTUtils
					.typeName(BindingProxy.class)));
			causes += CASTUtils.toString(_source.m_address) + " ";
		}
		println(causes);

		println("Motive is of type: "
				+ MotivationUtils.toString(_ack.m_motiveType));

		// now tell the planner we've acknowledged successfully, note that this
		// doesn't have to be called in this method. It shouuld be called once
		// the acknowledgement is done, i.e. after something has been said
		responseComplete(_actionID, TriBool.triTrue);
	}

	@Override
	protected void factualQuery(String _actionID, String _proxyID,
			Class<?> _queryClass, String _fromSA)
			throws SubarchitectureProcessException {

		println("hello dear user, what " + _queryClass.getName() + " is the "
				+ _proxyID + "?");

		// now tell the planner we've asked unsuccessfully, note that this
		// doesn't have to be called in this method. It shouuld be called once
		// the query has been generated and the answer process resulting in new
		// data on binding wm
		responseComplete(_actionID, TriBool.triFalse);
	}

	@Override
	protected void gainAttentionMotive(String _actionID,
			GainAttentionMotive _attMotive)
			throws SubarchitectureProcessException {
		// now tell the planner we've coughed successfully, note that this
		// doesn't have to be called in this method. It shouuld be called once
		// the query has been generated and the answer process resulting in new
		// data on binding wm
		responseComplete(_actionID, TriBool.triTrue);
	}

	@Override
	protected <FeatureT> void factualAssertion(String _actionID,
			String _proxyID, FeatureT _feature)
			throws SubarchitectureProcessException {

		if(_feature.getClass().equals(Colour.class)) {
			println("yo,  what's up my man, the colour of " +  _proxyID + " is " + ((Colour)_feature).m_colour);
		}
		else if(_feature.getClass().equals(Shape.class)) {
			println("yo,  what's up my man, the shape of " +  _proxyID + " is " + ((Shape)_feature).m_shape);
		}
		else if(_feature.getClass().equals(Concept.class)) {
			println("yo,  what's up my man, " +  _proxyID + " is the " + ((Concept)_feature).m_concept);
		}
		else {
			println("yo,  what's up my man, " +  _proxyID + " has feature" + _feature);			
		}
		// now tell the planner we've asked unsuccessfully, note that this
		// doesn't have to be called in this method. It shouuld be called once
		// the query has been generated and the answer process resulting in new
		// data on binding wm
		responseComplete(_actionID, TriBool.triTrue);
	}

	@Override
	protected void factualRelationQuery(String _actionID, String _proxyID, RelationLabel _relationLabel, String _fromSA) throws SubarchitectureProcessException {
		String relation = _relationLabel.m_label;
		
		println("yeah,  me again, what's the " +  relation + " of the " + _proxyID);

		// now tell the planner we've asked unsuccessfully, note that this
		// doesn't have to be called in this method. It shouuld be called once
		// the query has been generated and the answer process resulting in new
		// data on binding wm
		responseComplete(_actionID, TriBool.triFalse);

	}

	@Override
	protected void answerSet(String _actionID, AnswerSet _as)
		throws SubarchitectureProcessException
	{
		println("i've just eaten " + _as.m_answerSet.length + " answers");
		try {
			responseComplete(_actionID, TriBool.triTrue);
		}
		catch (SubarchitectureProcessException e) {
			e.printStackTrace();
		}
	}
	
	
	
}
