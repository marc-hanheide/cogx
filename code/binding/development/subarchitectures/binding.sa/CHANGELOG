/*!
\page binding_chlog CHANGELOG for binding subarch

\section release0 release 0

adapted binding to release8 of cast

separated idl files to remove some dependencies and make things more
managable (this means that binding feature are not in BindingData.idl
any more etc)

all binding features now have a \p BindingFeaturesCommon::ParentFeature... to mimic some form of
inheritence. see e.g. \p BindingFeaturesCommon::Concept

A lot of paths and package name may have changed as a
consequence... look among the idl files to locate what's missing.

Removed a LOT of dependencies

Created testing component and testing scripts.

Separation of ontologies. One for features separately. the
BindingFeatureOntology contains a lot more information about the
features now. The type_info is used to map types to properties (see
TypeMap). This should be much faster both runtim and compilation
time.

Simplified the singleton pattern implementation for the ontologies. 

\section release1 release 1

adapted to release9 of cast (with a local hack to fix a typename bug
though)

Changed the interface for features. All feature specialization code is
now found unde feature-specialication. All added features now need at
least a FeatureHelper. All features are registered by the
FeatureRegistrant in feature-specialization directory. (registered to
BindingFeatureOntology)

The internal comparators are also registered by the FeatureRegistrant
(registered to BindingFeatureOntology). Only Concept and Salience
features have comparators at the moment, though... the old code is
still used for other things and is all marked clearly as
UGLY... target is to remove all UGLY stuff.

\section release2 release 2
removed all 'binding.autogen' prefixes in the autogenerated java code.
* binding.autogen.BindingData -> BindingData
* binding.autogen.BindingData.Feature -> BindingFeatures  (from release1)
* occasionally binding.autogen.BindingFeature BindingFeaturesCommon (from release1)

removed a bunch of deprecated binding features. They are clearly
marked in BindingFeatures.idl. Some of them may be reintroduced if it
turns out they are needed.

All binding features are now implemented with FeatureHelpers and
InternalFeaturComparators. All the code for features is found under
subarchitectures/binding.sa/src/c++/binding/feature-specialization
Please look at the examples.


\section release3 release 3

moved things in output/include so that the directories in the source
code are exactly mimicked. This, could mean that include statements in
code outside the binding.sa dir may have to be changed
accordingly. Look at output/include/binding/* to locate header files.

Added AreaID and associated helper and comparator.

fixed a bug in include statements that where only visible outside
binder

\section release4 release 4

removed a bug that meant that negated features were never negated when
created in C++ monitors.

implemented a more careful binding strategy. Now only one union is
created at a time. It seems to be quite efficient still. This
eliminated bug 10.

\section release5 release 5

Changed all global change filters to local. All monitors etc must
write to the binding WM anyway.

A lot more testing, more proxies and a lot of deletions. Also testing
distributing the tests across two subarchtecturess (one for binding,
one for the tester monitor).

Fixed CASTDataLocalCache so it also can handle WM entries in other
subarchitectures (a CAST change, rather than binding). (also made som
minor optimizations in cast and balt)

Added a class that helps loading graphs of proxies and/or unions (see
\p Binding::BindingGraphHandler and \p Binding::AbstractExtractor and
its derived classes).

Added a set of predicates that can be used to test the properties of
loaded proxies and unions (see BindingData::AbstractPredicate and
derived classes. Also look at \p Binding::LocalDataSets and derived
classes and set operators)

Added a \pBinding::GarbageCollector that deletes proxies and other
data related to deleted BindingProxies. It stores all deletion tasks
on a queue, and only start deleting when the binder is stable.

The \p Binding::GarbageCollector is also by default running in a
strict "Binding::GarbageCollector::PoliceMode", causing the execution
to abort with some info if illegal WM operations are spotted.

Added a LOT of testing of comsys monitors

\remark
The best place to look for examples of how to use the \p BindingGraphHandler and the predicate etc. is in the source code of \link TesterMonitor.cpp \endlink

\section release6 release 6

renamed m_featuresEquivalent to m_match in
\p BindingData::FeatureComparison

Added Binding::ComaTester to test using coma as an external comparator
for BindingFeatures::Concept. It seems to work still after all
refactoring.

\section release7 release 7

Added \p BindingData::BindingProxy::m_proxyIDs and \p
BindingData::BindingProxy::m_sourceID to make it easier to see what
your proxy is bound to without loading the union etc.

Added retesting in the \p Binding::TesterMonitor. Now the test of the
postcondition (\p Binding::TesterMonitor::testCompleteness()) will be
repeated 10 times (with some delay between) just to make sure the
binder is not corrupting the bindings after test is passed.

Changed the silly name \p DisambiguationIdentifier into \p
Binding::AmbiguityIdentifier and reintroduced it into all test-cast
files. It also successfully identifies the ambiguities.

Fixed a number of small bugs due to things being deleted on WM while
binder is operating. A lot of times, the TesterMoitor was more to
blame since it was not testing exactly what I intended.

added \p BindingQueries::BasicQuery ... still needs to be tested
together with external comparator, though. And could be tested a lot
in all existing tests too.

\section release8 release 8

Added the convenient \p BindingData::TriggerDotViewer so that you can
choose when to get a dotgraph

Tested \p BindingQueries::BasicQuery (with external comparator in
coMa) and added \p BindingQueries::AdvancedQuery which also is tested
with coma. The external comparisons are more complicated since the
binder is not allowed to be locked while waiting for the results. But
now that all seems to work. 

Added \p Binding::QueryUtils to assist in querying (still needs an
implementation in Java, though)

\see \ref how_to_query_the_binder

\remark there is some odd corba exception being thrown now and then. But it is very tricky to figure out from where and when. Be patient with this. I need to focus on other bugs right now.

\section release8_2 release 8.2 

coma's external comparator of \p BindingFeatures::AreaID vs. \p BindingFeatures::AreaID

bug 91 fixed...

etc... issues remains... corba exceptions, for example

Documentation of: \ref how_to_add_features

\section release9 release 9

Removed all references to the cast ontology. Also removed all
ontologies and ontology factories except \p
Binding::BindingFeatureOntology which has a bunch of important
functionalities.

Added \p Binding::AbstractMonitor::binderReady(). Very
important. Read docs of associated stuff...

Made \p Binding::AbstractMonitor inherit from \p
Binding::AbstractBinder. Makes more sense. But since the \p
Binding::AbstractBindingWMRepresenter and related classes contain a
lot more functionality than on the Jacva side, I must avoid cheating
by using that functionality too much in order to keep the C++ code as
similar to Java as possible.

disabled \p Binding::CopyCatBindingMonitor

Added \p BindingData::BinderToken and \p BindingData::MonitorToken to
simplify synchronization between monitors and binder. The \p
Binding::BindingScorer currently releases the token to quickly, which
causes a number of tests to fail on faster machines (e.g. test
20). This will be fixed in some later release.

Changed the \p Binding::AbstractMonitor::storeCurrentProxy() such that
it will call \p bindNewProxies() if one of the proxies in \p
Binding::AbstractMonitor::m_unboundProxyAddresses is being updated.

\section release9_2 release 9.2

fixed https://bugzilla.cs.bham.ac.uk/show_bug.cgi?id=120 using \p
Binding::AbstractPredicate::clone() which calls \p
Binding::clone_predicate(). see file \link TesterMonitor.cpp \endlink
test case 1 for example of usage.

Added more token to synchronize monitors w.r.t. each other and w.r.t
the binder. A compilation option BINDING_DISABLE_TOKENS was added
since this feature is not entirely trusted yet.

\section release9_3 release 9.3

Added \p BindingQueries::MakeProxyUnavailable and \p
Binding::AbstractMonitor::makeProxyUnavailable() (in java: \p binding::abstr:AbstractMonitor::makeProxyUnavailable() )to handle the problem
of when to delete proxies (b.3 in this discussion: \ref
proxy_deletion_discussion)

\section release10 release 10

bugfixes bugfixes... (many thanks to Nick who took care of a quite
important bugs that he discovered)

More tests added.

Hopefully eliminated some of the false crashes at successExit

\section release10_1 release 10.1

fixed https://bugzilla.cs.bham.ac.uk/show_bug.cgi?id=128

added the utterances to the dotfiles in the \p Binding::ComsysTester
using the new \p BindingData::TriggerDotViewerWithTitle

\section release11 release 11

fixed more synchronization issues. Hopefully this takes care of some
of the bugs that have popped up in explorer

Also fixed some other bugs... not adding any new functionality now
unless someone needs it and is sure it really will be used.

The proxy inport updates will now be taken care of by the binding
components instead of the bstract monitors. This has some effects on
the motivation.sa since the inports will not be updated there.

added a script (thanks Ian!) that continuously translates a given
dotfile into png. (visualize_dot.sh) The DotViewer now also has a to
generate and overwrite a single file, e.g. '-visfile bla.dot' will
update the file bla.dot everytime the DotViewer gets triggered. The
other dotfiles will also be generated as usual. Then, runing 'feh -R 1
-F bla.dot.png' gives you a nice visualization on ubuntu machines at
least... (zoom in and out by pressing center mouse key and moving the
mouse horizontally)

\section release12 release 12

Some major bugfixes that caused the binder to freeze in the explorer
scenario (added BindingData::ProxyProcessingFinished to fix it)

New binding features added: \p BindingFeatures::PersonID and \p
BindingFeatures::AspectualState (and comparators etc)

various other, now forgotten, fixes implemented in the code camp
hysteria.

*/
