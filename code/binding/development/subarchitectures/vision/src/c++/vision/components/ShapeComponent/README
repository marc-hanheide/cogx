Some Instructions for running the shape component:
---------------------------------------------------
The component by default assumes there are four shapes under
consideration (Squared, Circular, Triangular, Rectangular). It also
assumes that a training file exists with 5 training samples
(hu-moments vectors) per shape, i.e. 4*5 = 20 samples in the training
sample file.

Basic operation: 
-----------------
A very simple attempt at designing a shape classifier, written
entirely in C++. For each input ROI, the contour forming the boundary
of the object within the ROI is used to determine the hu-moments
vector, which is matched with the set of stored samples to determine
the probability distribution of match probability over the shape
classes.


Available options:
-------------------
-s = number of shapes being considered.
-n = number of training samples per shape.

-e = threshold on probability, below which the shape class label of
"empty" is assigned. Default = 1/numClasses.

-u = threshold on ratio of probability of second-best match to
first-best match. If the second-best match is very close to the
first-best match, the class label of "unknown" is assigned.

-f = path of the file which has the previously trained samples for the
shapes under consideration. There are '-n' samples for each of the
'-s' shapes.

-t = path of the file to which the training samples can be written
during training. If this flag is used, each subsequent application of
the shape component will automatically append a shape moments vector
to the file.

