/*!
\page main_objectTracker Object Tracker Component

\section desc_objectTracker Description

\p ObjectTracker is a managed component.
Tracking is triggered by the addition of a \p Vision::ROI into
the visual working memory. ObjectTracker tracks and updates the 2D poses of 
the \p Vision::ROI  based on its color histogram.
The 3D poses of the \p Vision::SceneObject that is 
associated with the \p Vision::ROI are computed 
using the camera projection matrix obtained from
\p Vision::Camera. 
ObjectTracker also writes to working memory
\p Vision::AttendedObjectList,  a list of moving objects
that are actively tracked at each time frame.

\section conf_objectTracker Configuration

CPP GD <name> ObjectTracker [options]

Options: \n

-s <0 or 1> .. an option to use stereo vision to get 3D poses. 
   Stereo vision has not been fully tested. This is by default set to \b 0. \n
-c <config file> .. a config file contains a path to the file, \b objectlist.txt,
   that lists  a set of object models that are hand-coded into the tracker.
   The first line of  \b objectlist.txt is the number of object models,
   and the next line is a file pattern in C printf-style pattern of the model files.
   An object model file (e.g., object.000.mdl) contains the information
   about the object to be tracked, e.g., type (e.g., hand), shape (e.g., circle), 
   and shape parameters (e.g., r_min: minimum radius in pixels,
   r_max: maximum radius in pixels) and the patch file to compute
   the color histogram. \n
-d <0 or 1> .. an option to save the images with the bounding boxes of
   objects overlaid,
   default \b 0. \n
-t <num> .. the time inverval between two frames in ms, default \b 50. \n
-v <0 or 1> .. an option to display a tracking window. \n
--videoport <num> .. a specific port to communicate with the VideoServer.
    This must be the same port that was specified in VideoServer. \n
--videohost <hostname> .. the host computer that runs the VideoServer. \n

\section idl_objectTracker IDLs and Working Memory Items

\p Vision::ROI \n 
\p Vision::Camera \n
\p Vision::SceneObject \n
\p Vision::AttendedObjectList \n

\section op_objectTracker Working Memory Operations

Get(\p Vision::ROI) \n
Get(\p Vision::Camera) \n
\n
Overwrite(\p Vision::SceneObject) \n
\n
Add(\p Vision::AttendedObjectList) \n
\n
Delete(\p Vision::ROI) \n
Delete(\p Vision::SceneObject) \n

\section flt_objectTracker Working Memory Filters

Add(\p Vision::ROI)

\section msc_objecyTracker Dataflow

N/A

*/
