# Python stubs generated by omniidl from Planner.idl

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA

_omnipy.checkVersion(3,0, __file__)


#
# Start of module "Planner"
#
__name__ = "Planner"
_0_Planner = omniORB.openModule("Planner", r"Planner.idl")
_0_Planner__POA = omniORB.openModule("Planner__POA", r"Planner.idl")

_0_Planner.TRUE_STR = "true"
_0_Planner.FALSE_STR = "false"

# typedef ... TaskID
class TaskID:
    _NP_RepositoryId = "IDL:Planner/TaskID:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Planner.TaskID = TaskID
_0_Planner._d_TaskID  = (omniORB.tcInternal.tv_string,0)
_0_Planner._ad_TaskID = (omniORB.tcInternal.tv_alias, TaskID._NP_RepositoryId, "TaskID", (omniORB.tcInternal.tv_string,0))
_0_Planner._tc_TaskID = omniORB.tcInternal.createTypeCode(_0_Planner._ad_TaskID)
omniORB.registerType(TaskID._NP_RepositoryId, _0_Planner._ad_TaskID, _0_Planner._tc_TaskID)
del TaskID

# exception Failure
_0_Planner.Failure = omniORB.newEmptyClass()
class Failure (CORBA.UserException):
    _NP_RepositoryId = "IDL:Planner/Failure:1.0"

    def __init__(self, message):
        CORBA.UserException.__init__(self, message)
        self.message = message

_0_Planner.Failure = Failure
_0_Planner._d_Failure  = (omniORB.tcInternal.tv_except, Failure, Failure._NP_RepositoryId, "Failure", "message", (omniORB.tcInternal.tv_string,0))
_0_Planner._tc_Failure = omniORB.tcInternal.createTypeCode(_0_Planner._d_Failure)
omniORB.registerType(Failure._NP_RepositoryId, _0_Planner._d_Failure, _0_Planner._tc_Failure)
del Failure

# struct ObjectDeclaration
_0_Planner.ObjectDeclaration = omniORB.newEmptyClass()
class ObjectDeclaration (omniORB.StructBase):
    _NP_RepositoryId = "IDL:Planner/ObjectDeclaration:1.0"

    def __init__(self, name, type):
        self.name = name
        self.type = type

_0_Planner.ObjectDeclaration = ObjectDeclaration
_0_Planner._d_ObjectDeclaration  = (omniORB.tcInternal.tv_struct, ObjectDeclaration, ObjectDeclaration._NP_RepositoryId, "ObjectDeclaration", "name", (omniORB.tcInternal.tv_string,0), "type", (omniORB.tcInternal.tv_string,0))
_0_Planner._tc_ObjectDeclaration = omniORB.tcInternal.createTypeCode(_0_Planner._d_ObjectDeclaration)
omniORB.registerType(ObjectDeclaration._NP_RepositoryId, _0_Planner._d_ObjectDeclaration, _0_Planner._tc_ObjectDeclaration)
del ObjectDeclaration

# typedef ... ObjectList
class ObjectList:
    _NP_RepositoryId = "IDL:Planner/ObjectList:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Planner.ObjectList = ObjectList
_0_Planner._d_ObjectList  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:Planner/ObjectDeclaration:1.0"], 0)
_0_Planner._ad_ObjectList = (omniORB.tcInternal.tv_alias, ObjectList._NP_RepositoryId, "ObjectList", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:Planner/ObjectDeclaration:1.0"], 0))
_0_Planner._tc_ObjectList = omniORB.tcInternal.createTypeCode(_0_Planner._ad_ObjectList)
omniORB.registerType(ObjectList._NP_RepositoryId, _0_Planner._ad_ObjectList, _0_Planner._tc_ObjectList)
del ObjectList

# enum ModalityEnum
_0_Planner.NO_MODALITY = omniORB.EnumItem("NO_MODALITY", 0)
_0_Planner.K_MODALITY = omniORB.EnumItem("K_MODALITY", 1)
_0_Planner.ModalityEnum = omniORB.Enum("IDL:Planner/ModalityEnum:1.0", (_0_Planner.NO_MODALITY, _0_Planner.K_MODALITY,))

_0_Planner._d_ModalityEnum  = (omniORB.tcInternal.tv_enum, _0_Planner.ModalityEnum._NP_RepositoryId, "ModalityEnum", _0_Planner.ModalityEnum._items)
_0_Planner._tc_ModalityEnum = omniORB.tcInternal.createTypeCode(_0_Planner._d_ModalityEnum)
omniORB.registerType(_0_Planner.ModalityEnum._NP_RepositoryId, _0_Planner._d_ModalityEnum, _0_Planner._tc_ModalityEnum)

# struct Fact
_0_Planner.Fact = omniORB.newEmptyClass()
class Fact (omniORB.StructBase):
    _NP_RepositoryId = "IDL:Planner/Fact:1.0"

    def __init__(self, modality, agent, name, arguments, value):
        self.modality = modality
        self.agent = agent
        self.name = name
        self.arguments = arguments
        self.value = value

_0_Planner.Fact = Fact
_0_Planner._d_Fact  = (omniORB.tcInternal.tv_struct, Fact, Fact._NP_RepositoryId, "Fact", "modality", omniORB.typeMapping["IDL:Planner/ModalityEnum:1.0"], "agent", (omniORB.tcInternal.tv_string,0), "name", (omniORB.tcInternal.tv_string,0), "arguments", (omniORB.tcInternal.tv_sequence, (omniORB.tcInternal.tv_string,0), 0), "value", (omniORB.tcInternal.tv_string,0))
_0_Planner._tc_Fact = omniORB.tcInternal.createTypeCode(_0_Planner._d_Fact)
omniORB.registerType(Fact._NP_RepositoryId, _0_Planner._d_Fact, _0_Planner._tc_Fact)
del Fact

# typedef ... FactList
class FactList:
    _NP_RepositoryId = "IDL:Planner/FactList:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Planner.FactList = FactList
_0_Planner._d_FactList  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:Planner/Fact:1.0"], 0)
_0_Planner._ad_FactList = (omniORB.tcInternal.tv_alias, FactList._NP_RepositoryId, "FactList", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:Planner/Fact:1.0"], 0))
_0_Planner._tc_FactList = omniORB.tcInternal.createTypeCode(_0_Planner._ad_FactList)
omniORB.registerType(FactList._NP_RepositoryId, _0_Planner._ad_FactList, _0_Planner._tc_FactList)
del FactList

# typedef ... Goal
class Goal:
    _NP_RepositoryId = "IDL:Planner/Goal:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Planner.Goal = Goal
_0_Planner._d_Goal  = (omniORB.tcInternal.tv_string,0)
_0_Planner._ad_Goal = (omniORB.tcInternal.tv_alias, Goal._NP_RepositoryId, "Goal", (omniORB.tcInternal.tv_string,0))
_0_Planner._tc_Goal = omniORB.tcInternal.createTypeCode(_0_Planner._ad_Goal)
omniORB.registerType(Goal._NP_RepositoryId, _0_Planner._ad_Goal, _0_Planner._tc_Goal)
del Goal

# struct PlanningTask
_0_Planner.PlanningTask = omniORB.newEmptyClass()
class PlanningTask (omniORB.StructBase):
    _NP_RepositoryId = "IDL:Planner/PlanningTask:1.0"

    def __init__(self, task_id, planning_agent, objects, facts, goals, domain_name, domain_fn):
        self.task_id = task_id
        self.planning_agent = planning_agent
        self.objects = objects
        self.facts = facts
        self.goals = goals
        self.domain_name = domain_name
        self.domain_fn = domain_fn

_0_Planner.PlanningTask = PlanningTask
_0_Planner._d_PlanningTask  = (omniORB.tcInternal.tv_struct, PlanningTask, PlanningTask._NP_RepositoryId, "PlanningTask", "task_id", omniORB.typeMapping["IDL:Planner/TaskID:1.0"], "planning_agent", (omniORB.tcInternal.tv_string,0), "objects", omniORB.typeMapping["IDL:Planner/ObjectList:1.0"], "facts", omniORB.typeMapping["IDL:Planner/FactList:1.0"], "goals", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:Planner/Goal:1.0"], 0), "domain_name", (omniORB.tcInternal.tv_string,0), "domain_fn", (omniORB.tcInternal.tv_string,0))
_0_Planner._tc_PlanningTask = omniORB.tcInternal.createTypeCode(_0_Planner._d_PlanningTask)
omniORB.registerType(PlanningTask._NP_RepositoryId, _0_Planner._d_PlanningTask, _0_Planner._tc_PlanningTask)
del PlanningTask

# enum ExecutionState
_0_Planner.GOAL_ACHIEVED = omniORB.EnumItem("GOAL_ACHIEVED", 0)
_0_Planner.GOAL_ACHIEVABLE = omniORB.EnumItem("GOAL_ACHIEVABLE", 1)
_0_Planner.GOAL_UNACHIEVABLE = omniORB.EnumItem("GOAL_UNACHIEVABLE", 2)
_0_Planner.ExecutionState = omniORB.Enum("IDL:Planner/ExecutionState:1.0", (_0_Planner.GOAL_ACHIEVED, _0_Planner.GOAL_ACHIEVABLE, _0_Planner.GOAL_UNACHIEVABLE,))

_0_Planner._d_ExecutionState  = (omniORB.tcInternal.tv_enum, _0_Planner.ExecutionState._NP_RepositoryId, "ExecutionState", _0_Planner.ExecutionState._items)
_0_Planner._tc_ExecutionState = omniORB.tcInternal.createTypeCode(_0_Planner._d_ExecutionState)
omniORB.registerType(_0_Planner.ExecutionState._NP_RepositoryId, _0_Planner._d_ExecutionState, _0_Planner._tc_ExecutionState)

# enum PlanningState
_0_Planner.OLD_PLAN_KEPT = omniORB.EnumItem("OLD_PLAN_KEPT", 0)
_0_Planner.CHANGED_PLAN = omniORB.EnumItem("CHANGED_PLAN", 1)
_0_Planner.PlanningState = omniORB.Enum("IDL:Planner/PlanningState:1.0", (_0_Planner.OLD_PLAN_KEPT, _0_Planner.CHANGED_PLAN,))

_0_Planner._d_PlanningState  = (omniORB.tcInternal.tv_enum, _0_Planner.PlanningState._NP_RepositoryId, "PlanningState", _0_Planner.PlanningState._items)
_0_Planner._tc_PlanningState = omniORB.tcInternal.createTypeCode(_0_Planner._d_PlanningState)
omniORB.registerType(_0_Planner.PlanningState._NP_RepositoryId, _0_Planner._d_PlanningState, _0_Planner._tc_PlanningState)

# struct CCPInformation
_0_Planner.CCPInformation = omniORB.newEmptyClass()
class CCPInformation (omniORB.StructBase):
    _NP_RepositoryId = "IDL:Planner/CCPInformation:1.0"

    def __init__(self, description):
        self.description = description

_0_Planner.CCPInformation = CCPInformation
_0_Planner._d_CCPInformation  = (omniORB.tcInternal.tv_struct, CCPInformation, CCPInformation._NP_RepositoryId, "CCPInformation", "description", (omniORB.tcInternal.tv_string,0))
_0_Planner._tc_CCPInformation = omniORB.tcInternal.createTypeCode(_0_Planner._d_CCPInformation)
omniORB.registerType(CCPInformation._NP_RepositoryId, _0_Planner._d_CCPInformation, _0_Planner._tc_CCPInformation)
del CCPInformation

# struct CCPState
_0_Planner.CCPState = omniORB.newEmptyClass()
class CCPState (omniORB.StructBase):
    _NP_RepositoryId = "IDL:Planner/CCPState:1.0"

    def __init__(self, execution_state, planning_state, info):
        self.execution_state = execution_state
        self.planning_state = planning_state
        self.info = info

_0_Planner.CCPState = CCPState
_0_Planner._d_CCPState  = (omniORB.tcInternal.tv_struct, CCPState, CCPState._NP_RepositoryId, "CCPState", "execution_state", omniORB.typeMapping["IDL:Planner/ExecutionState:1.0"], "planning_state", omniORB.typeMapping["IDL:Planner/PlanningState:1.0"], "info", omniORB.typeMapping["IDL:Planner/CCPInformation:1.0"])
_0_Planner._tc_CCPState = omniORB.tcInternal.createTypeCode(_0_Planner._d_CCPState)
omniORB.registerType(CCPState._NP_RepositoryId, _0_Planner._d_CCPState, _0_Planner._tc_CCPState)
del CCPState

# struct GroundAction
_0_Planner.GroundAction = omniORB.newEmptyClass()
class GroundAction (omniORB.StructBase):
    _NP_RepositoryId = "IDL:Planner/GroundAction:1.0"

    def __init__(self, name, args):
        self.name = name
        self.args = args

_0_Planner.GroundAction = GroundAction
_0_Planner._d_GroundAction  = (omniORB.tcInternal.tv_struct, GroundAction, GroundAction._NP_RepositoryId, "GroundAction", "name", (omniORB.tcInternal.tv_string,0), "args", (omniORB.tcInternal.tv_sequence, (omniORB.tcInternal.tv_string,0), 0))
_0_Planner._tc_GroundAction = omniORB.tcInternal.createTypeCode(_0_Planner._d_GroundAction)
omniORB.registerType(GroundAction._NP_RepositoryId, _0_Planner._d_GroundAction, _0_Planner._tc_GroundAction)
del GroundAction

# typedef ... CommandType
class CommandType:
    _NP_RepositoryId = "IDL:Planner/CommandType:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Planner.CommandType = CommandType
_0_Planner._d_CommandType  = (omniORB.tcInternal.tv_string,0)
_0_Planner._ad_CommandType = (omniORB.tcInternal.tv_alias, CommandType._NP_RepositoryId, "CommandType", (omniORB.tcInternal.tv_string,0))
_0_Planner._tc_CommandType = omniORB.tcInternal.createTypeCode(_0_Planner._ad_CommandType)
omniORB.registerType(CommandType._NP_RepositoryId, _0_Planner._ad_CommandType, _0_Planner._tc_CommandType)
del CommandType

# struct Command
_0_Planner.Command = omniORB.newEmptyClass()
class Command (omniORB.StructBase):
    _NP_RepositoryId = "IDL:Planner/Command:1.0"

    def __init__(self, type, cmd_args, mapl_action, task_id):
        self.type = type
        self.cmd_args = cmd_args
        self.mapl_action = mapl_action
        self.task_id = task_id

_0_Planner.Command = Command
_0_Planner._d_Command  = (omniORB.tcInternal.tv_struct, Command, Command._NP_RepositoryId, "Command", "type", omniORB.typeMapping["IDL:Planner/CommandType:1.0"], "cmd_args", (omniORB.tcInternal.tv_sequence, (omniORB.tcInternal.tv_string,0), 0), "mapl_action", omniORB.typeMapping["IDL:Planner/GroundAction:1.0"], "task_id", omniORB.typeMapping["IDL:Planner/TaskID:1.0"])
_0_Planner._tc_Command = omniORB.tcInternal.createTypeCode(_0_Planner._d_Command)
omniORB.registerType(Command._NP_RepositoryId, _0_Planner._d_Command, _0_Planner._tc_Command)
del Command

# typedef ... CommandSeq
class CommandSeq:
    _NP_RepositoryId = "IDL:Planner/CommandSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Planner.CommandSeq = CommandSeq
_0_Planner._d_CommandSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:Planner/Command:1.0"], 0)
_0_Planner._ad_CommandSeq = (omniORB.tcInternal.tv_alias, CommandSeq._NP_RepositoryId, "CommandSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:Planner/Command:1.0"], 0))
_0_Planner._tc_CommandSeq = omniORB.tcInternal.createTypeCode(_0_Planner._ad_CommandSeq)
omniORB.registerType(CommandSeq._NP_RepositoryId, _0_Planner._ad_CommandSeq, _0_Planner._tc_CommandSeq)
del CommandSeq

# struct Edge
_0_Planner.Edge = omniORB.newEmptyClass()
class Edge (omniORB.StructBase):
    _NP_RepositoryId = "IDL:Planner/Edge:1.0"

    def __init__(self, predNode, succNode, reason):
        self.predNode = predNode
        self.succNode = succNode
        self.reason = reason

_0_Planner.Edge = Edge
_0_Planner._d_Edge  = (omniORB.tcInternal.tv_struct, Edge, Edge._NP_RepositoryId, "Edge", "predNode", omniORB.tcInternal.tv_ushort, "succNode", omniORB.tcInternal.tv_ushort, "reason", (omniORB.tcInternal.tv_string,0))
_0_Planner._tc_Edge = omniORB.tcInternal.createTypeCode(_0_Planner._d_Edge)
omniORB.registerType(Edge._NP_RepositoryId, _0_Planner._d_Edge, _0_Planner._tc_Edge)
del Edge

# struct SimplePOPlan
_0_Planner.SimplePOPlan = omniORB.newEmptyClass()
class SimplePOPlan (omniORB.StructBase):
    _NP_RepositoryId = "IDL:Planner/SimplePOPlan:1.0"

    def __init__(self, planID, nodes, edges):
        self.planID = planID
        self.nodes = nodes
        self.edges = edges

_0_Planner.SimplePOPlan = SimplePOPlan
_0_Planner._d_SimplePOPlan  = (omniORB.tcInternal.tv_struct, SimplePOPlan, SimplePOPlan._NP_RepositoryId, "SimplePOPlan", "planID", (omniORB.tcInternal.tv_string,0), "nodes", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:Planner/GroundAction:1.0"], 0), "edges", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:Planner/Edge:1.0"], 0))
_0_Planner._tc_SimplePOPlan = omniORB.tcInternal.createTypeCode(_0_Planner._d_SimplePOPlan)
omniORB.registerType(SimplePOPlan._NP_RepositoryId, _0_Planner._d_SimplePOPlan, _0_Planner._tc_SimplePOPlan)
del SimplePOPlan

# interface PlannerServer
_0_Planner._d_PlannerServer = (omniORB.tcInternal.tv_objref, "IDL:Planner/PlannerServer:1.0", "PlannerServer")
omniORB.typeMapping["IDL:Planner/PlannerServer:1.0"] = _0_Planner._d_PlannerServer
_0_Planner.PlannerServer = omniORB.newEmptyClass()
class PlannerServer :
    _NP_RepositoryId = _0_Planner._d_PlannerServer[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Planner.PlannerServer = PlannerServer
_0_Planner._tc_PlannerServer = omniORB.tcInternal.createTypeCode(_0_Planner._d_PlannerServer)
omniORB.registerType(PlannerServer._NP_RepositoryId, _0_Planner._d_PlannerServer, _0_Planner._tc_PlannerServer)

# PlannerServer operations and attributes
PlannerServer._d_new_task = ((omniORB.typeMapping["IDL:Planner/PlanningTask:1.0"], ), (omniORB.typeMapping["IDL:Planner/PlanningTask:1.0"], ), None)
PlannerServer._d_load_mapl_task = (((omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0)), (omniORB.typeMapping["IDL:Planner/PlanningTask:1.0"], ), None)
PlannerServer._d_change_task = ((omniORB.typeMapping["IDL:Planner/PlanningTask:1.0"], omniORB.tcInternal.tv_boolean), (), None)
PlannerServer._d_current_task_state = ((omniORB.typeMapping["IDL:Planner/TaskID:1.0"], ), (omniORB.typeMapping["IDL:Planner/PlanningTask:1.0"], ), None)
PlannerServer._d_continual_planning = ((omniORB.typeMapping["IDL:Planner/TaskID:1.0"], ), (omniORB.typeMapping["IDL:Planner/CCPState:1.0"], ), {_0_Planner.Failure._NP_RepositoryId: _0_Planner._d_Failure})
PlannerServer._d_next_executable_plan_steps = ((omniORB.typeMapping["IDL:Planner/TaskID:1.0"], ), (omniORB.typeMapping["IDL:Planner/CommandSeq:1.0"], ), None)
PlannerServer._d_expected_changes = ((omniORB.typeMapping["IDL:Planner/TaskID:1.0"], omniORB.typeMapping["IDL:Planner/Command:1.0"]), (omniORB.typeMapping["IDL:Planner/FactList:1.0"], ), None)
PlannerServer._d_command_was_executed = ((omniORB.typeMapping["IDL:Planner/TaskID:1.0"], omniORB.typeMapping["IDL:Planner/Command:1.0"], omniORB.tcInternal.tv_boolean), (), None)
PlannerServer._d_negative_sensing = ((omniORB.typeMapping["IDL:Planner/TaskID:1.0"], omniORB.typeMapping["IDL:Planner/GroundAction:1.0"]), (), None)
PlannerServer._d_self_test = ((), (), None)
PlannerServer._d_kill_me = ((), (), None)

# PlannerServer object reference
class _objref_PlannerServer (CORBA.Object):
    _NP_RepositoryId = PlannerServer._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def new_task(self, *args):
        return _omnipy.invoke(self, "new_task", _0_Planner.PlannerServer._d_new_task, args)

    def load_mapl_task(self, *args):
        return _omnipy.invoke(self, "load_mapl_task", _0_Planner.PlannerServer._d_load_mapl_task, args)

    def change_task(self, *args):
        return _omnipy.invoke(self, "change_task", _0_Planner.PlannerServer._d_change_task, args)

    def current_task_state(self, *args):
        return _omnipy.invoke(self, "current_task_state", _0_Planner.PlannerServer._d_current_task_state, args)

    def continual_planning(self, *args):
        return _omnipy.invoke(self, "continual_planning", _0_Planner.PlannerServer._d_continual_planning, args)

    def next_executable_plan_steps(self, *args):
        return _omnipy.invoke(self, "next_executable_plan_steps", _0_Planner.PlannerServer._d_next_executable_plan_steps, args)

    def expected_changes(self, *args):
        return _omnipy.invoke(self, "expected_changes", _0_Planner.PlannerServer._d_expected_changes, args)

    def command_was_executed(self, *args):
        return _omnipy.invoke(self, "command_was_executed", _0_Planner.PlannerServer._d_command_was_executed, args)

    def negative_sensing(self, *args):
        return _omnipy.invoke(self, "negative_sensing", _0_Planner.PlannerServer._d_negative_sensing, args)

    def self_test(self, *args):
        return _omnipy.invoke(self, "self_test", _0_Planner.PlannerServer._d_self_test, args)

    def kill_me(self, *args):
        return _omnipy.invoke(self, "kill_me", _0_Planner.PlannerServer._d_kill_me, args)

    __methods__ = ["new_task", "load_mapl_task", "change_task", "current_task_state", "continual_planning", "next_executable_plan_steps", "expected_changes", "command_was_executed", "negative_sensing", "self_test", "kill_me"] + CORBA.Object.__methods__

omniORB.registerObjref(PlannerServer._NP_RepositoryId, _objref_PlannerServer)
_0_Planner._objref_PlannerServer = _objref_PlannerServer
del PlannerServer, _objref_PlannerServer

# PlannerServer skeleton
__name__ = "Planner__POA"
class PlannerServer (PortableServer.Servant):
    _NP_RepositoryId = _0_Planner.PlannerServer._NP_RepositoryId


    _omni_op_d = {"new_task": _0_Planner.PlannerServer._d_new_task, "load_mapl_task": _0_Planner.PlannerServer._d_load_mapl_task, "change_task": _0_Planner.PlannerServer._d_change_task, "current_task_state": _0_Planner.PlannerServer._d_current_task_state, "continual_planning": _0_Planner.PlannerServer._d_continual_planning, "next_executable_plan_steps": _0_Planner.PlannerServer._d_next_executable_plan_steps, "expected_changes": _0_Planner.PlannerServer._d_expected_changes, "command_was_executed": _0_Planner.PlannerServer._d_command_was_executed, "negative_sensing": _0_Planner.PlannerServer._d_negative_sensing, "self_test": _0_Planner.PlannerServer._d_self_test, "kill_me": _0_Planner.PlannerServer._d_kill_me}

PlannerServer._omni_skeleton = PlannerServer
_0_Planner__POA.PlannerServer = PlannerServer
omniORB.registerSkeleton(PlannerServer._NP_RepositoryId, PlannerServer)
del PlannerServer
__name__ = "Planner"

#
# End of module "Planner"
#
__name__ = "Planner_idl"

_exported_modules = ( "Planner", )

# The end.
