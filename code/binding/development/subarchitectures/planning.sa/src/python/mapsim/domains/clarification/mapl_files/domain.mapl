(define (domain playmate)
(:requirements :typing :adl)

(:types 

   ;; should be added automatically
   phys_object feature_type feature_val boolean - object
   agent - phys_object
   human robot planning_agent subarchitecture - agent
   number - object

   ;; domain specific
   binding_proxy modality modality_user certainty_level - object
   vision_proxy language_proxy - binding_proxy
   binding_proxy agent - modality_user
   object_class colour size - feature_type
   object_class_val colour_val size_val - feature_val
)

(:constants
   object_class colour size - feature_type
   certain probable improbable - certainty_level
   vision_sa - subarchitecture
   vision language - modality
   blue red green - colour_val
   big small - size_val
   mug jug - object_class_val    ; the MAPL *constant*
)

(:predicates
  (has_access_to_modality ?p - modality_user ?m - modality)
  (distinctive_feature ?f - feature_type ?p - binding_proxy)
  (is_bound ?p ?cand - binding_proxy)
  (in_binding_candidates ?cand ?p - binding_proxy)
  (in_feature_domain ?v - feature_val ?f - feature_type)
  (feature_val ?f - feature_type ?p - binding_proxy : ?v - feature_val)
  (feature_certainty ?f - feature_type ?p - binding_proxy : ?c - certainty_level)
)


(:action bind
 :agent (?pa - planning_agent)
 :parameters (?p ?cand - binding_proxy)
 :precondition (and
    (in_binding_candidates ?cand ?p)
    (forall (?f - feature_type) 

        (or
          (not (distinctive_feature ?f ?p : true))
          (and
            (exists (?v - feature_val)
              (and
                (feature_val ?f ?p : ?v)
                (feature_val ?f ?cand : ?v)
              )
            )
          )
        )

  )
  )
 :effect (and
  (is_bound ?p ?cand)
))

;; (:action bind
;;  :agent (?pa - planning_agent)
;;  :parameters (?p ?cand - binding_proxy)
;;  :precondition (and
;;     (in_binding_candidates ?cand ?p)
;;     (forall (?f - feature_type) 
;;         (imply (distinctive_feature ?f ?p)
;;            (and
;; ; if you uncomment the following line you'll pay for it badly! may blow up runtime from
;; ; unmeasurable to >50secs
;; ;              (forall (?v - feature_val) (imply (feature_val ?f ?p : ?v) (feature_val ?f ?cand : ?v)))
;;               (K ?pa (feature_val ?f ?cand)) (K ?pa (feature_val ?f ?p))
;;            )
;;     ))
;;   )
;;  :effect (and
;;   (is_bound ?p ?cand)
;; ))
 
;; (:action deduce_feature_val
;;  :agent (?pa - planning_agent)
;;  :parameters (?p - binding_proxy ?f - feature_type ?v - feature_val)
;;  :precondition (and
;; 	(not (exists (?v2 - feature_val) (feature_val ?f ?p : ?v2)))
;;     (in_feature_domain ?v ?f)
;;     (forall (?cand - binding_proxy) (imply (in_binding_candidates ?cand ?p)
;;         (feature_val ?f ?cand : ?v)))
;;   )
;;  :effect (and
;; 	(feature_val ?f ?p : ?v)
;; ))

;; speech acts 

(:action tell_val_feature_polar
 :agent (?speaker - agent)
 :parameters (?hearer - agent ?f - feature_type ?v - feature_val ?p - binding_proxy)
 :precondition (and
	(not (exists (?v2 - feature_val) (feature_val ?f ?p : ?v2)))
    (K ?hearer (feature_val ?f ?p))
    (exists (?m - modality) (and 
      (has_access_to_modality ?p ?m)
      (has_access_to_modality ?hearer ?m))
    )
    (in_feature_domain ?v ?f)
  )
 :effect (and
	(feature_val ?f ?p : ?v)
))

(:action tell_val_feature_factual
 :agent (?speaker - agent)
 :parameters (?hearer - agent ?f - feature_type ?p - binding_proxy)
 :precondition (and
	(not (exists (?v - feature_val) (feature_val ?f ?p : ?v)))
    (K ?hearer (feature_val ?f ?p))
    (exists (?m - modality) (and 
      (has_access_to_modality ?p ?m)
      (has_access_to_modality ?hearer ?m))
    )
  )
 :effect (and
    (K ?speaker (feature_val ?f ?p))
))



)
