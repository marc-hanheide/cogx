;; generated by MAPL2PDDL
(define (problem cosytask)
(:domain playmate)
(:objects
  true - boolean
  false - boolean

  ;;; colours of things
  blue - colour
  red - colour
  green - colour

  ;;; the robot
  MrChips - robot
  MrChips - planning_agent

  ;;; flags
  left_flag - flag
  right_flag - flag
  ;;; the flags' wps
  left_flag_wp - waypoint
  right_flag_wp - waypoint
  ;;; and the spare wps associated with flags
  flag_target_wp_1 - waypoint
  flag_target_wp_2 - waypoint

  ;;; table boundaries, double declaration as would come from CAST
  ;;; currently
  ;;;table_left_wp - waypoint
  table_left_wp - waypoint_table_left
  ;;;table_right_wp - waypoint
  table_right_wp - waypoint_table_right

  ;;; the object placed on the table
  object_1 - movable
  object_1_wp - waypoint 
  object_1_target_wp - waypoint 	 

)

(:init
  
  ;;; objects are at their positions
  (pos left_flag : left_flag_wp)
  (pos right_flag : right_flag_wp)
  (pos object_1 : object_1_wp)	
	
  ;;; flag wps are near the table boundaroes
  (wp_near table_left_wp left_flag_wp)
  (wp_near table_right_wp right_flag_wp)

  ;;; object is blue and square
  (colour object_1 : blue)
  (shape object_1 : square)

  ;;; flags are blue and red
  (colour right_flag : blue)
  (colour left_flag : red)
)

(:goal 

;;; this is the colour game goal in a a relatively explit form:
;;; coloured objects need to be near their coloured flags, where the
;;; colours are state explicitly in the goal

(and
  (forall (?obj - movable) 
    (imply (colour ?obj : blue)	
      (forall (?flg - flag) 
        (imply (colour ?flg : blue)	
	  (near ?obj ?flg)
        )
      )
    )
  )
  (forall (?obj - movable) 
    (imply (colour ?obj : red)	
      (forall (?flg - flag) 
        (imply (colour ?flg : red)	
	  (near ?obj ?flg)
        )
      )
    )
  )
  (forall (?obj - movable) 
    (imply (colour ?obj : green)	
      (forall (?flg - flag) 
        (imply (colour ?flg : green)	
	  (near ?obj ?flg)
        )
      )
    )
  )
)

))
