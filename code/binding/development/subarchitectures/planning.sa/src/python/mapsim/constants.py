#! /usr/bin/env python
# -*- coding: latin-1 -*-

from string import Template
from utils import Struct

STOP = "stop"
AGENT_NAME_TMPL = "agt%d"

HIDDEN_PREFIX = "__"
PDDL_SENSOR_PREFIX = HIDDEN_PREFIX + "sensor__"
PDDL_NEG_SENSOR_PREFIX = PDDL_SENSOR_PREFIX + "neg__"
ACHIEVE_SG_PREFIX = HIDDEN_PREFIX + "achieve_subgoal_"
K_PREFIX = "k"
DIRECT_K_PREFIX = "kd"
INITIALLY_PREFIX = "i"
PREFIX_SEP = "__"
DOMAIN_KW = "domain"
IN_DOMAIN_KW = "in_domain"
GOAL_PSEUDO_ACTION = "reach_goal"
GOAL_REACHED_PREDICATE = "goal_reached"
TELL_VAL_STR = "tell_val"

TRUE_STRING = "true"
FALSE_STRING = "false"
BOOLEAN_VALUE_STRINGS = (TRUE_STRING, FALSE_STRING)
TRUE_TUP = (TRUE_STRING,)
FALSE_TUP = (FALSE_STRING,)
BOOLEAN_VALUE_TUPLES = (TRUE_TUP, FALSE_TUP)

UNDEFINED = -1
PHYS_ACTION = 0
REQUEST = 1
OTHER_SPEECH_ACT = 2
VIRTUAL_ACTION = 3
NEGOTIATION_ACTION = 4
SENSING_ACTION = 5

ACK_SG_ACCEPTANCE = 1
ACK_SG_ACHIEVEMENT = 2
NO_ACK_SG_ACCEPTANCE_IF_DIRECT_ACHIEVEMENT = 4

SubgoalState = "SG_CREATED SG_REQUESTED_FROM_OTHER SG_ACCEPTED_BY_OTHER " \
"SG_REJECTED_BY_OTHER SG_ACHIEVED SG_UNACHIEVABLE SG_FINAL_MB".split()
SubgoalState = Struct(**dict(zip(SubgoalState, xrange(len(SubgoalState)))))
# now we have a kind of enum: SubgoalState.SG_CREATED etc


REPORT_POS_SENSING = 1
REPORT_NEG_SENSING = 2

# node states:
PLANNED = "planned"
EXECUTED = "executed"
UNEXECUTABLE = "unexecutable"
# edge states:
PROVIDES = "provides"
PREVENTS_THREAT = "prevents threat"
THREATENED_BY = "threatened_by"

# log output
SCREEN = 1
FILE = 2

# verbosity levels
SILENT = 0
REPORTER = 1
PRESENTATION = 2
DEBUG = 9999

SCENARIO_CONFIG_FN = "scenario_main.mapl"

INFO_HIDDEN_ACTIONS = 2
INFO_SYSCALLS = 4
INFO_PARTIAL_ORDER = 6
INFO_TSG = 8
INFO_PM = 10


GENERIC_TASK_TEMPLATE = \
""";; Problem file for agent $agent_name
;; created automatically by MAPSIM
(define (problem $task_name)
(:domain $domain_name)
(:objects
$obj_def
)   ;; end objects
(:init
$facts
)   ;; end init
(:goal (and
$goal
))) ;; end problem
"""


MAPL_BASE_ONTOLOGY = """
  agent phys_obj - object
  subgoal feature boolean - object
  planning_agent - agent
""" 

MAPL_BASE_OBJECTS = "true false - boolean"

IS_PLANNING_AGENT_DECL = "is_planning_agent ?_a - agent"

MAPL_BASE_PREDICATES =  [
    IS_PLANNING_AGENT_DECL,
    "equals ?o1 ?o2 - object",
    "achieved ?sg - subgoal",
    "commited_to_plan ?a - agent",
    "can_talk_to ?a1 ?a2 - agent"
    ]

EQUALS_AXIOM = """
(:derived (equals ?o1 ?o2 - object)
   (= ?o1 ?o2)
)
"""

K_EQUALS_AXIOM = """
(:derived (k ?ag - agent (equals ?o1 ?o2 - object))
   (and )
)
"""

NEGOTIATE_PLAN_OP = "negotiate_plan"
CAN_TALK_TO = "can_talk_to"
COMMITED_TO_PLAN = "commited_to_plan"

NEGOTIATE_PLAN_OP_TMPL = """
(:action $NEGOTIATE_PLAN_OP
 :agent (?pa - planning_agent)
 :parameters (?a - agent)
 :precondition (and 
    ($CAN_TALK_TO ?pa ?a))
 :effect (and
    ($COMMITED_TO_PLAN ?a)
))
"""
tmpl = Template(NEGOTIATE_PLAN_OP_TMPL)
NEGOTIATE_PLAN_OP_TMPL = tmpl.safe_substitute(locals())

SPECIAL_OPERATORS = [
    EQUALS_AXIOM,
    K_EQUALS_AXIOM,
    NEGOTIATE_PLAN_OP_TMPL
]


DOT_TEMPLATE = """
digraph $name {
// generated by MAPSIM
$setup
// nodes
$node_decl
$ranks
// edges
$edge_decl
}
"""

DOT_SETUP_TMPL = """
// standard options
node [color=black, fontsize=12, style=solid]
edge [color=black, fontsize=10, style=solid] 
"""

TYPE_ATTRIBUTES = {
    PLANNED : "color=black",
    EXECUTED : "style=filled, color=black, fillcolor=Gray",
    UNEXECUTABLE : "style=dashed, color=red4, fontcolor=red4",
    PROVIDES : "color=black, style=solid",
    PREVENTS_THREAT : "color=darkgreen, fontcolor=darkgreen, style=dashed",
    THREATENED_BY : "color=red4, fontcolor=red4, style=dashed",
    }
