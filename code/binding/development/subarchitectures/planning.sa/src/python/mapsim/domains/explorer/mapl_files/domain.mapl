(define (domain explorer)

	(:requirements :mapl :adl)
	
	(:types 
		human robot - agent
		subarchitecture - agent

		area door - object
		movable - phys_obj
      
		object_pos - object
		agent area - object_pos

		localized_obj - object
        agent movable - localized_obj        

		doorstate - feature
		area_category - feature
	)
	
	(:constants
		open closed - doorstate
		open_space - door
		PatrickOffName corridor kitchen library - area_category
	)
	
	(:predicates
		(pos ?o -  localized_obj : ?p - object_pos)   
		(doorstate ?d - door : ?s - doorstate)
		(connects ?d - door ?r1 - area ?r2 - area)
		(area_category ?a - area : ?c - area_category)
		(subarchitecture_of ?c - subarchitecture : ?a - agent)
		;; special
		(has-goal ?a - agent)
	 )
	


;;; axioms

	(:derived (can_talk_to ?a1 ?a2 - agent)
		(and )
		)


;;; sensors ;;;

	(:sensor sense-door
	 :agent (?a - agent)
	 :parameters (?d - door ?r - area)
	 :precondition (and
	    (pos ?a : ?r) 
		(exists (?r2 - area) (connects ?d ?r ?r2)))
	 :sense (doorstate ?d))

	(:sensor sense-objects-held
	 :agent (?a - agent)
	 :parameters (?o - movable)
	 :precondition (and
	    (pos ?o : ?a))
	 :sense (pos ?o))

	(:sensor categorize-area
	 :agent (?ag - agent)
	 :parameters (?ar - area)
	 :precondition (and
	    (pos ?ag : ?ar))
	 :sense (area_category ?ar))

	(:sensor sense-object-in-area
	 :agent (?a - agent)
	 :parameters (?o - movable)
	 :variables (?r - area)
	 :precondition (and
	    (pos ?a : ?r)
		)
     :negcondition (and
	    (not (pos ?o : ?r))
		)
 	 :sense (pos ?o))
 
	(:sensor sense-connection
	 :agent (?a - agent)
	 :parameters (?d - door ?r1 ?r2 - area)
	 :precondition (and
	    (pos ?a : ?r1)
		)
     :negcondition (and
	    (not (connects ?d ?r1 ?r2 : true))
		)
	 :sense (connects ?d ?r1 ?r2))



;; speech acts 

	(:action tell_val ??svar
	 :agent (?speaker - agent)
	 :parameters (?hearer - agent)
	 :variables (?r - area)
	 :precondition (and
		(K ?speaker (??svar ??args))
		)
	 :effect (and
		(K ?hearer (??svar ??args))
	))


;; special

	(:action __realize_has_goal
	 :agent (?a - agent)
	 :variables (?sg - subgoal)
	 :effect (and
		(has-goal ?a)
	))

	(:action guess__area_category
	 :agent (?ag - planning_agent)
	 :parameters (?ar - area ?c - area_category)
	 :precondition (and
         ;; that's how the general scheme for guessing
		 ;; should look like: enforce an appropriate
		 ;; sensing action before (makes K true) and
		 ;; only permit values from the (current) restricted
		 ;; domain as known to the agent
	     (K ?ag (area_category ?ar))
		 (in_domain (area_category ?ar) ?c)
		)
	 :effect (area_category ?ar : ?c))



;;; actions ;;;

	(:action move
	 :agent (?a - robot)
	 :parameters (?to - area ?d - door)
	 :variables (?from - area)
	 :precondition (and 
		(connects ?d ?from ?to)
	    (doorstate ?d : open)
		(pos ?a : ?from) 
		)
	 :effect (and
		(pos ?a : ?to)
	))

	(:action open
	 :agent (?a - human)
	 :parameters (?d - door)
	 :variables (?r - area)
	 :precondition (and 
	    (doorstate ?d : closed)
		(pos ?a : ?r) 
		(exists (?r2 - area) (connects ?d ?r ?r2))
		)
	 :effect (and
	    (doorstate ?d : open)
	))

	(:action drop
	 :agent (?a - agent)
	 :parameters (?o - movable)
	 :variables (?r - area)
	 :precondition (and 
		(pos ?a : ?r) 
	    (pos ?o : ?a)
		)
	 :effect (and
		(pos ?o : ?r)
	))

	(:action grasp
	 :agent (?a - agent)
	 :parameters (?o - movable)
	 :variables (?r - area)
	 :precondition (and 
		(pos ?a : ?r) 
	    (pos ?o : ?r)
		)
	 :effect (and
		(pos ?o : ?a)
	))
	
	(:action give
	 :agent (?a - agent)
	 :parameters (?o - movable ?a2 - agent)
	 :variables (?r - area)
	 :precondition (and 
		(pos ?a : ?r) 
		(pos ?a2 : ?r) 
	    (pos ?o : ?a)
		)
	 :effect (and
		(pos ?o : ?a2)
	))

	(:action get_A
	 :agent (?a - agent)
	 :parameters (?o - movable)
	 :replan (and
    	 (K ?a (pos ?o))
     )
	 :effect (and
		(pos ?o : ?a)
	))
	
	(:action bring_A
	 :agent (?a - robot)
	 :parameters (?h - human ?o - movable)
	 :replan (and
    	 (K ?pa (pos ?o))
     	 (K ?pa (pos ?h))
      )
	 :effect (and
		(pos ?o : ?h)
	))
	
	(:action move_A
	 :agent (?a - robot)
	 :parameters (?to - area ?d - door)
	 :variables (?from - area)
	 :replan (and
		(K ?a (connects ?d ?from ?to))
	    (K ?a (doorstate ?d))
		)
	 :precondition (and 
		(pos ?a : ?from) 
		)
	 :effect (and
		(pos ?a : ?to)
	))


)
