(define (domain coffee)
(:requirements :typing)

(:types 
   room thing - object

   ;; should be added automatically
   agent boolean - object
   human robot - agent
   self_agent - robot
)

(:constants
    
   ;; should be added automatically
   true false - boolean
   agt0 - self_agent
)

(:predicates
  (timeout ?agt - agent : ?t - number)
  (succ ?small - number : ?big - number)
  (pos ?o - object : ?p - (either room agent))   
  (connected ?r1 ?r2 - room)
)

;;; sensors ;;;




;;; actions ;;;


(:action __activate
 :parameters (?a - agent ?t ?tn - number)
 :precondition (and 
	(timeout ?a : ?t) (succ ?tn ?t))
 :effect (and
	(timeout ?a : ?tn)) 
)

(:action pick-up
 :parameters (?a - agent ?t - thing ?r - room)
 :precondition (and 
        (timeout ?a : n0)
	(pos ?a : ?r) (pos ?t : ?r)
	(knows ?a (pos ?t))
)
 :effect (and
	(pos ?t : ?a) 
        (knows ?a (pos ?t))
	(forall (?a1 ?a2 - agent)
           (when (not (and (= ?a ?a1) (= ?a ?a2)))
                 (not (mb ?a1 ?a2 (pos ?t)))))
))

(:action __guess-pos
 :parameters (?a - self_agent ?t - thing ?r - room)
 :precondition (and 
        (timeout ?a : n0)
	(not (knows ?a (pos ?t))))
 :effect (and
	(pos ?t  ?r)) 
)

(:action drop
 :parameters (?a - agent ?t - thing ?r - room)
 :precondition (and 
        (timeout ?a : n0)
	(pos ?a : ?r) (pos ?t : ?a))
 :effect (and
	(pos ?t : ?r)) 
)

; (:action give
;  :parameters (?a1 ?a2 - agent ?t - thing ?r - room)
;  :precondition (and 
;         (timeout ?a1 : n0)
; 	(pos ?a1 : ?r) (pos ?a2 : ?r) (pos ?t : ?a1))
;  :effect (and
; 	(pos ?t : ?a2)
; 	(mb ?a1 ?a2 (pos ?t))
; ))

(:action move
 :parameters (?a - robot ?r1 ?r2 - room)
 :precondition (and 
        (timeout ?a : n0)
	(pos ?a : ?r1) (connected ?r1 ?r2))
 :effect (and
	(pos ?a : ?r2)) 
)


)