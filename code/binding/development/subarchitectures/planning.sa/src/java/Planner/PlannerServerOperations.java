package Planner;


/**
* Planner/PlannerServerOperations.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from Planner.idl
* Freitag, 13. MŠrz 2009 17.31 Uhr CET
*/


/* The PlannerServer provides the external interface with the
	   planner and monitoring components.  Additionally, it provides
	   methods for storing and querying plan memories,
	   i.e. histories of plan execution and plan changes.
	*/
public interface PlannerServerOperations 
{

  /* Register a new task with the planner.
  		   Side effect: sets a unique TaskID for that task */
  void new_task (Planner.PlanningTaskHolder task);

  /* Load a MAPL task, convert it to a PlanningTask as specified
  		   here, and register it with the planner */
  Planner.PlanningTask load_mapl_task (String task_fn, String domain_fn, String planning_agent);

  /* change task data during the continual planning process.
  		   clear_first==False means that unchanged data is kept, whereas
  		   clear_first==True will delete all old info first. */
  void change_task (Planner.PlanningTask task, boolean clear_first);

  /* returns the task as stored by the planner */
  Planner.PlanningTask current_task_state (String task_id);

  /* Checks if current plan is still valid and, if not, replans.
  		   This more or less hides the whole planning and monitoring
  		   process.  Returns information about the results and the state of
  		   the CCP algorithm. */
  Planner.CCPState continual_planning (String task_id) throws Planner.Failure;

  //SimplePOPlan current_plan(in TaskID task_id);
  Planner.Command[] next_executable_plan_steps (String task_id);
  Planner.Fact[] expected_changes (String task_id, Planner.Command cmd);

  //CommandSeq get_execution_history(in TaskID task_id);
  void command_was_executed (String task_id, Planner.Command cmd, boolean success);

  // expected value
  void negative_sensing (String task_id, Planner.GroundAction sensing_action);

  // Do a test of all functionality with some sample input.
  void self_test ();

  // Shut down the planner server
  void kill_me ();
} // interface PlannerServerOperations
