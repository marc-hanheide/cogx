package Planner;


/**
* Planner/_PlannerServerStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from Planner.idl
* Freitag, 13. MŠrz 2009 17.31 Uhr CET
*/


/* The PlannerServer provides the external interface with the
	   planner and monitoring components.  Additionally, it provides
	   methods for storing and querying plan memories,
	   i.e. histories of plan execution and plan changes.
	*/
public class _PlannerServerStub extends org.omg.CORBA.portable.ObjectImpl implements Planner.PlannerServer
{


  /* Register a new task with the planner.
  		   Side effect: sets a unique TaskID for that task */
  public void new_task (Planner.PlanningTaskHolder task)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("new_task", true);
                Planner.PlanningTaskHelper.write ($out, task.value);
                $in = _invoke ($out);
                task.value = Planner.PlanningTaskHelper.read ($in);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                new_task (task        );
            } finally {
                _releaseReply ($in);
            }
  } // new_task


  /* Load a MAPL task, convert it to a PlanningTask as specified
  		   here, and register it with the planner */
  public Planner.PlanningTask load_mapl_task (String task_fn, String domain_fn, String planning_agent)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("load_mapl_task", true);
                $out.write_string (task_fn);
                $out.write_string (domain_fn);
                $out.write_string (planning_agent);
                $in = _invoke ($out);
                Planner.PlanningTask $result = Planner.PlanningTaskHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return load_mapl_task (task_fn, domain_fn, planning_agent        );
            } finally {
                _releaseReply ($in);
            }
  } // load_mapl_task


  /* change task data during the continual planning process.
  		   clear_first==False means that unchanged data is kept, whereas
  		   clear_first==True will delete all old info first. */
  public void change_task (Planner.PlanningTask task, boolean clear_first)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("change_task", true);
                Planner.PlanningTaskHelper.write ($out, task);
                $out.write_boolean (clear_first);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                change_task (task, clear_first        );
            } finally {
                _releaseReply ($in);
            }
  } // change_task


  /* returns the task as stored by the planner */
  public Planner.PlanningTask current_task_state (String task_id)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("current_task_state", true);
                Planner.TaskIDHelper.write ($out, task_id);
                $in = _invoke ($out);
                Planner.PlanningTask $result = Planner.PlanningTaskHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return current_task_state (task_id        );
            } finally {
                _releaseReply ($in);
            }
  } // current_task_state


  /* Checks if current plan is still valid and, if not, replans.
  		   This more or less hides the whole planning and monitoring
  		   process.  Returns information about the results and the state of
  		   the CCP algorithm. */
  public Planner.CCPState continual_planning (String task_id) throws Planner.Failure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("continual_planning", true);
                Planner.TaskIDHelper.write ($out, task_id);
                $in = _invoke ($out);
                Planner.CCPState $result = Planner.CCPStateHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:Planner/Failure:1.0"))
                    throw Planner.FailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return continual_planning (task_id        );
            } finally {
                _releaseReply ($in);
            }
  } // continual_planning


  //SimplePOPlan current_plan(in TaskID task_id);
  public Planner.Command[] next_executable_plan_steps (String task_id)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("next_executable_plan_steps", true);
                Planner.TaskIDHelper.write ($out, task_id);
                $in = _invoke ($out);
                Planner.Command $result[] = Planner.CommandSeqHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return next_executable_plan_steps (task_id        );
            } finally {
                _releaseReply ($in);
            }
  } // next_executable_plan_steps

  public Planner.Fact[] expected_changes (String task_id, Planner.Command cmd)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("expected_changes", true);
                Planner.TaskIDHelper.write ($out, task_id);
                Planner.CommandHelper.write ($out, cmd);
                $in = _invoke ($out);
                Planner.Fact $result[] = Planner.FactListHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return expected_changes (task_id, cmd        );
            } finally {
                _releaseReply ($in);
            }
  } // expected_changes


  //CommandSeq get_execution_history(in TaskID task_id);
  public void command_was_executed (String task_id, Planner.Command cmd, boolean success)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("command_was_executed", true);
                Planner.TaskIDHelper.write ($out, task_id);
                Planner.CommandHelper.write ($out, cmd);
                $out.write_boolean (success);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                command_was_executed (task_id, cmd, success        );
            } finally {
                _releaseReply ($in);
            }
  } // command_was_executed


  // expected value
  public void negative_sensing (String task_id, Planner.GroundAction sensing_action)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("negative_sensing", true);
                Planner.TaskIDHelper.write ($out, task_id);
                Planner.GroundActionHelper.write ($out, sensing_action);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                negative_sensing (task_id, sensing_action        );
            } finally {
                _releaseReply ($in);
            }
  } // negative_sensing


  // Do a test of all functionality with some sample input.
  public void self_test ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("self_test", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                self_test (        );
            } finally {
                _releaseReply ($in);
            }
  } // self_test


  // Shut down the planner server
  public void kill_me ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("kill_me", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                kill_me (        );
            } finally {
                _releaseReply ($in);
            }
  } // kill_me

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:Planner/PlannerServer:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.Object obj = org.omg.CORBA.ORB.init (args, props).string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     String str = org.omg.CORBA.ORB.init (args, props).object_to_string (this);
     s.writeUTF (str);
  }
} // class _PlannerServerStub
