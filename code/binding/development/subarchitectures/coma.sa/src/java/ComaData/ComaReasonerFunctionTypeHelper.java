package ComaData;


/**
* ComaData/ComaReasonerFunctionTypeHelper.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from ComaData.idl
* Freitag, 13. MŠrz 2009 17.31 Uhr CET
*/


/// These are the coma reasoner function types
abstract public class ComaReasonerFunctionTypeHelper
{
  private static String  _id = "IDL:ComaData/ComaReasonerFunctionType:1.0";

  public static void insert (org.omg.CORBA.Any a, ComaData.ComaReasonerFunctionType that)
  {
    org.omg.CORBA.portable.OutputStream out = a.create_output_stream ();
    a.type (type ());
    write (out, that);
    a.read_value (out.create_input_stream (), type ());
  }

  public static ComaData.ComaReasonerFunctionType extract (org.omg.CORBA.Any a)
  {
    return read (a.create_input_stream ());
  }

  private static org.omg.CORBA.TypeCode __typeCode = null;
  synchronized public static org.omg.CORBA.TypeCode type ()
  {
    if (__typeCode == null)
    {
      __typeCode = org.omg.CORBA.ORB.init ().create_enum_tc (ComaData.ComaReasonerFunctionTypeHelper.id (), "ComaReasonerFunctionType", new String[] { "GetAllDirectConcepts", "GetAllConcepts", "GetMostSpecificConcepts", "GetBasicLevelConcepts", "GetAllInstances", "GetRelatedInstances", "GetInstancesByName", "AreConsEquivalent", "IsConSupercon", "IsConSubcon", "CompareCons", "GetObjectMobility", "GetTypicalObjects", "IsInstanceOf", "AddInstance", "DeleteInstance", "AddInstanceName", "AddInstanceNumberTag", "AddRelation", "GenerateRefEx"} );
    }
    return __typeCode;
  }

  public static String id ()
  {
    return _id;
  }

  public static ComaData.ComaReasonerFunctionType read (org.omg.CORBA.portable.InputStream istream)
  {
    return ComaData.ComaReasonerFunctionType.from_int (istream.read_long ());
  }

  public static void write (org.omg.CORBA.portable.OutputStream ostream, ComaData.ComaReasonerFunctionType value)
  {
    ostream.write_long (value.value ());
  }

}
