
/**=================================================================================

LFPacking.idl

Author(s): Pierre Lison
Version	 : 6.11.07 (Started: 29.06.07 )

The file LFPacking.idl provides an implementation of *packed* logical forms, ie
a compacted representation of a collection of logical forms (formulas of hybrid
logicm cfr. LFEssentials.idl) based on shared partial representations.

A packed logical form (PackedLogicalForm) is composed of:
- an identifier ;
- a collection of packing nodes ;
- a reference to the root packing node.

A packing node (PackingNode) is composed of:
- an unique identifier ;
- a collection of packed nominals ;
- a reference (identifier) to the root packed nominal ;
- a set of LF identifiers specifying the logical forms in which the
  nominals in the packing node occur ;
- a set of packing edges connected to one nominal of the packing node;
- a preference score, ie. a number n, with 0 <= n <= 1.
 
A packing edge (PackingEdge) is composed of:
- an unique identifier ;
- an edge label ;
- a reference to the nominal from which the edge originates ;
- a collection of pairs <packing node, LF identifiers> describing the set of
  possible packing nodes as target for the edge, together with the LF identifiers
  in which this connection occur;
- a boolean flag indicating whether the edge if coindexed.
- a preference score,  ie. a number n, with 0 <= n <= 1.
  
A packed nominal (PackedNominal) is composed of:
 - an unique identifier ;
 - a packed ontological sort ;
 - a proposition ;
 - a set of packed features ;
 - a set of relations internal to the packing node.
 
A packed feature (PackedFeature) is composed of:
- a feature name ;
- a feature value ;
- a set of logical form identifiers in which the feature value occurs.

A packed ontotological sort (PackedOntologicalSort) is composed of:
- an ontological sort ;
- the set of identifiers in which this sort occur.

The other data structures used are imported from LFESsentials.idl

=================================================================================*/


#include "LFEssentials.idl"

module org{
module cognitivesystems{
module repr{
module lf{
module autogen{
module LFPacking {

	// -----------------------
	// 	BASIC DEFINITIONS
	// -----------------------

	// packing node identifier
	typedef string PackingNodeId ;

	// packing edge identifier 
	typedef string PackingEdgeId ;

	// packed logical form identifier
	typedef string PackedLogicalFormId ;


	// -----------------------
	//	IMPORTS FROM LFEssentials 
	// -----------------------

	// nominal variable identifier
	typedef LFEssentials::nominalVariable nominalVariable ;
	
	// Proposition
	typedef LFEssentials::Proposition Proposition ;
	
	// Relations
	typedef LFEssentials::Relations Relations ;
	
	// ontological sort
	typedef LFEssentials::ontologicalSort ontologicalSort ;

	// collection of logical form identifiers
	typedef sequence <LFEssentials::Id> LogicalFormIds ;

	// -----------------------
	// PACKING EDGES
	// -----------------------

	// packing node targets 
	struct PackingNodeTarget {
		PackingNodeId pnId ;
		LogicalFormIds lfIds ;
	} ;

	// collection of packing node targets for a given packing edge
	typedef sequence <PackingNodeTarget> PackingNodeTargets ; 

	// packing edge
	struct PackingEdge {
		PackingEdgeId peId ;
		string mode ;
		nominalVariable head ;
		PackingNodeTargets targets ;
		boolean coIndexedDep ;  
		float preferenceScore ;
	} ;
	
	// collection of packing edges 
	typedef sequence <PackingEdge> PackingEdges ;


	// -----------------------
	//	PACKED FEATURES, SORTS AND NOMINALS	
	// -----------------------
	
	// packed feature 
	struct PackedFeature {
		string feat ;
		string value ;
		LogicalFormIds lfIds ;
	};

	// packed ontological sort
	struct PackedOntologicalSort {
    		ontologicalSort sort ;
    		LogicalFormIds lfIds ;
	};

 	typedef sequence <PackedOntologicalSort> PackedOntologicalSorts;

	// collection of packed featurs
	typedef sequence <PackedFeature> PackedFeatures ;
	
	// packed nominal
	struct PackedNominal {
		nominalVariable nomVar ;
	 	PackedOntologicalSorts packedSorts ;
		Proposition prop ;
		Relations rels ;
		PackedFeatures feats ;
		PackingEdges pEdges;		
	 } ;
	 
	// collection of packed nominals ;
	typedef sequence <PackedNominal> PackedNominals ;



	// -----------------------
	// PACKING NODES
	// -----------------------

	// <nominalVariable, PackingEdge> pair, indicating a packing
	// edge originating at the given nominal
	struct NominalPackingEdgePair {
		nominalVariable head ;
		PackingEdge pe ;
	} ;

	// 	collection of <nominalVariable, PackingEdge> pairs ;
	typedef sequence <NominalPackingEdgePair> NominalPackingEdgePairs ;

 	// packing node
 	struct PackingNode {
		PackingNodeId pnId ; 
 		LogicalFormIds lfIds ;
 		PackedNominals packedNoms ;
		nominalVariable root ;
		NominalPackingEdgePairs nomsPePairs ;
		float preferenceScore ;
	};
	
	// collection of packing nodes
	typedef sequence <PackingNode> PackingNodes ;



	// -----------------------
	// PACKED LOGICAL FORM
	// -----------------------
	
 	// packed logical form
	struct PackedLogicalForm {
		PackedLogicalFormId packedLFId ;
		PackingNodes pNodes ;
		PackingNodeId root ;
	};
	
};
}; //module 
}; //module 
}; //module 
}; //module 
}; //module 
