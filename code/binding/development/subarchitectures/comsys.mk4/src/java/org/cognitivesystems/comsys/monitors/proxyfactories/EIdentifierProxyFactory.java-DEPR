//=================================================================
// Copyright (C) 2007 Geert-Jan M. Kruijff (gj@dfki.de)
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public License
// as published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
// 02111-1307, USA.
//=================================================================

//=================================================================
// PACKAGE DEFINITION 
//=================================================================

package org.cognitivesystems.comsys.monitors.proxyfactories;

//=================================================================
// IMPORTS
//=================================================================

// ----------------------------------------------------------------
// BINDING imports
// ----------------------------------------------------------------
import binding.common.BindingComponentException;
import binding.autogen.BindingData.Feature.Concept;

// ----------------------------------------------------------------
// CAST imports
// ----------------------------------------------------------------
import cast.architecture.subarchitecture.SubarchitectureProcessException;

// ----------------------------------------------------------------
// COMSYS imports
// ----------------------------------------------------------------
import org.cognitivesystems.comsys.monitors.AbstractProxyFactory;
import org.cognitivesystems.comsys.monitors.ComSysBindingMonitor;
import org.cognitivesystems.comsys.monitors.PendingProxyRelation;
import org.cognitivesystems.comsys.monitors.ProxyFactoryResults;


// ----------------------------------------------------------------
// JAVA imports
// ----------------------------------------------------------------
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.Vector;


// ----------------------------------------------------------------
// LF imports
// ----------------------------------------------------------------
import org.cognitivesystems.repr.lf.autogen.LFEssentials.*;
import org.cognitivesystems.repr.lf.autogen.LFPacking.*;

//=================================================================
// JAVADOC CLASS DOCUMENTATION 
//=================================================================

/** 
The class <b>EIdentifierProxyFactory</b> implements the  mapping 
for producing a proxy, or a collection of proxies and proxy relations, 
for E-IDENTIFIER type nominals. 

The mapping consists in translating the sort into "name". 

@version 071003 (started 071003)
@author  Geert-Jan M. Kruijff (gj@dfki.de)
*/ 

//=================================================================
// CLASS DEFINITION 
//=================================================================

public class EIdentifierProxyFactory 
	extends DefaultProxyFactory
	
{

    //=================================================================
    // CLASS-INTERNAL GLOBAL VARIABLES
    //=================================================================




    //=================================================================
    // CONSTRUCTOR METHODS
    //=================================================================

	public EIdentifierProxyFactory () { 
		super();
		rootSort = "e-identifier";
	} // end

	public EIdentifierProxyFactory (ComSysBindingMonitor m) {
		super(m);
		rootSort = "e-identifier";		
	} // end 

    //=================================================================
    // COMPUTATION METHODS
    //=================================================================

	/** 
		The method <i>addConcept</i> takes the ontological sort and proposition of a nominal, 
		and creates a concept label from this information. 
		
		@param sort The sort
		@param proposition The proposition
		@return String The concept label
	*/ 

	protected void addConcept (String sort, String proposition) 
		throws BindingComponentException, SubarchitectureProcessException 
	{ 
		// Concept concept = new Concept(sort+":"+proposition, false);
		Concept concept = new Concept("name", false, "");
		monitor.addProxyFeature(concept);
	} // end createConceptLabel
	

} // end EIdentifierProxyFactory

