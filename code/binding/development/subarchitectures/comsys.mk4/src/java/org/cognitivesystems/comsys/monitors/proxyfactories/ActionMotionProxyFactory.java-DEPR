//=================================================================
// Copyright (C) 2007 Geert-Jan M. Kruijff (gj@dfki.de)
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public License
// as published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
// 02111-1307, USA.
//=================================================================

//=================================================================
// PACKAGE DEFINITION 
//=================================================================

package org.cognitivesystems.comsys.monitors.proxyfactories;

//=================================================================
// IMPORTS
//=================================================================

// ----------------------------------------------------------------
// BINDING imports
// ----------------------------------------------------------------
import binding.common.BindingComponentException;
import binding.autogen.BindingData.Feature.Concept;
import binding.autogen.BindingData.Feature.DebugString;
import binding.autogen.BindingData.Feature.Proposition;
import binding.autogen.BindingData.Feature.SourceID;

// ----------------------------------------------------------------
// CAST imports
// ----------------------------------------------------------------
import cast.architecture.subarchitecture.SubarchitectureProcessException;

// ----------------------------------------------------------------
// COMSYS imports
// ----------------------------------------------------------------
import org.cognitivesystems.comsys.monitors.AbstractProxyFactory;
import org.cognitivesystems.comsys.monitors.ComSysBindingMonitor;
import org.cognitivesystems.comsys.monitors.PendingProxyRelation;
import org.cognitivesystems.comsys.monitors.ProxyFactoryResults;


// ----------------------------------------------------------------
// JAVA imports
// ----------------------------------------------------------------
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.Vector;


// ----------------------------------------------------------------
// LF imports
// ----------------------------------------------------------------
import org.cognitivesystems.repr.lf.autogen.LFEssentials.*;
import org.cognitivesystems.repr.lf.autogen.LFPacking.*;

//=================================================================
// JAVADOC CLASS DOCUMENTATION 
//=================================================================

/** 
The class <b>ActionMotionProxyFactory</b> implements the  mapping 
for producing a proxy, or a collection of proxies and proxy relations, 
for ACTION-MOTION type nominals. The proxies are written to the working memory of the binder, 
through the monitor associated with the  factory. 

@version 071017 (started 071004)
@author  Geert-Jan M. Kruijff (gj@dfki.de)
*/ 

//=================================================================
// CLASS DEFINITION 
//=================================================================

public class ActionMotionProxyFactory 
	extends DefaultProxyFactory
	
{

    //=================================================================
    // CLASS-INTERNAL GLOBAL VARIABLES
    //=================================================================

	private boolean generateProxy = true; 


    //=================================================================
    // CONSTRUCTOR METHODS
    //=================================================================

	public ActionMotionProxyFactory () { 
		super();
		rootSort = "action-motion";
	} // end

	public ActionMotionProxyFactory (ComSysBindingMonitor m) {
		super(m);
		rootSort = "action-motion";		
	} // end 

    //=================================================================
    // COMPUTATION METHODS
    //=================================================================

	/** 
		The method <i>addConcept</i> takes the ontological sort and proposition of a nominal, 
		and creates a concept label from this information. For an action-motion, we are 
		producing the concept "action-motion". 
		
		@param sort The sort
		@param proposition The proposition
		@return String The concept label
	*/ 

	protected void addConcept (String sort, String proposition) 
		throws BindingComponentException, SubarchitectureProcessException 
	{ 
		if (generateProxy) {
			// Concept concept = new Concept(sort+":"+proposition, false);
			// Concept concept = new Concept("action-motion", false, "");
			Concept concept = new Concept(proposition, false, "");
			monitor.addProxyFeature(concept); 
		}
	} // end createConceptLabel
	
	
	
	/** 
		The method <i>addFeatures</i> takes an iterator over the features for a packed nominal, 
		and adds these features to the current proxy. 
		
		@param featsIter The iterator over (PackedFeature) features  
	*/ 
	
	protected void addFeatures (Iterator featsIter) 
		throws BindingComponentException, SubarchitectureProcessException  
	{ 
		if (generateProxy) { 
			while (featsIter.hasNext()) { 
				PackedFeature pFeat = (PackedFeature) featsIter.next();
				String feature = pFeat.feat;
				DebugString dFeat = new DebugString();
				dFeat.m_debugString = feature+": "+pFeat.value; 
				monitor.addProxyFeature(dFeat);		
			} // end while over features 
		}
	} // end features

	/** 
		The method <i>addProposition</i> checks whether the given proposition is non-empty; if it is, 
		then a proposition feature is added to the proxy, otherwise the proxy may be set to be hypothetical
		(depending on whether the <tt>hypoCheck</tt> flag has been set to true (default). 
		
		@param proposition The proposition of the nominal 
	*/ 

	protected void addProposition (String proposition) 
		throws BindingComponentException, SubarchitectureProcessException 
	{ 
		if (generateProxy) { 
			if (proposition == null || proposition.equals("")) { 
			
			} else { 
				// the nominal has a proposition, so add it
				Proposition prop = new Proposition(proposition,false, "");
				monitor.addProxyFeature(prop);						
			} // end if..else check for proposition
		}
	} // end addProposition
	
	
	
	
	/**
		The method <i>initializeProxy</i> sets up the proxy to which we 
		will be adding content from the given nominal. If the given address is 
		null, we need to start a new proxy. If the address is not null, then we are 
		updating an already existing proxy. In this case, we remove any
		old information from the old proxy. 
	
		@param nomVarProxyAddress The (possibly null) address of the proxy 
		@param nom	The packed nominal with which we are working
		@throws SubarchitectureProcessException Thrown if the monitor has a problem with creating or updating a proxy
	*/ 

	public void initializeProxy (String nomVarProxyAddress, PackedNominal nom) 
		throws SubarchitectureProcessException
	{ 
		String nomVar = nom.nomVar;
		if (nomVarProxyAddress == null) { 
			try { 
				log("[AbstractProxyFactory] Starting a new proxy for nominal ["+nomVar+"] at address ["+nomVarProxyAddress+"]");
				monitor.startNewProxy(); 
				generateProxy = true;
			} catch (SubarchitectureProcessException se) { 
				log("Need to finish existing proxy, so cancel and start a new one.");
				monitor.cancelProxy();
				monitor.startNewProxy(); 				
				generateProxy = true;				
			} 
				
		} else { 
			log("[AbstractProxyFactory] Updating an existing proxy for nominal ["+nomVar+"] at address ["+nomVarProxyAddress+"]");		
			log("[AbstractProxyFactory] Check whether we can access proxy at address ["+nomVarProxyAddress+"]");
			
			// monitor.updateExistingProxy(nomVarProxyAddress,new HashSet());
			generateProxy = false;
			
			
		} // end if..else check whether to start a new proxy, or update
	} // end initializeProxy	
	
	
	
		/** Produces a proxy, or collection of proxies, starting from the given 
		nominal, using the packed logical form and the treemap-index into the nominals. 
		The method returns a result structure including variables of nominals for which we should no 
		longer generate proxies, and the relations that should be introduced.
		
		@param nom The packed nominal from which proxy production should start
		@param plf The packed logical form in which the nominal appears
		@param packedNoms The map with nominal variables indexing into the packed logical form
		@return ProxyFactoryResults A set with nominal variables of packed nominals for which proxies have been produced
		@see org.cognitivesystems.comsys.monitors.AbstractProxyFactory#getRelProxiesTable		 
		
	*/
	public ProxyFactoryResults produceProxies (PackedNominal nom, PackedLogicalForm plf, TreeMap packedNoms) 
		throws BindingComponentException, SubarchitectureProcessException
	
	{  
		// Initialize the result structures
		ProxyFactoryResults result = new ProxyFactoryResults();
		
		// Set the proxy generation flag
		result.setGenerateProxy(generateProxy);
		
		TreeSet excludes = new TreeSet();

		// only add information if we are generating a proxy
		if (generateProxy) { 
			// Add the nominal variable as DebugString feature
			DebugString nomVarFeat = new DebugString();
			nomVarFeat.m_debugString = "Discourse referent: "+_discRefsAccess.getDiscRef(nom.nomVar); 
			monitor.addProxyFeature(nomVarFeat);		
			// Add the proposition to the proxy (auto-check whether 
			// there is any; else the the proxy may be set to be hypothetical)
			addProposition(nom.prop.prop);
			// Get the sort of the current nominal, and add as concept
			String sort = getPackedNominalSort(nom);
			addConcept(sort,nom.prop.prop);
			// Add the features to the nominal
			ArrayList<PackedFeature> packedFeats = new ArrayList<PackedFeature>(Arrays.asList(nom.feats));
			Iterator featsIter = packedFeats.iterator();
			addFeatures(featsIter);
		} // end if..check for proxy generation
		
		// Create the relations
		Vector<PendingProxyRelation> pendingRels = new Vector<PendingProxyRelation>();
		ArrayList<LFRelation> relations = new ArrayList<LFRelation>(Arrays.asList(nom.rels));
		Iterator relsIter = relations.iterator();
		while (relsIter.hasNext()) { 
			LFRelation rel = (LFRelation) relsIter.next();
			if (rel.mode.equals("Dynamic")) { 
				// Get the dependent nominal
				ProxyFactoryResults propResult = mapDestination(nom,packedNoms); 
				excludes.addAll(propResult.getExcludes()); 
				pendingRels.addAll(propResult.getPendingProxyRelations()); 
			} else if (rel.mode.equals("Location")) { 
				ProxyFactoryResults mapResult = mapLocation(nom,packedNoms);
				excludes.addAll(mapResult.getExcludes());
				pendingRels.addAll(mapResult.getPendingProxyRelations());				
			} else { 
				PendingProxyRelation ppr = new PendingProxyRelation();
				ppr.headNomVar = nom.nomVar; 
				ppr.relMode = rel.mode;
				ppr.depNomVar = rel.dep;
				pendingRels.addElement(ppr);
			} // end if..else check for property relation
		} // end while over relations
		
		
		// create the relations based on packing edges, if there are any
		if (nom.packingEdges != null) { 
			System.out.println("[ActionPF] cycling over packing edges under ["+nom.nomVar+"]"); 
			ArrayList<PackingEdge> peEdges = new ArrayList<PackingEdge>(Arrays.asList(nom.packingEdges));
			Iterator peIter = peEdges.iterator();
			while (peIter.hasNext()) { 
				PackingEdge packingEdge = (PackingEdge) peIter.next();
				if (packingEdge.mode.equals("Destination")) { 
					ProxyFactoryResults destResult = mapDestination(nom,packedNoms); 
					excludes.addAll(destResult.getExcludes()); 
					pendingRels.addAll(destResult.getPendingProxyRelations()); 
				} else if (packingEdge.mode.equals("Location")) { 
					ProxyFactoryResults mapResult = mapLocation(nom,packedNoms);
					excludes.addAll(mapResult.getExcludes());
					pendingRels.addAll(mapResult.getPendingProxyRelations());
				} else if (packingEdge.mode.equals("GenOwner")) { 
					// do sweet nothing, this is a bug in the grammar
				} else { 
					ArrayList<PackingNodeTarget> targets = new ArrayList<PackingNodeTarget>(Arrays.asList(packingEdge.targets));
					for (Iterator targetIter = targets.iterator(); targetIter.hasNext(); ) { 
							PackingNodeTarget target = (PackingNodeTarget) targetIter.next();
							String targetNV = target.pnId.substring(0,target.pnId.indexOf("_PN"));
							// Create the result
							System.out.println("[ActionPF] Putting in a new packing-edge based relation of type ["+packingEdge.mode+"] under Thing ["+nom.nomVar+"]");  
							PendingProxyRelation ppr = new PendingProxyRelation();
							ppr.headNomVar = nom.nomVar; 
							ppr.relMode = packingEdge.mode;
							ppr.depNomVar = targetNV;
							pendingRels.addElement(ppr);
						} // end for over targets
				} // end if..else check for relation types
			} // end while over relations
		} // end if ... check for packing edges
		
		// Add the relations to the result
		result.setPendingProxyRelations(pendingRels);
		result.setExcludes(excludes);
		// Return the results
		return result;
	} // end produceProxies
	
	
	/** 
		The method <i>mapLocation</i> creates the amodal representation of a action's location. 
		
		@param action		The nominal of the action
		@param packedNoms	The index map for the nominals in the packed logical form
		@return ProxyFactoryResults	Results with a treeset with nominal variables to be excluded from further processing, and a location relation
	*/ 
	private ProxyFactoryResults mapLocation (PackedNominal action, TreeMap packedNoms) 
		throws BindingComponentException, SubarchitectureProcessException
	{ 
		// Initialize the result structures
		ProxyFactoryResults results = new ProxyFactoryResults();
		TreeSet excludes = new TreeSet();
		Vector pendingRelations = new Vector();
		// Get the location dependent(s) of the object
		TreeSet<PackedNominal> locations = getDependentNominals(action,"Location",packedNoms); 
		for (Iterator locsIter = locations.iterator(); locsIter.hasNext(); ) { 
			PackedNominal location = (PackedNominal) locsIter.next();
			if (location != null) { 
				String amodalSpatialRelation = location.prop.prop;
				PackedNominal anchor = getDependentNominal(location,"Arg",packedNoms);
				if (anchor != null) { 
					PendingProxyRelation spatialRel = new PendingProxyRelation(action.nomVar,
																			   anchor.nomVar,
																			   amodalSpatialRelation);
					pendingRelations.addElement(spatialRel);
				} // end if..check for anchor
				excludes.add(location.nomVar);
			} else { 
			} // end if..else check for availability of dependent
		} // end for over locations
		// Set the results
		results.setExcludes(excludes);
		results.setPendingProxyRelations(pendingRelations);
		return results;
	} // end mapLocation
	
	
	/** 
		The method <i>mapDestination</i> creates the amodal representation of a action's destination. 
		
		@param action		The nominal of the action
		@param packedNoms	The index map for the nominals in the packed logical form
		@return ProxyFactoryResults	Results with a treeset with nominal variables to be excluded from further processing, and a location relation
	*/ 
	private ProxyFactoryResults mapDestination (PackedNominal action, TreeMap packedNoms) 
		throws BindingComponentException, SubarchitectureProcessException
	{ 
		// Initialize the result structures
		ProxyFactoryResults results = new ProxyFactoryResults();
		TreeSet excludes = new TreeSet();
		Vector pendingRelations = new Vector();
		// Get the destination dependent(s) of the object
		TreeSet<PackedNominal> destinations = getDependentNominals(action,"Dynamic",packedNoms);
		for (Iterator destIter = destinations.iterator(); destIter.hasNext(); ) { 
			PackedNominal destination = (PackedNominal) destIter.next();
			if (destination != null) { 
				String amodalSpatialRelation = destination.prop.prop;
				PackedNominal anchor = getDependentNominal(destination,"Arg",packedNoms);
				if (anchor != null) { 
					PendingProxyRelation spatialRel = new PendingProxyRelation(action.nomVar,
																				anchor.nomVar,
																				amodalSpatialRelation);
					pendingRelations.addElement(spatialRel);
				} else { 
					// System.err.println("Unable to find ARG under a DYNAMIC relation in ACTION-MOTION");
				} // end if..check for anchor
				excludes.add(destination.nomVar);
			} else { 
				// System.err.println("Unable to find a DYNAMIC relation in ACTION-MOTION");
				excludes.add(destination.nomVar);			
			} // end if..else check for availability of dependent
		} // end for over destinations
		// Set the results
		results.setExcludes(excludes);
		results.setPendingProxyRelations(pendingRelations);
		return results;
	} // end mapDestination	
	
	
	
	

} // end ActionMotionProxyFactory

