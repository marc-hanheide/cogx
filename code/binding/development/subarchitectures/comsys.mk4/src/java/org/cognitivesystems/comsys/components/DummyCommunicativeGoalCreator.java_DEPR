/**
 * 
 */
package org.cognitivesystems.comsys.components;

import java.util.Arrays;

import binding.abstr.AbstractBindingReader;

import motivation.components.abstr.AbstractActionResponder;
import motivation.idl.AcknowledgeMotive;
import motivation.idl.MotiveAcknowledgement;
import motivation.util.CompetenceRegistration;
import BindingData.BindingProxy;
import BindingFeatures.Colour;
import cast.architecture.subarchitecture.AlreadyExistsOnWMException;
import cast.architecture.subarchitecture.SubarchitectureProcessException;
import cast.cdl.TriBool;
import cast.cdl.WorkingMemoryPointer;
import cast.core.CASTUtils;

/**
 * 
 * A dummy component to show how to handle actions generated by the planner that
 * could be used for generation.
 * 
 * @author nah
 * 
 */
public class DummyCommunicativeGoalCreator extends AbstractActionResponder {

	/**
	 * @param _id
	 */
	public DummyCommunicativeGoalCreator(String _id) {
		super(_id);
	}

	@Override
	protected void runComponent() {
		// let the world know we're capable dealing with these things
		try {
			CompetenceRegistration.registerFeatureGenerationCompetence(this,
					Colour.class);
		}
		catch (AlreadyExistsOnWMException e) {
			e.printStackTrace();
		}
		catch (SubarchitectureProcessException e) {
			e.printStackTrace();
		}
	}

	@Override
	protected void acknowledgeMotive(String _actionID, AcknowledgeMotive _ack)
			throws SubarchitectureProcessException {
		if (_ack.m_ack == MotiveAcknowledgement.MOTIVE_ACK_ACCEPTED) {
			println("The last motive from " + getSubarchitectureID()
					+ " was accepted.");
		}
		else if (_ack.m_ack == MotiveAcknowledgement.MOTIVE_ACK_REJECTED) {
			println("The last motive from " + getSubarchitectureID()
					+ " was rejected.");
		}
		else if (_ack.m_ack == MotiveAcknowledgement.MOTIVE_ACK_ALREADY_HOLDS) {
			println("The last motive from " + getSubarchitectureID()
					+ " was already the case.");
		}

		for (WorkingMemoryPointer _source : _ack.m_source) {
			// these are all proxies
			assert (_source.m_type.equals(CASTUtils
					.typeName(BindingProxy.class)));
		}

		println("The motive involved these motive.sa proxies: "
				+ Arrays.toString(_ack.m_source));

		// now tell the planner we've acknowledged successfully, note that this
		// doesn't have to be called in this method. It shouuld be called once
		// the acknowledgement is done, i.e. after something has been said
		responseComplete(_actionID, TriBool.triTrue);
	}

	@Override
	protected void factualQuery(String _actionID, String _proxyID,
			Class<?> _queryClass, String _fromSA)
			throws SubarchitectureProcessException {

		println("hello dear user, what " + _queryClass.getName() + " is the "
				+ _proxyID + "?");

		// now tell the planner we've acknowledged successfully, note that this
		// doesn't have to be called in this method. It shouuld be called once
		// the query has been generated and the answer process resulting in new
		// data on binding wm
		responseComplete(_actionID, TriBool.triTrue);
	}
}
