
# This file contains the semantic and syntactic features 
# used by the grammar

#####################
# SEMANTIC FEATURES #
#####################

# Note: currently a 'redundancy' for proximity. Can't re-use feature-value names
#       so must have , e.g., distal, e-distal and m-distal corresponding to
#       THAT ball, who said THAT, OVER on the table (or THERE)

feature{

## ENTITY features ##

NUMBER<T:Num>: sg pl;      
PROXIMITY<T:Proximity>: distal proximal;
DELIMINATION<T:Delimitation>: unique existential variable;
QUANTIFICATION<T:Quantification>: specific unspecific uncountable;

## EVENT features ##
  
POLARITY<E:Polarity>: pos neg;
MOOD<E:Mood>: ind imp int;
TENSE<E:Tense>: past pres fut;
ASPECT<E:Aspect>: continuous perfect;
VOICE<E:Voice>: active passive;
E-PROXIMITY<E:Proximity>: e-distal e-proximal;

## MOD features ##

DEGREE<M:Degree>: no-degrees degrees{degree-base comparative superlative};
M-PROXIMITY<M:Proximity>: m-distal m-proximal;

}

# These are the semantic features which are used inside family definitions in the grammar
# Although syntactic features can be used syntactic categories inside the grammar, semantic
# ones can't be (i.e only as 'macros' in dicionary entries) 

  def POS()  { <Polarity>(pos) }  def NEG()  { <Polarity>(neg) }
  def SG()   { <Num>(sg) }        def PL()   { <Num>(pl) }

  def UNCOUNTABLE()             { <Quantification>(uncountable) }
  def UNSPECIFIC()              { <Quantification>(unspecific)  }
  def SPECIFIC()                { <Quantification>(specific)    }

  def UNIQUE()      { <Delimitation>(unique) }
  def VARIABLE()    { <Delimitation>(variable) }
  def EXISTENTIAL() { <Delimitation>(existential) }
  
  def IND() { <Mood>(ind) }   def IMP() { <Mood>(imp) }   def INT() { <Mood>(int) }
  
######################
# SYNTACTIC FEATURES #
######################

# 15 is the feature id for nouns
# 9 is the feature id for the syntatic subject position
# 10 is the feature id for sentences
# 11 is the feature id for finites when 'selected' for by interrogative utterance templates
#       the finite determines subj agreement and pol, vform & fin.
# 42 is used for the np compliment in 'I am a man', used to block ' these are a ball'

feature{

## Noun features ##

NUM<15, 9, 10, 11, 42>:  s-sg s-pl {s-pl-sp s-pl-unsp} s-mass ;  # specific plural (as in 3 balls) or unspecific (balls)
PERS<15, 9, 10, 11>: non-3rd {1st 2nd} 3rd;

CASE<15, 9>: nom acc-both{acc acc-loc}; # acc-loc is for here and there in 'on there', 'up here', 'closer to there' also 'before then' etc.                              
NFORM<15, 9, 11>: nf-real{full pro nf-ctxt} nf-dummy{dummy-there};  # full form vs pronoun vs none (as in the green)

#CASE<15, 9>: nom acc ; # acc-loc is for here and there in 'on there', 'up here', 'closer to there' etc.                              
#NFORM<15, 9, 11>: full pro nf-ctxt;  # full form vs pronoun vs none (as in the green)


## Sentence Features 

MOOD<10>: s-major{ s-ind s-imp s-int s-ind-ell } s-minor ;  
POL<10,11>: s-pos s-prov-pos s-neg;
#VFORM<10,11>: fin{ fin-ctxt fin-full fin-deictic}   vf-base inf ing pp vf-be for-ing;  


# Aug 20 added ell-subj as vform... may be useful

VFORM<10,11>: fin{ fin-clause{fin-ctxt fin-ell fin-full} fin-deictic} vf-base vf-to-imp inf ing pp vf-be for-ing;  


#VFORM<10,11>: fin{ fin-clause{fin-ctxt fin-full} fin-deictic} vf-base vf-to-imp inf ing pp vf-be for-ing;  
    # vf-be (am able to)  for-ing (thanks for helping me), fin-ctxt (I did), fin-deictic (I said that) , fin-full (all other finite events)
	# Need two layers b/c any thing which wants a finite-s can take a deictic (I said that, before that, etc.) BUT must the ind-building rule
	# only wants fin-ctxt or full

FIN<10,11>: be do can should will could would must have;  
	# this will be important if we want 1) to handle tag questions 2) to cleanly & quickly handle 'ellipse responses' I did, you shouldn't, can I, etc.



## Adj/Adv Features ##

DEGREE<25>: s-no-degrees s-degrees{s-degree-base s-comparative s-superlative};





######## Modifier Restriction #######


# OpenCCG doesn't seem to like using the same feature-value names for differnt things, 
# so, I have created 3 versions.
#           1) m-#######, the ontological semantic sort
#           2) x-#######, placed on mod themselves, specifying one 'kind' of modifier they are
#           3) s-#######, placed on the s (or verb) to specify what 'kind' of modifiers it
#                         accepts.

  # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  # IMPORTANT:  
  #            If the modifier section of the ontological hierarchy is changed, you will have to add
  #            reflect these changes here
  #
  # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!



MOD-TYPE<25>:          x-negation
                       x-dynamic{ x-direction x-whereto x-wherefrom x-through }
                       x-manner
                       x-time {x-time-point x-time-sequence x-time-interval}
                       x-location
                       x-probability
                       x-frequency    
                       x-comment      
                       x-serial		   
                       x-accompaniment
					   x-instrumental
					   x-comparison 
                       x-benefactor    
                       x-relational{x-cause x-result x-condition}
                       x-purpose       
                       x-intensity;

# placed on modified  (sentence)
# Note: These could in theory also be placed on Mod-Mods to limit the kinds of Mods they can modify.

MCLASS<10>:            s-negation
                       s-dynamic{ s-direction s-whereto s-wherefrom s-through }
                       s-manner
                       s-time  {s-time-point s-time-sequence s-time-interval}
                       s-location
                       s-probability
                       s-frequency    
                       s-comment      
                       s-serial		   
                       s-accompaniment
					   s-instrumental
					   s-comparison 
                       s-benefactor    
                       s-relational{s-cause s-result s-condition}
                       s-purpose       
                       s-intensity
					   s-none

  # These are the classes which verbs lexically select to determine their modificational potential, 
  # i.e., to restrict the types of modifiers they can accept
  # NEW CLASSES CAN EASILY BE ADDED HERE.

  m-class-none  [s-none]
  m-class-4     [s-relational s-frequency s-probability s-comment s-time]
  m-class-3     [s-relational s-frequency s-probability s-comment s-time  s-instrumental s-accompaniment s-benefactor s-comparison]
  m-class-2x    [s-relational s-frequency s-probability s-comment s-time  s-instrumental s-accompaniment s-benefactor s-comparison           s-location]
  m-class-2     [s-relational s-frequency s-probability s-comment s-time  s-instrumental s-accompaniment s-benefactor s-comparison s-purpose s-location]
  m-class-1     [s-relational s-frequency s-probability s-comment s-time  s-instrumental s-accompaniment s-benefactor s-comparison s-purpose s-location s-manner s-serial]
  m-class-1x    [s-relational s-frequency s-probability s-comment s-time  s-instrumental s-accompaniment s-benefactor s-comparison s-purpose            s-manner s-serial s-dynamic]
  m-class-all   [s-relational s-frequency s-probability s-comment s-time  s-instrumental s-accompaniment s-benefactor s-comparison s-purpose s-location s-manner s-serial s-dynamic]
  ;


## Combinatorial Behaviour of Modifiers ##

# These are the features which determine the syntactic behaviour of modifiers
# (where they can be). Each modifer POS (adv, pp) has a rule for each of 
# these saying, e.g, 'if you are allowed to pre-modify sentences, then I'll turn you into a pre-modifier '

# Each modifier lexically (in the dictionary) chooses its syntactic 'class'

CC-TYPE<25, 15>: post-s post-s-loose pre-s pre-vp post-vp 
                 pre-cop-comp   # I am ALSO big,  it is CERTAINLY not a ball
                 post-n pre-n
			     cc-none
			 
			     compound-1st compound-head
				 no-q  # this is placed in slots that don't want 'quality' entities (color, size, shap, etc), e.g. 'what size ball' but not 'what size color'
			 
   # Here are the classes for adverbs (NEW CAN EASILY BE MODIFIED/EXTENDED)			 
			 
   adv-all  [pre-s pre-vp post-vp   post-s pre-cop-comp] 
   adv-1    [pre-s pre-vp post-vp   post-s] #s or vp?
   adv-2    [      pre-vp post-vp   post-s]
   adv-3    [pre-s        post-vp   post-s]
   adv-4    [             post-vp   post-s]
   adv-5    [pre-s pre-vp                 ]
   adv-6    [      pre-vp post-vp         ]
   adv-7  [pre-s pre-vp post-vp   post-s]  

   # Here are the classes for prepositions (NEW CAN EASILY BE MODIFIED/EXTENDED)
			 
   prep-all [post-n post-s post-vp pre-s]
   prep-1   [post-n post-s post-vp      ]
   prep-2   [       post-s post-vp      ]
   prep-3   [post-n                     ]
   prep-4   [       post-s post-vp pre-s]
			 

   # This has been added to some nouns to restrict their behaviour with the n-n compound rule, 
   # e.g. the noun 'left' as in 'the left of the mug' has been set to cc-none to block 'the ball left of the mug'
   #      receiving a reading with 'ball left' as a compound. 
  
   n-all [compound-1st compound-head no-q]
   n-1   [compound-1st  no-q]
   n-2   [compound-head no-q]
   n-3   [compound-1st]
   n-4   [no-q]
  
   ;
  
} # end feature
