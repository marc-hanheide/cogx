package binder.fakeproxygenerators;

import java.util.Random;
import java.util.Vector;

import binder.abstr.AbstractProxyGenerator;
import binder.autogen.core.Feature;
import binder.autogen.core.FeatureValue;
import binder.autogen.core.Proxy;
import binder.autogen.featvalues.StringValue;

public class RandomProxyGenerator extends AbstractProxyGenerator {

	Random randomProbGenerator;
	
	public void start () {
		randomProbGenerator = new Random();
		log("Random  proxy generator successfully started");
	}
	
	
	public void run() {
		randomInsertion();
	}
		

	private Proxy createNewRandomProxy() {
		Proxy newProxy = new Proxy();
		newProxy.entityID = newDataID();
		newProxy.subarchId = "fakevision";
		newProxy.probExists = randomProbGenerator.nextFloat();

		newProxy.features = createNewRandomFeatures();

		return newProxy;
	}

	private Feature[] createNewRandomFeatures() {
		int nbFeats = randomProbGenerator.nextInt(4);

		Vector<Feature> features = new Vector<Feature>();
		
		for (int i = 0 ; i < nbFeats ; i++) {
			Feature feat = new Feature();
			feat.featlabel = ("Feature "+ i);

			int nbAlternatives = randomProbGenerator.nextInt(4);
			feat.alternativeValues = new FeatureValue[nbAlternatives];
			
			for (int j = 0; j < nbAlternatives; j++) {
				feat.alternativeValues[j] = new StringValue(0, "value"+j);
			}
			
			features.add(feat);
		
		}
		
		Feature[] featuresArray = new Feature[features.size()];
		featuresArray = features.toArray(featuresArray);
		
		return featuresArray;
	}
}
