package cast.cdl;


/**
* cast/cdl/OperationModeHelper.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from CAST.idl
* Freitag, 13. MŠrz 2009 17.31 Uhr CET
*/


/*
    * Enum indicating how a working memory operation should be
    * performed.
    */
abstract public class OperationModeHelper
{
  private static String  _id = "IDL:cast/cdl/OperationMode:1.0";

  public static void insert (org.omg.CORBA.Any a, cast.cdl.OperationMode that)
  {
    org.omg.CORBA.portable.OutputStream out = a.create_output_stream ();
    a.type (type ());
    write (out, that);
    a.read_value (out.create_input_stream (), type ());
  }

  public static cast.cdl.OperationMode extract (org.omg.CORBA.Any a)
  {
    return read (a.create_input_stream ());
  }

  private static org.omg.CORBA.TypeCode __typeCode = null;
  synchronized public static org.omg.CORBA.TypeCode type ()
  {
    if (__typeCode == null)
    {
      __typeCode = org.omg.CORBA.ORB.init ().create_enum_tc (cast.cdl.OperationModeHelper.id (), "OperationMode", new String[] { "BLOCKING", "NON_BLOCKING"} );
    }
    return __typeCode;
  }

  public static String id ()
  {
    return _id;
  }

  public static cast.cdl.OperationMode read (org.omg.CORBA.portable.InputStream istream)
  {
    return cast.cdl.OperationMode.from_int (istream.read_long ());
  }

  public static void write (org.omg.CORBA.portable.OutputStream ostream, cast.cdl.OperationMode value)
  {
    ostream.write_long (value.value ());
  }

}
