// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __FrameworkBasics_hh__
#define __FrameworkBasics_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_FrameworkBasics
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_FrameworkBasics
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_FrameworkBasics
#endif






#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE FrameworkBasics

_CORBA_MODULE_BEG

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_FrameworkProcessID;

  typedef char* FrameworkProcessID;
  typedef ::CORBA::String_var FrameworkProcessID_var;
  typedef ::CORBA::String_out FrameworkProcessID_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_FrameworkConnectionID;

  typedef char* FrameworkConnectionID;
  typedef ::CORBA::String_var FrameworkConnectionID_var;
  typedef ::CORBA::String_out FrameworkConnectionID_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_FrameworkConnectionDataType;

  typedef char* FrameworkConnectionDataType;
  typedef ::CORBA::String_var FrameworkConnectionDataType_var;
  typedef ::CORBA::String_out FrameworkConnectionDataType_out;

  enum FrameworkConnectionType { PUSH_CONNECTION, PULL_CONNECTION /*, __max_FrameworkConnectionType=0xffffffff */ };
  typedef FrameworkConnectionType& FrameworkConnectionType_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_FrameworkConnectionType;

  enum ProcessLanguage { CPP_PROCESS, JAVA_PROCESS /*, __max_ProcessLanguage=0xffffffff */ };
  typedef ProcessLanguage& ProcessLanguage_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_ProcessLanguage;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_StringSeq;

  class StringSeq_var;

  class StringSeq : public _CORBA_Unbounded_Sequence_String {
  public:
    typedef StringSeq_var _var_type;
    inline StringSeq() {}
    inline StringSeq(const StringSeq& _s)
      : _CORBA_Unbounded_Sequence_String(_s) {}

    inline StringSeq(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence_String(_max) {}
    inline StringSeq(_CORBA_ULong _max, _CORBA_ULong _len, char** _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence_String(_max, _len, _val, _rel) {}

  

    inline StringSeq& operator = (const StringSeq& _s) {
      _CORBA_Unbounded_Sequence_String::operator=(_s);
      return *this;
    }
  };

  class StringSeq_out;

  class StringSeq_var {
  public:
    inline StringSeq_var() : _pd_seq(0) {}
    inline StringSeq_var(StringSeq* _s) : _pd_seq(_s) {}
    inline StringSeq_var(const StringSeq_var& _s) {
      if( _s._pd_seq )  _pd_seq = new StringSeq(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~StringSeq_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline StringSeq_var& operator = (StringSeq* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline StringSeq_var& operator = (const StringSeq_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new StringSeq;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline _CORBA_String_element operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline StringSeq* operator -> () { return _pd_seq; }
    inline const StringSeq* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator StringSeq& () const { return *_pd_seq; }
#else
    inline operator const StringSeq& () const { return *_pd_seq; }
    inline operator StringSeq& () { return *_pd_seq; }
#endif
      
    inline const StringSeq& in() const { return *_pd_seq; }
    inline StringSeq&       inout()    { return *_pd_seq; }
    inline StringSeq*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline StringSeq* _retn() { StringSeq* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class StringSeq_out;
    
  private:
    StringSeq* _pd_seq;
  };

  class StringSeq_out {
  public:
    inline StringSeq_out(StringSeq*& _s) : _data(_s) { _data = 0; }
    inline StringSeq_out(StringSeq_var& _s)
      : _data(_s._pd_seq) { _s = (StringSeq*) 0; }
    inline StringSeq_out(const StringSeq_out& _s) : _data(_s._data) {}
    inline StringSeq_out& operator = (const StringSeq_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline StringSeq_out& operator = (StringSeq* _s) {
      _data = _s;
      return *this;
    }
    inline operator StringSeq*&()  { return _data; }
    inline StringSeq*& ptr()       { return _data; }
    inline StringSeq* operator->() { return _data; }

    inline _CORBA_String_element operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    StringSeq*& _data;

  private:
    StringSeq_out();
    StringSeq_out& operator=(const StringSeq_var&);
  };

  struct ProcessConfigurationMap {
    typedef _CORBA_ConstrType_Variable_Var<ProcessConfigurationMap> _var_type;

    
    StringSeq m_keys;

    StringSeq m_values;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef ProcessConfigurationMap::_var_type ProcessConfigurationMap_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< ProcessConfigurationMap,ProcessConfigurationMap_var > ProcessConfigurationMap_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_ProcessConfigurationMap;

  struct ProcessDescription {
    typedef _CORBA_ConstrType_Variable_Var<ProcessDescription> _var_type;

    
    ::CORBA::String_member m_processName;

    ::CORBA::String_member m_className;

    ProcessLanguage m_language;

    ::CORBA::String_member m_hostName;

    ProcessConfigurationMap m_configuration;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef ProcessDescription::_var_type ProcessDescription_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< ProcessDescription,ProcessDescription_var > ProcessDescription_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_ProcessDescription;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_DescriptionList;

  class DescriptionList_var;

  class DescriptionList : public _CORBA_Unbounded_Sequence< ProcessDescription >  {
  public:
    typedef DescriptionList_var _var_type;
    inline DescriptionList() {}
    inline DescriptionList(const DescriptionList& _s)
      : _CORBA_Unbounded_Sequence< ProcessDescription > (_s) {}

    inline DescriptionList(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence< ProcessDescription > (_max) {}
    inline DescriptionList(_CORBA_ULong _max, _CORBA_ULong _len, ProcessDescription* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence< ProcessDescription > (_max, _len, _val, _rel) {}

  

    inline DescriptionList& operator = (const DescriptionList& _s) {
      _CORBA_Unbounded_Sequence< ProcessDescription > ::operator=(_s);
      return *this;
    }
  };

  class DescriptionList_out;

  class DescriptionList_var {
  public:
    inline DescriptionList_var() : _pd_seq(0) {}
    inline DescriptionList_var(DescriptionList* _s) : _pd_seq(_s) {}
    inline DescriptionList_var(const DescriptionList_var& _s) {
      if( _s._pd_seq )  _pd_seq = new DescriptionList(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~DescriptionList_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline DescriptionList_var& operator = (DescriptionList* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline DescriptionList_var& operator = (const DescriptionList_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new DescriptionList;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline ProcessDescription& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline DescriptionList* operator -> () { return _pd_seq; }
    inline const DescriptionList* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator DescriptionList& () const { return *_pd_seq; }
#else
    inline operator const DescriptionList& () const { return *_pd_seq; }
    inline operator DescriptionList& () { return *_pd_seq; }
#endif
      
    inline const DescriptionList& in() const { return *_pd_seq; }
    inline DescriptionList&       inout()    { return *_pd_seq; }
    inline DescriptionList*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline DescriptionList* _retn() { DescriptionList* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class DescriptionList_out;
    
  private:
    DescriptionList* _pd_seq;
  };

  class DescriptionList_out {
  public:
    inline DescriptionList_out(DescriptionList*& _s) : _data(_s) { _data = 0; }
    inline DescriptionList_out(DescriptionList_var& _s)
      : _data(_s._pd_seq) { _s = (DescriptionList*) 0; }
    inline DescriptionList_out(const DescriptionList_out& _s) : _data(_s._data) {}
    inline DescriptionList_out& operator = (const DescriptionList_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline DescriptionList_out& operator = (DescriptionList* _s) {
      _data = _s;
      return *this;
    }
    inline operator DescriptionList*&()  { return _data; }
    inline DescriptionList*& ptr()       { return _data; }
    inline DescriptionList* operator->() { return _data; }

    inline ProcessDescription& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    DescriptionList*& _data;

  private:
    DescriptionList_out();
    DescriptionList_out& operator=(const DescriptionList_var&);
  };

  struct ProcessConnection {
    typedef _CORBA_ConstrType_Variable_Var<ProcessConnection> _var_type;

    
    DescriptionList m_senders;

    DescriptionList m_receivers;

    FrameworkConnectionType m_connectionType;

    ::CORBA::String_member m_dataType;

    ::CORBA::String_member m_connectionID;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef ProcessConnection::_var_type ProcessConnection_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< ProcessConnection,ProcessConnection_var > ProcessConnection_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_ProcessConnection;

  struct BALTTime {
    typedef _CORBA_ConstrType_Fix_Var<BALTTime> _var_type;

    
    ::CORBA::Long m_s;

    ::CORBA::Long m_us;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef BALTTime::_var_type BALTTime_var;

  typedef BALTTime& BALTTime_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_BALTTime;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_ConnectionGraph;

  class ConnectionGraph_var;

  class ConnectionGraph : public _CORBA_Unbounded_Sequence< ProcessConnection >  {
  public:
    typedef ConnectionGraph_var _var_type;
    inline ConnectionGraph() {}
    inline ConnectionGraph(const ConnectionGraph& _s)
      : _CORBA_Unbounded_Sequence< ProcessConnection > (_s) {}

    inline ConnectionGraph(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence< ProcessConnection > (_max) {}
    inline ConnectionGraph(_CORBA_ULong _max, _CORBA_ULong _len, ProcessConnection* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence< ProcessConnection > (_max, _len, _val, _rel) {}

  

    inline ConnectionGraph& operator = (const ConnectionGraph& _s) {
      _CORBA_Unbounded_Sequence< ProcessConnection > ::operator=(_s);
      return *this;
    }
  };

  class ConnectionGraph_out;

  class ConnectionGraph_var {
  public:
    inline ConnectionGraph_var() : _pd_seq(0) {}
    inline ConnectionGraph_var(ConnectionGraph* _s) : _pd_seq(_s) {}
    inline ConnectionGraph_var(const ConnectionGraph_var& _s) {
      if( _s._pd_seq )  _pd_seq = new ConnectionGraph(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~ConnectionGraph_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline ConnectionGraph_var& operator = (ConnectionGraph* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline ConnectionGraph_var& operator = (const ConnectionGraph_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new ConnectionGraph;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline ProcessConnection& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline ConnectionGraph* operator -> () { return _pd_seq; }
    inline const ConnectionGraph* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator ConnectionGraph& () const { return *_pd_seq; }
#else
    inline operator const ConnectionGraph& () const { return *_pd_seq; }
    inline operator ConnectionGraph& () { return *_pd_seq; }
#endif
      
    inline const ConnectionGraph& in() const { return *_pd_seq; }
    inline ConnectionGraph&       inout()    { return *_pd_seq; }
    inline ConnectionGraph*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline ConnectionGraph* _retn() { ConnectionGraph* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class ConnectionGraph_out;
    
  private:
    ConnectionGraph* _pd_seq;
  };

  class ConnectionGraph_out {
  public:
    inline ConnectionGraph_out(ConnectionGraph*& _s) : _data(_s) { _data = 0; }
    inline ConnectionGraph_out(ConnectionGraph_var& _s)
      : _data(_s._pd_seq) { _s = (ConnectionGraph*) 0; }
    inline ConnectionGraph_out(const ConnectionGraph_out& _s) : _data(_s._data) {}
    inline ConnectionGraph_out& operator = (const ConnectionGraph_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline ConnectionGraph_out& operator = (ConnectionGraph* _s) {
      _data = _s;
      return *this;
    }
    inline operator ConnectionGraph*&()  { return _data; }
    inline ConnectionGraph*& ptr()       { return _data; }
    inline ConnectionGraph* operator->() { return _data; }

    inline ProcessConnection& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    ConnectionGraph*& _data;

  private:
    ConnectionGraph_out();
    ConnectionGraph_out& operator=(const ConnectionGraph_var&);
  };

#ifndef __FrameworkBasics_mFrameworkProcessManager__
#define __FrameworkBasics_mFrameworkProcessManager__

  class FrameworkProcessManager;
  class _objref_FrameworkProcessManager;
  class _impl_FrameworkProcessManager;
  
  typedef _objref_FrameworkProcessManager* FrameworkProcessManager_ptr;
  typedef FrameworkProcessManager_ptr FrameworkProcessManagerRef;

  class FrameworkProcessManager_Helper {
  public:
    typedef FrameworkProcessManager_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_FrameworkProcessManager, FrameworkProcessManager_Helper> FrameworkProcessManager_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_FrameworkProcessManager,FrameworkProcessManager_Helper > FrameworkProcessManager_out;

#endif

  // interface FrameworkProcessManager
  class FrameworkProcessManager {
  public:
    // Declarations for this interface type.
    typedef FrameworkProcessManager_ptr _ptr_type;
    typedef FrameworkProcessManager_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    
  };

  class _objref_FrameworkProcessManager :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    void createGraph(const ConnectionGraph& graph);
    void createRemoteConnections();
    void connectGraph();
    void startGraph();
    void runGraph();
    void stopGraph();
    void synchroniseWatches();

    inline _objref_FrameworkProcessManager()  { _PR_setobj(0); }  // nil
    _objref_FrameworkProcessManager(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_FrameworkProcessManager();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_FrameworkProcessManager(const _objref_FrameworkProcessManager&);
    _objref_FrameworkProcessManager& operator = (const _objref_FrameworkProcessManager&);
    // not implemented

    friend class FrameworkProcessManager;
  };

  class _pof_FrameworkProcessManager : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_FrameworkProcessManager() : _OMNI_NS(proxyObjectFactory)(FrameworkProcessManager::_PD_repoId) {}
    virtual ~_pof_FrameworkProcessManager();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_FrameworkProcessManager :
    public virtual omniServant
  {
  public:
    virtual ~_impl_FrameworkProcessManager();

    virtual void createGraph(const ConnectionGraph& graph) = 0;
    virtual void createRemoteConnections() = 0;
    virtual void connectGraph() = 0;
    virtual void startGraph() = 0;
    virtual void runGraph() = 0;
    virtual void stopGraph() = 0;
    virtual void synchroniseWatches() = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_FrameworkProcessManager;

_CORBA_MODULE_END



_CORBA_MODULE POA_FrameworkBasics
_CORBA_MODULE_BEG

  class FrameworkProcessManager :
    public virtual FrameworkBasics::_impl_FrameworkProcessManager,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~FrameworkProcessManager();

    inline ::FrameworkBasics::FrameworkProcessManager_ptr _this() {
      return (::FrameworkBasics::FrameworkProcessManager_ptr) _do_this(::FrameworkBasics::FrameworkProcessManager::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_FrameworkBasics
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

inline void operator >>=(FrameworkBasics::FrameworkConnectionType _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (FrameworkBasics::FrameworkConnectionType& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= FrameworkBasics::PULL_CONNECTION) {
    _e = (FrameworkBasics::FrameworkConnectionType) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, FrameworkBasics::FrameworkConnectionType _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, FrameworkBasics::FrameworkConnectionType& _s);

inline void operator >>=(FrameworkBasics::ProcessLanguage _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (FrameworkBasics::ProcessLanguage& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= FrameworkBasics::JAVA_PROCESS) {
    _e = (FrameworkBasics::ProcessLanguage) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, FrameworkBasics::ProcessLanguage _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, FrameworkBasics::ProcessLanguage& _s);

void operator<<=(::CORBA::Any& _a, const FrameworkBasics::StringSeq& _s);
void operator<<=(::CORBA::Any& _a, FrameworkBasics::StringSeq* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, FrameworkBasics::StringSeq*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const FrameworkBasics::StringSeq*& _sp);

extern void operator<<=(::CORBA::Any& _a, const FrameworkBasics::ProcessConfigurationMap& _s);
extern void operator<<=(::CORBA::Any& _a, FrameworkBasics::ProcessConfigurationMap* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, FrameworkBasics::ProcessConfigurationMap*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const FrameworkBasics::ProcessConfigurationMap*& _sp);

extern void operator<<=(::CORBA::Any& _a, const FrameworkBasics::ProcessDescription& _s);
extern void operator<<=(::CORBA::Any& _a, FrameworkBasics::ProcessDescription* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, FrameworkBasics::ProcessDescription*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const FrameworkBasics::ProcessDescription*& _sp);

void operator<<=(::CORBA::Any& _a, const FrameworkBasics::DescriptionList& _s);
void operator<<=(::CORBA::Any& _a, FrameworkBasics::DescriptionList* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, FrameworkBasics::DescriptionList*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const FrameworkBasics::DescriptionList*& _sp);

extern void operator<<=(::CORBA::Any& _a, const FrameworkBasics::ProcessConnection& _s);
extern void operator<<=(::CORBA::Any& _a, FrameworkBasics::ProcessConnection* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, FrameworkBasics::ProcessConnection*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const FrameworkBasics::ProcessConnection*& _sp);

extern void operator<<=(::CORBA::Any& _a, const FrameworkBasics::BALTTime& _s);
extern void operator<<=(::CORBA::Any& _a, FrameworkBasics::BALTTime* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, FrameworkBasics::BALTTime*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const FrameworkBasics::BALTTime*& _sp);

void operator<<=(::CORBA::Any& _a, const FrameworkBasics::ConnectionGraph& _s);
void operator<<=(::CORBA::Any& _a, FrameworkBasics::ConnectionGraph* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, FrameworkBasics::ConnectionGraph*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const FrameworkBasics::ConnectionGraph*& _sp);

void operator<<=(::CORBA::Any& _a, FrameworkBasics::FrameworkProcessManager_ptr _s);
void operator<<=(::CORBA::Any& _a, FrameworkBasics::FrameworkProcessManager_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, FrameworkBasics::FrameworkProcessManager_ptr& _s);



inline void
FrameworkBasics::FrameworkProcessManager::_marshalObjRef(::FrameworkBasics::FrameworkProcessManager_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_FrameworkBasics
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_FrameworkBasics
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_FrameworkBasics
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_FrameworkBasics
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_FrameworkBasics
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_FrameworkBasics
#endif

#endif  // __FrameworkBasics_hh__

