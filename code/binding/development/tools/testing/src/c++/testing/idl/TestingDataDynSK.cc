// This file is generated by omniidl (C++ backend) - omniORB_4_1. Do not edit.

#include "TestingData.hh"

OMNI_USING_NAMESPACE(omni)

static const char* _0RL_dyn_library_version = omniORB_4_1_dyn;

static ::CORBA::TypeCode::_Tracker _0RL_tcTrack(__FILE__);

static const char* _0RL_enumMember_TestingData_mTestingCommandStatus[] = { "ISSUED", "COMPLETED" };
static CORBA::TypeCode_ptr _0RL_tc_TestingData_mTestingCommandStatus = CORBA::TypeCode::PR_enum_tc("IDL:TestingData/TestingCommandStatus:1.0", "TestingCommandStatus", _0RL_enumMember_TestingData_mTestingCommandStatus, 2, &_0RL_tcTrack);
#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace TestingData { 
  const ::CORBA::TypeCode_ptr _tc_TestingCommandStatus = _0RL_tc_TestingData_mTestingCommandStatus;
} 
#else
const ::CORBA::TypeCode_ptr TestingData::_tc_TestingCommandStatus = _0RL_tc_TestingData_mTestingCommandStatus;
#endif

static CORBA::PR_structMember _0RL_structmember_TestingData_mTestingCommand[] = {
  {"m_status", _0RL_tc_TestingData_mTestingCommandStatus},
  {"m_command", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)}
};

#ifdef _0RL_tc_TestingData_mTestingCommand
#  undef _0RL_tc_TestingData_mTestingCommand
#endif
static CORBA::TypeCode_ptr _0RL_tc_TestingData_mTestingCommand = CORBA::TypeCode::PR_struct_tc("IDL:TestingData/TestingCommand:1.0", "TestingCommand", _0RL_structmember_TestingData_mTestingCommand, 2, &_0RL_tcTrack);

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace TestingData { 
  const ::CORBA::TypeCode_ptr _tc_TestingCommand = _0RL_tc_TestingData_mTestingCommand;
} 
#else
const ::CORBA::TypeCode_ptr TestingData::_tc_TestingCommand = _0RL_tc_TestingData_mTestingCommand;
#endif


static void _0RL_TestingData_mTestingCommandStatus_marshal_fn(cdrStream& _s, void* _v)
{
  TestingData::TestingCommandStatus* _p = (TestingData::TestingCommandStatus*)_v;
  *_p >>= _s;
}
static void _0RL_TestingData_mTestingCommandStatus_unmarshal_fn(cdrStream& _s, void*& _v)
{
  TestingData::TestingCommandStatus* _p = (TestingData::TestingCommandStatus*)_v;
  *_p <<= _s;
}

void operator<<=(::CORBA::Any& _a, TestingData::TestingCommandStatus _s)
{
  _a.PR_insert(_0RL_tc_TestingData_mTestingCommandStatus,
               _0RL_TestingData_mTestingCommandStatus_marshal_fn,
               &_s);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, TestingData::TestingCommandStatus& _s)
{
  return _a.PR_extract(_0RL_tc_TestingData_mTestingCommandStatus,
                       _0RL_TestingData_mTestingCommandStatus_unmarshal_fn,
                       &_s);
}

static void _0RL_TestingData_mTestingCommand_marshal_fn(cdrStream& _s, void* _v)
{
  TestingData::TestingCommand* _p = (TestingData::TestingCommand*)_v;
  *_p >>= _s;
}
static void _0RL_TestingData_mTestingCommand_unmarshal_fn(cdrStream& _s, void*& _v)
{
  TestingData::TestingCommand* _p = new TestingData::TestingCommand;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_TestingData_mTestingCommand_destructor_fn(void* _v)
{
  TestingData::TestingCommand* _p = (TestingData::TestingCommand*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const TestingData::TestingCommand& _s)
{
  TestingData::TestingCommand* _p = new TestingData::TestingCommand(_s);
  _a.PR_insert(_0RL_tc_TestingData_mTestingCommand,
               _0RL_TestingData_mTestingCommand_marshal_fn,
               _0RL_TestingData_mTestingCommand_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, TestingData::TestingCommand* _sp)
{
  _a.PR_insert(_0RL_tc_TestingData_mTestingCommand,
               _0RL_TestingData_mTestingCommand_marshal_fn,
               _0RL_TestingData_mTestingCommand_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, TestingData::TestingCommand*& _sp)
{
  return _a >>= (const TestingData::TestingCommand*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const TestingData::TestingCommand*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_TestingData_mTestingCommand,
                    _0RL_TestingData_mTestingCommand_unmarshal_fn,
                    _0RL_TestingData_mTestingCommand_marshal_fn,
                    _0RL_TestingData_mTestingCommand_destructor_fn,
                    _v)) {
    _sp = (const TestingData::TestingCommand*)_v;
    return 1;
  }
  return 0;
}

