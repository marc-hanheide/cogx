//=================================================================
// Copyright (C) 2006 Geert-Jan M. Kruijff (gj@dfki.de)
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public License
// as published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
// 02111-1307, USA.
//=================================================================

//=================================================================
// PACKAGE DEFINITION 
//=================================================================

package org.cognitivesystems.interconnectivity.data;

//=================================================================
// IMPORTS
//=================================================================

//-----------------------------------------------------------------
// JAVA IMPORTS
//-----------------------------------------------------------------

import java.util.Vector;

//=================================================================
// CLASS DOCUMENTATION 
//=================================================================

/** 

The class <b>SyncProcess</b> implements a data structure for a 
information about a process, given in the synchronization specification. 

@version 061018 (started 061018) 
@author  Geert-Jan M. Kruijff (gj@dfki.de) 

*/ 

public class SyncProcess { 

    //=================================================================
    // GLOBAL VARIABLES
    //=================================================================

	// Data-driven process
	public final static int PROCESSTYPE_DD = 0;
	// Goal-driven process
	public final static int PROCESSTYPE_GD = 1;
	
	// Explicitly indicated start and end state
	private boolean isIndicatedStartState = false;
	private boolean isIndicatedEndState = false;
	
	// Name of the process
	private String processName; 
	// Type of the process (data-driven, goal-driven)
	private int processType;
	// Vector of types of data generated by the process
	private Vector dataTypes;

    //=================================================================
    // CONSTRUCTOR METHODS
    //=================================================================
	
	public SyncProcess () { 
		init();
	} // end constructor
	
	public SyncProcess (String name) { 
		init();
		processName = name;
	} // end constructor
	
	public SyncProcess (String name, int type) {
		init();
		processName = name;
		processType = type;
	} // end constructor
	
	private void init() { 
		processName="unknown";
		processType=-1;
		dataTypes = new Vector();
	} // end init
	
    //=================================================================
    // ACCESSOR METHODS
    //=================================================================
	
	/** Adds a data type to the list of types generated by the process */
	public void addDataType (String dt) { dataTypes.addElement(dt); } 

	/** Returns a boolean indicating whether the given data type is 
		generated by the process. */
	public boolean generatesDataType (String dt) { return dataTypes.contains(dt); }
	
	/** Returns the data types of the process. */
	public Vector getDataTypes () { return dataTypes; }
	
	/** Returns the name of the process */
	public String getName () { return processName; }

	/** Returns the type of the process. See also the class public constants */ 
	public int getType () { return processType; }

	/** Sets the name of the process */ 
	public void setName (String n) { processName = n; }

	/** Sets the data type of the process. See also the class public constants. */
	public void setType (int t) { processType = t; }

	public boolean isIndicatedEndState() {return isIndicatedEndState ; }
	
	public void setAsIndicatedEndState() {isIndicatedEndState = true ; }

	public boolean isIndicatedStartState() {return isIndicatedStartState ; }
	
	public void setAsIndicatedStartState() {isIndicatedStartState = true ; }
} // end class