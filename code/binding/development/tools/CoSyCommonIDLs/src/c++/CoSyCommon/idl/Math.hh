// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __Math_hh__
#define __Math_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_Math
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_Math
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_Math
#endif






#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE Math

_CORBA_MODULE_BEG

  struct Vector2D {
    typedef _CORBA_ConstrType_Fix_Var<Vector2D> _var_type;

    
    ::CORBA::Float m_x;

    ::CORBA::Float m_y;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef Vector2D::_var_type Vector2D_var;

  typedef Vector2D& Vector2D_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_Vector2D;

  struct Vector3D {
    typedef _CORBA_ConstrType_Fix_Var<Vector3D> _var_type;

    
    ::CORBA::Float m_x;

    ::CORBA::Float m_y;

    ::CORBA::Float m_z;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef Vector3D::_var_type Vector3D_var;

  typedef Vector3D& Vector3D_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_Vector3D;

  struct Vector3DWithConfidence {
    typedef _CORBA_ConstrType_Fix_Var<Vector3DWithConfidence> _var_type;

    
    Vector3D m_vector;

    ::CORBA::Float m_confidence;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef Vector3DWithConfidence::_var_type Vector3DWithConfidence_var;

  typedef Vector3DWithConfidence& Vector3DWithConfidence_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_Vector3DWithConfidence;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_Vector3DWithConfidenceSeq;

  class Vector3DWithConfidenceSeq_var;

  class Vector3DWithConfidenceSeq : public _CORBA_Unbounded_Sequence< Vector3DWithConfidence >  {
  public:
    typedef Vector3DWithConfidenceSeq_var _var_type;
    inline Vector3DWithConfidenceSeq() {}
    inline Vector3DWithConfidenceSeq(const Vector3DWithConfidenceSeq& _s)
      : _CORBA_Unbounded_Sequence< Vector3DWithConfidence > (_s) {}

    inline Vector3DWithConfidenceSeq(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence< Vector3DWithConfidence > (_max) {}
    inline Vector3DWithConfidenceSeq(_CORBA_ULong _max, _CORBA_ULong _len, Vector3DWithConfidence* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence< Vector3DWithConfidence > (_max, _len, _val, _rel) {}

  

    inline Vector3DWithConfidenceSeq& operator = (const Vector3DWithConfidenceSeq& _s) {
      _CORBA_Unbounded_Sequence< Vector3DWithConfidence > ::operator=(_s);
      return *this;
    }
  };

  class Vector3DWithConfidenceSeq_out;

  class Vector3DWithConfidenceSeq_var {
  public:
    inline Vector3DWithConfidenceSeq_var() : _pd_seq(0) {}
    inline Vector3DWithConfidenceSeq_var(Vector3DWithConfidenceSeq* _s) : _pd_seq(_s) {}
    inline Vector3DWithConfidenceSeq_var(const Vector3DWithConfidenceSeq_var& _s) {
      if( _s._pd_seq )  _pd_seq = new Vector3DWithConfidenceSeq(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~Vector3DWithConfidenceSeq_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline Vector3DWithConfidenceSeq_var& operator = (Vector3DWithConfidenceSeq* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline Vector3DWithConfidenceSeq_var& operator = (const Vector3DWithConfidenceSeq_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new Vector3DWithConfidenceSeq;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline Vector3DWithConfidence& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline Vector3DWithConfidenceSeq* operator -> () { return _pd_seq; }
    inline const Vector3DWithConfidenceSeq* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator Vector3DWithConfidenceSeq& () const { return *_pd_seq; }
#else
    inline operator const Vector3DWithConfidenceSeq& () const { return *_pd_seq; }
    inline operator Vector3DWithConfidenceSeq& () { return *_pd_seq; }
#endif
      
    inline const Vector3DWithConfidenceSeq& in() const { return *_pd_seq; }
    inline Vector3DWithConfidenceSeq&       inout()    { return *_pd_seq; }
    inline Vector3DWithConfidenceSeq*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline Vector3DWithConfidenceSeq* _retn() { Vector3DWithConfidenceSeq* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class Vector3DWithConfidenceSeq_out;
    
  private:
    Vector3DWithConfidenceSeq* _pd_seq;
  };

  class Vector3DWithConfidenceSeq_out {
  public:
    inline Vector3DWithConfidenceSeq_out(Vector3DWithConfidenceSeq*& _s) : _data(_s) { _data = 0; }
    inline Vector3DWithConfidenceSeq_out(Vector3DWithConfidenceSeq_var& _s)
      : _data(_s._pd_seq) { _s = (Vector3DWithConfidenceSeq*) 0; }
    inline Vector3DWithConfidenceSeq_out(const Vector3DWithConfidenceSeq_out& _s) : _data(_s._data) {}
    inline Vector3DWithConfidenceSeq_out& operator = (const Vector3DWithConfidenceSeq_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline Vector3DWithConfidenceSeq_out& operator = (Vector3DWithConfidenceSeq* _s) {
      _data = _s;
      return *this;
    }
    inline operator Vector3DWithConfidenceSeq*&()  { return _data; }
    inline Vector3DWithConfidenceSeq*& ptr()       { return _data; }
    inline Vector3DWithConfidenceSeq* operator->() { return _data; }

    inline Vector3DWithConfidence& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    Vector3DWithConfidenceSeq*& _data;

  private:
    Vector3DWithConfidenceSeq_out();
    Vector3DWithConfidenceSeq_out& operator=(const Vector3DWithConfidenceSeq_var&);
  };

  struct Pose3D {
    typedef _CORBA_ConstrType_Fix_Var<Pose3D> _var_type;

    
    Vector3D m_position;

    Vector3D m_orientation;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef Pose3D::_var_type Pose3D_var;

  typedef Pose3D& Pose3D_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_Pose3D;

_CORBA_MODULE_END



_CORBA_MODULE POA_Math
_CORBA_MODULE_BEG

_CORBA_MODULE_END



_CORBA_MODULE OBV_Math
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

extern void operator<<=(::CORBA::Any& _a, const Math::Vector2D& _s);
extern void operator<<=(::CORBA::Any& _a, Math::Vector2D* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, Math::Vector2D*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const Math::Vector2D*& _sp);

extern void operator<<=(::CORBA::Any& _a, const Math::Vector3D& _s);
extern void operator<<=(::CORBA::Any& _a, Math::Vector3D* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, Math::Vector3D*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const Math::Vector3D*& _sp);

extern void operator<<=(::CORBA::Any& _a, const Math::Vector3DWithConfidence& _s);
extern void operator<<=(::CORBA::Any& _a, Math::Vector3DWithConfidence* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, Math::Vector3DWithConfidence*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const Math::Vector3DWithConfidence*& _sp);

void operator<<=(::CORBA::Any& _a, const Math::Vector3DWithConfidenceSeq& _s);
void operator<<=(::CORBA::Any& _a, Math::Vector3DWithConfidenceSeq* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, Math::Vector3DWithConfidenceSeq*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const Math::Vector3DWithConfidenceSeq*& _sp);

extern void operator<<=(::CORBA::Any& _a, const Math::Pose3D& _s);
extern void operator<<=(::CORBA::Any& _a, Math::Pose3D* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, Math::Pose3D*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const Math::Pose3D*& _sp);





#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_Math
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_Math
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_Math
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_Math
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_Math
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_Math
#endif

#endif  // __Math_hh__

