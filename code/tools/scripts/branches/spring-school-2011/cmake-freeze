#!/bin/bash
# @author: Marko Mahnič
# @created: December 2010
#
# This script will create an initial cache file for cmake from an
# existing CMakeLists.txt. The script will search for CMakeLists.txt
# in the current directory and in the directories BUILD, Build and
# build. The results will be printed to standard output.
#
# Only the variables of type BOOL whose name contains BUILD
# are processed.
#
# Example:
#    cd BUILD
#    ../tools/scripts/freezecmake > frozen_settings.txt

# Absolute path and directory
SCRIPT=$(readlink -f $0)
SCRIPTDIR=$(dirname $SCRIPT)

if [ -f CMakeCache.txt ]; then
   fnin=CMakeCache.txt
else 
   for bdir in BUILD Build build ; do
      if [ -f $bdir/CMakeCache.txt ]; then
         fnin=$bdir/CMakeCache.txt
         break
      fi
   done
fi

if [ -z $fnin ]; then
   echo CMakeCache.txt not found
   exit 1
fi

echo "# This is a CMake initial cache file, generated by freezecmake."
echo "# Use:"
echo "#  mkdir BUILD"
echo "#  cd BUILD"
echo "#  ccmake -C <path/to/thisfile>  .."
echo "# Note: -C works only if BUILD/CMakeCache.txt doesn't exist."
echo "#"
echo "# Alternatively you can use tools/scripts/cmake-apply which"
echo "# also works with an existing CMakeCache.txt."


mode="comment"
if [ "$mode" == "nocomment" ]; then
   # Without descriptions
   grep "BUILD.*:BOOL=" $fnin | \
      sed -e "s/\\([^:]*\\):\\([^=]*\\)=\\(.*\\)$/set(\1 \3 CACHE \2 \"\")/"
else
   # With descriptions
   grep -B 1 "BUILD.*:BOOL=" $fnin | \
      tr "\"" "\'" | \
      sed -e "/^--/d" \
      -e "/\\/\\//N;""s/\\/\\/ *\\(.*\\)\\n\\([^:]*\\):\\([^=]*\\)=\\(.*\\)$/set(\2 \4 CACHE \3 \"\1\")/" \
      -e "/^$/d" \
      -e "s/\\([^:]*\\):\\([^=]*\\)=\\(.*\\)$/set(\1 \3 CACHE \2 \"\")/"
   # GREP explanation:
   #    when a variable definition is encountered:
   #       - print preceding line (B 1)
   #       - print line
   #    In this case grep will add '--' after every match so we delete it in sed
   #
   # SED explanation:
   #    when line starts with --
   #       delete it
   #    when line starts with //
   #       merge next line (N)
   #       extract: '// ' (comment) '\n' (variable) ':' (type) '=' (value)
   #       replace with: 'set(' variable value 'CACHE' type '"' comment '"'
   #    The last two expression will handle entries without comments and empty lines
fi

