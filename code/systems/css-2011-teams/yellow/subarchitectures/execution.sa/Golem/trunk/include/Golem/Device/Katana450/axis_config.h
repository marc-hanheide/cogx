#ifndef _AXIS_CONFIG_H_
#define _AXIS_CONFIG_H_

enum EAxisFsmState
{
	//AXIS_STATE_NOP,
	AXIS_STATE_SET_ENCODER,
	AXIS_STATE_RELEASED,
	AXIS_STATE_HOLDING,
	AXIS_STATE_POLYSCALE_ERROR,
	AXIS_STATE_MOVEBUFFER_ERROR,
	AXIS_STATE_MOVING_P2P,
	AXIS_STATE_MOVING_SPLINE,
	AXIS_STATE_COLLIDED,
	AXIS_STATE_COMMUNICATON_ERROR,
	AXIS_STATE_STEP,
	AXIS_STATE_CALIBRATING
};

enum EAxisFsmCommand
{
	AXIS_CMD_NOP,
	AXIS_CMD_SET_ENCODER,
	AXIS_CMD_RELEASE,
	AXIS_CMD_HOLD,
	AXIS_CMD_MOVE_P2P,
	AXIS_CMD_MOVE_SPLINE,
	AXIS_CMD_STEP,
	AXIS_CMD_CALIBRATE
};

// size has to be more than 6 to allow polyP2P movements (consisting of 6 polynomials
// and started after last one) to get into the move buffer before the last movement
// has finished. --JHA
static const unsigned char MOVE_BUFFER_SIZE = 12;

enum EMoveBufferCmd
{
	MOVE_BUFFER_CMD_NOP,
	MOVE_BUFFER_CMD_STORE,
	MOVE_BUFFER_CMD_FLUSH
};

enum EAnalysisCmd
{
	ANALYSIS_CMD_START,
	ANALYSIS_CMD_GET,
	ANALYSIS_CMD_CONFIG
};

enum ECurrentBufferChannel
{
	CHANNEL_CURRENT_DUTY,
	CHANNEL_CURRENT,
	CHANNEL_DESIRED_CURRENT,
	CHANNEL_DRIVE,
	CHANNEL_DEBUG_1,
	CHANNEL_DEBUG_2,
	CHANNEL_DEBUG_3 // usually velocity
};

enum EStepType
{
	STEP_TYPE_DRIVE,
	STEP_TYPE_CURRENT 
};

enum EControllerType
{
	CONTROLLER_TYPE_DRIVE_V1,
	CONTROLLER_TYPE_NONE,
	CONTROLLER_TYPE_CURRENT_MEASURED,
	CONTROLLER_TYPE_DRIVE_V2
};

enum EHardwareVersion
{
	HARDWARE_VERSION_NOP,
	HARDWARE_VERSION_UNKNOWN,
	HARDWARE_VERSION_VOLTAGE_DIVIDER,  // E230006C, E230008A
	HARDWARE_VERSION_PASSIVE_FILTER	   // E230006D, E230008B
};

#endif // _AXIS_CONFIG_H_
