/* glu.pkg
** Package file to bind OpenGL GLU API to Lua.
** This file was built based on the "glu.h" file
** included in the Mesa distribution.
** From gllua by W.Celes.
*/

// This file has been modified by Nick Trout for Doris

$#ifdef WIN32
$#include <windows.h>
$#endif
$#include <GL/gl.h>
$#include <GL/glu.h>
$#include "gluaux.h"
$#include "gllbuffer.h"



#define GLU_VERSION_1_1		1


#define GLU_TRUE   GL_TRUE
#define GLU_FALSE  GL_FALSE


enum _gluenum {
    /* Normal vectors */
    GLU_SMOOTH	= 100000,
    GLU_FLAT	= 100001,
    GLU_NONE	= 100002,
    
    /* Quadric draw styles */
    GLU_POINT	= 100010,
    GLU_LINE	= 100011,
    GLU_FILL	= 100012,
    GLU_SILHOUETTE	= 100013,
    
    /* Quadric orientation */
    GLU_OUTSIDE	= 100020,
    GLU_INSIDE	= 100021,
    
    /* Tesselator - put (clearer) GLU_TESS_* versions in - cant find other on Cygwin --NDT 16/8/02 */
    GLU_TESS_BEGIN = 100100,  /* void (CALLBACK*)(GLenum    type)  */
    GLU_TESS_VERTEX,          /* void (CALLBACK*)(void      *data) */
    GLU_TESS_END,             /* void (CALLBACK*)(void)            */
    GLU_TESS_ERROR,           /* void (CALLBACK*)(GLenum    errno) */
    GLU_TESS_EDGE_FLAG,       /* void (CALLBACK*)(GLboolean boundaryEdge)  */
    GLU_TESS_COMBINE,         /* void (CALLBACK*)(GLdouble  coords[3], */
    /* GLU_BEGIN	= 100100,
    GLU_VERTEX	= 100101,
    GLU_END		= 100102,
    GLU_ERROR	= 100103,
    GLU_EDGE_FLAG	= 100104, */
    
    /* Contour types - These are apparently obsolete now --NDT 16/8/02 */
    /* GLU_CW		= 100120,
    GLU_CCW		= 100121,
    GLU_INTERIOR	= 100122,
    GLU_EXTERIOR	= 100123,
    GLU_UNKNOWN	= 100124, */
    
    /* Tesselation errors */
    GLU_TESS_ERROR1	= 100151,
    GLU_TESS_ERROR2 = 100152,
    GLU_TESS_ERROR3 = 100153,
    GLU_TESS_ERROR4 = 100154,
    GLU_TESS_ERROR5 = 100155,
    GLU_TESS_ERROR6 = 100156,
    GLU_TESS_ERROR7 = 100157,
    GLU_TESS_ERROR8 = 100158,
    //GLU_TESS_ERROR9 = 100159,
    
    /* NURBS */
    GLU_AUTO_LOAD_MATRIX	= 100200,
    GLU_CULLING		= 100201,
    GLU_PARAMETRIC_TOLERANCE= 100202,
    GLU_SAMPLING_TOLERANCE	= 100203,
    GLU_DISPLAY_MODE	= 100204,
    GLU_SAMPLING_METHOD	= 100205,
    GLU_U_STEP		= 100206,
    GLU_V_STEP		= 100207,
    
    GLU_PATH_LENGTH		= 100215,
    GLU_PARAMETRIC_ERROR	= 100216,
    GLU_DOMAIN_DISTANCE	= 100217,
    
    GLU_MAP1_TRIM_2		= 100210,
    GLU_MAP1_TRIM_3		= 100211,
    
    GLU_OUTLINE_POLYGON	= 100240,
    GLU_OUTLINE_PATCH	= 100241,
    
    GLU_NURBS_ERROR1  = 100251,
    GLU_NURBS_ERROR2  = 100252,
    GLU_NURBS_ERROR3  = 100253,
    GLU_NURBS_ERROR4  = 100254,
    GLU_NURBS_ERROR5  = 100255,
    GLU_NURBS_ERROR6  = 100256,
    GLU_NURBS_ERROR7  = 100257,
    GLU_NURBS_ERROR8  = 100258,
    GLU_NURBS_ERROR9  = 100259,
    GLU_NURBS_ERROR10 = 100260,
    GLU_NURBS_ERROR11 = 100261,
    GLU_NURBS_ERROR12 = 100262,
    GLU_NURBS_ERROR13 = 100263,
    GLU_NURBS_ERROR14 = 100264,
    GLU_NURBS_ERROR15 = 100265,
    GLU_NURBS_ERROR16 = 100266,
    GLU_NURBS_ERROR17 = 100267,   
    GLU_NURBS_ERROR18 = 100268,  
    GLU_NURBS_ERROR19 = 100269, 
    GLU_NURBS_ERROR20 = 100270, 
    GLU_NURBS_ERROR21 = 100271,   
    GLU_NURBS_ERROR22 = 100272,  
    GLU_NURBS_ERROR23 = 100273, 
    GLU_NURBS_ERROR24 = 100274,
    GLU_NURBS_ERROR25 = 100275,
    GLU_NURBS_ERROR26 = 100276,
    GLU_NURBS_ERROR27 = 100277,
    GLU_NURBS_ERROR28 = 100278,
    GLU_NURBS_ERROR29 = 100279,
    GLU_NURBS_ERROR30 = 100280,
    GLU_NURBS_ERROR31 = 100281,
    GLU_NURBS_ERROR32 = 100282,
    GLU_NURBS_ERROR33 = 100283,
    GLU_NURBS_ERROR34 = 100284,
    GLU_NURBS_ERROR35 = 100285,
    GLU_NURBS_ERROR36 = 100286,
    GLU_NURBS_ERROR37 = 100287,
    
    /* Errors */
    GLU_INVALID_ENUM		= 100900,
    GLU_INVALID_VALUE		= 100901,
    GLU_OUT_OF_MEMORY		= 100902,
    GLU_INCOMPATIBLE_GL_VERSION	= 100903,
    
    /* New in GLU 1.1 */
    GLU_VERSION	= 100800,
    GLU_EXTENSIONS	= 100801
};

/***
* tolua: GLenum type definition included
*/
typedef int GLenum;

/*  C type              GL type         storage                            */
/*-------------------------------------------------------------------------*/
typedef void            GLvoid;
typedef unsigned char   GLboolean;
typedef signed char     GLbyte;         /* 1-byte signed */
typedef short           GLshort;        /* 2-byte signed */
typedef int             GLint;          /* 4-byte signed */
typedef unsigned char   GLubyte;        /* 1-byte unsigned */
typedef unsigned short  GLushort;       /* 2-byte unsigned */
typedef unsigned int    GLuint;         /* 4-byte unsigned */
typedef int             GLsizei;        /* 4-byte signed */
typedef float           GLfloat;        /* single precision float */
typedef float           GLclampf;       /* single precision float in [0,1] */
typedef double          GLdouble;       /* double precision float */
typedef double          GLclampd;       /* double precision float in [0,1] */



                                        /*
                                        *
                                        * Miscellaneous functions
                                        *
*/

void gluLookAt( GLdouble eyex, GLdouble eyey, GLdouble eyez,
               GLdouble centerx, GLdouble centery, GLdouble centerz,
               GLdouble upx, GLdouble upy, GLdouble upz );
void gluOrtho2D( GLdouble left, GLdouble right,
                GLdouble bottom, GLdouble top );
void gluPerspective( GLdouble fovy, GLdouble aspect,
                    GLdouble zNear, GLdouble zFar );
void gluPickMatrix( GLdouble x, GLdouble y,
                   GLdouble width, GLdouble height,
                   GLint viewport[4] );
GLint gluProject( GLdouble objx, GLdouble objy, GLdouble objz,
                 GLdouble modelMatrix[16],
                 GLdouble projMatrix[16],
                 GLint viewport[4],
                 GLdouble *winx=0, GLdouble *winy=0, GLdouble *winz=0 );
GLint gluUnProject( GLdouble winx, GLdouble winy, GLdouble winz,
                   GLdouble modelMatrix[16],
                   GLdouble projMatrix[16],
                   GLint viewport[4],
                   GLdouble *objx=0, GLdouble *objy=0, GLdouble *objz=0 );
const unsigned char* gluErrorString( GLenum errorCode );


/*
*
* Mipmapping and image scaling
*
*/

GLint gluScaleImage( GLenum format,
                    GLint widthin, GLint heightin,
                    GLenum typein, GLLbuffer *datain,
                    GLint widthout, GLint heightout,
                    GLenum typeout, GLLbuffer *dataout );

GLint gluBuild1DMipmaps( GLenum target, GLint components,
                        GLint width, GLenum format,
                        GLenum type, GLLbuffer *data );

GLint gluBuild2DMipmaps( GLenum target, GLint components,
                        GLint width, GLint height, GLenum format,
                        GLenum type, GLLbuffer *data );

                        /*
                        *
                        * Quadrics
                        *
*/

GLUquadricObj *gluNewQuadric( void );
void gluDeleteQuadric( GLUquadricObj *state );
void gluQuadricDrawStyle( GLUquadricObj *quadObject, GLenum drawStyle );
void gluQuadricOrientation( GLUquadricObj *quadObject, GLenum orientation );
void gluQuadricNormals( GLUquadricObj *quadObject, GLenum normals );
void gluQuadricTexture( GLUquadricObj *quadObject, GLboolean textureCoords );

/**** Not bound
void gluQuadricCallback( GLUquadricObj *qobj, GLenum which, void (*fn)() );
****/

void gluCylinder( GLUquadricObj *qobj, GLdouble baseRadius, GLdouble topRadius,
                 GLdouble height, GLint slices, GLint stacks );
void gluSphere( GLUquadricObj *qobj,
               GLdouble radius, GLint slices, GLint stacks );
void gluDisk( GLUquadricObj *qobj,
             GLdouble innerRadius, GLdouble outerRadius,
             GLint slices, GLint loops );
void gluPartialDisk( GLUquadricObj *qobj, GLdouble innerRadius,
                    GLdouble outerRadius, GLint slices, GLint loops,
                    GLdouble startAngle, GLdouble sweepAngle );



/*
 *
 * Nurbs
 *
 */

GLUnurbsObj *gluNewNurbsRenderer( void );
void gluDeleteNurbsRenderer( GLUnurbsObj *nobj );
void gluLoadSamplingMatrices( GLUnurbsObj *nobj,
                             GLfloat modelMatrix[16],
                             GLfloat projMatrix[16],
                             GLint viewport[4] );
void gluNurbsProperty( GLUnurbsObj *nobj, GLenum property,
                      GLfloat value );
void gluGetNurbsProperty( GLUnurbsObj *nobj, GLenum property,
                         GLfloat *value );
void gluBeginCurve( GLUnurbsObj *nobj );
void gluEndCurve( GLUnurbsObj * nobj );

/*** Not yet bound
void gluNurbsCurve( GLUnurbsObj *nobj, GLint nknots, GLfloat *knot,
GLint stride, GLfloat *ctlarray, GLint order,
GLenum type );

  void gluNurbsSurface( GLUnurbsObj *nobj,
  GLint sknot_count, GLfloat *sknot,
  GLint tknot_count, GLfloat *tknot,
  GLint s_stride, GLint t_stride,
  GLfloat *ctlarray,
  GLint sorder, GLint torder,
  GLenum type );
  
    void gluPwlCurve( GLUnurbsObj *nobj, GLint count, GLfloat *array,
			 GLint stride, GLenum type );
             void gluNurbsCallback( GLUnurbsObj *nobj, GLenum which, void (*fn)() );
****/

void gluBeginSurface( GLUnurbsObj *nobj );
void gluEndSurface( GLUnurbsObj * nobj );

void gluBeginTrim( GLUnurbsObj *nobj );
void gluEndTrim( GLUnurbsObj *nobj );



/*
*
* Polygon tesselation
*
*/

/*** Nick
GLUtriangulatorObj* gluauxNewTess @ gluNewTess (void);
void gluauxDeleteTess @ gluDeleteTess (GLUtriangulatorObj* tessobj);
void gluauxTessCallback @ gluTessCallback
(GLUtriangulatorObj* tessobj, GLenum type, lua_Object fn);
void gluauxBeginPolygon @ gluBeginPolygon (GLUtriangulatorObj* tessobj);
void gluauxTessVertex @ gluTessVertex
(GLUtriangulatorObj* tessobj, GLdouble v[3], lua_Object data);
void gluauxNextContour @ gluNextContour (GLUtriangulatorObj* tessobj, GLenum type);
void gluauxEndPolygon @ gluEndPolygon (GLUtriangulatorObj* tessobj);
***/

/*
*
* New functions in GLU 1.1
*
*/

const unsigned char* gluGetString( GLenum name );

